{
    "version": "https://jsonfeed.org/version/1",
    "title": "Web前端",
    "subtitle": "=别怕路长梦远,总有星河照耀=",
    "icon": "https://honshen.xyz/images/favicon.ico",
    "description": "欢迎来到红绳的笔记空间(๑•ᴗ•๑)~,这里,你可以阅读我的学习笔记并提出独到的见解~我们将互相学习,共同进步(≧∀≦)ゞ",
    "home_page_url": "https://honshen.xyz",
    "items": [
        {
            "id": "https://honshen.xyz/2021/02/08/Others/Git--%E4%BD%BF%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E6%9B%B4%E9%AB%98%E6%95%88/",
            "url": "https://honshen.xyz/2021/02/08/Others/Git--%E4%BD%BF%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E6%9B%B4%E9%AB%98%E6%95%88/",
            "title": "Git--使团队协作更高效",
            "date_published": "2021-02-08T04:12:45.000Z",
            "content_html": "<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h2 id=\"Git安装及配置\"><a href=\"#Git安装及配置\" class=\"headerlink\" title=\"Git安装及配置\"></a>Git安装及配置</h2><ol>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRmb3J3aW5kb3dzLm9yZy8=\">官网地址~戳我!</span></p>\n</li>\n<li><p>Git配置</p>\n<blockquote>\n<p>Ctrl+R，输入cmd</p>\n<pre><code class=\"cmd\">git config --global user.name &quot;hongsheng-xu&quot;\ngit config --global user.email &quot;1394948572@qq.com&quot;\ngit config --list</code></pre>\n<p>配置成功后:控制台将输出：</p>\n<p><img data-src=\"C:\\Users\\13949\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201204201635060.png\" alt=\"配置截图\"></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"Git初始化\"><a href=\"#Git初始化\" class=\"headerlink\" title=\"Git初始化\"></a>Git初始化</h2><blockquote>\n<p>打开控制台, 在D盘创建Project</p>\n<blockquote>\n<p>+| myProject</p>\n<p>​    +| .git</p>\n<p>​    +| README.md</p>\n</blockquote>\n<pre><code class=\"cmd\">#更改文件路径\nC:\\Users\\13949&gt;D:\nC:\\Users\\13949\\Desktop&gt;md myProject\nC:\\Users\\13949\\Desktop&gt;cd myProject\n#初始化Git项目, 成功后创建一个文件夹.git\nC:\\Users\\13949\\Desktop\\myProject&gt;git init\n#Initialized empty Git repository in C:/Users/13949/Desktop/myProject/.git/\n#新建一个README.md文件\nC:\\Users\\13949\\Desktop\\myProject&gt;type nul&gt;README.md\n#提交README.md至暂存区\nC:\\Users\\13949\\Desktop\\myProject&gt;git add README.md\n#将文件提交到git仓库（-m表示添加本次提交的说明，强制要求写的）\nC:\\Users\\13949\\Desktop\\myProject&gt;git commit -m &quot;add a README file&quot;\n#[master (root-commit) e20f7ab] add a README file\n#1 file changed, 0 insertions(+), 0 deletions(-)\n#create mode 100644 README.md</code></pre>\n<pre><code class=\"cmd\">#clone项目\nC:\\Users\\13949\\Desktop\\myProject&gt;git clone https://github.com/hongsheng-xu/xinzhou.github.io</code></pre>\n<p><em>Tips:MIT 许可证几乎是最宽松的版权约定，一旦你的程序采用，也就意味着别人只要在软件包含上边的版权声明，就可以对你的程序为所欲为了（包括“使用、复制、修改、合并、出版发行、散布、再授权和/或贩售软件及软件的副本”）</em></p>\n</blockquote>\n<h2 id=\"Git状态\"><a href=\"#Git状态\" class=\"headerlink\" title=\"Git状态\"></a>Git状态</h2><pre><code class=\"cmd\">#使用git status查看项目里文件状态\nC:\\Users\\13949\\Desktop\\myProject&gt;git status\n#On branch master\n#Untracked files:\n#  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n#         xinzhou.github.io/\n#nothing added to commit but untracked files present (use &quot;git add&quot; to track)\n</code></pre>\n<h2 id=\"参考指南\"><a href=\"#参考指南\" class=\"headerlink\" title=\"参考指南\"></a>参考指南</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lNTdhNGEyY2YwNzc=\">Git使用教程</span></p>\n",
            "tags": [
                "Web随记",
                "git",
                "web",
                "随记"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/02/07/Hexo/%E7%95%AA%E5%A4%96%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85(%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F)/",
            "url": "https://honshen.xyz/2021/02/07/Hexo/%E7%95%AA%E5%A4%96%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85(%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F)/",
            "title": "番外篇-服务器环境安装(三种方式)",
            "date_published": "2021-02-07T04:12:45.000Z",
            "content_html": "<h1 id=\"环境安装\"><a class=\"anchor\" href=\"#环境安装\">#</a> 环境安装</h1>\n<ul>\n<li>一般有三种安装方式: rpm (jdk) 解压缩 (tomcat) yum 在线安装 (docker)</li>\n<li>rmp (以安装 jdk 为例)</li>\n<li>解压缩 (以 nodejs 为例：发布网站)</li>\n<li>yun 在线安装 (docker: 运行 docker)</li>\n</ul>\n<h1 id=\"jdk安装\"><a class=\"anchor\" href=\"#jdk安装\">#</a> JDK 安装</h1>\n<ol>\n<li>\n<p>检查服务器是否存在 java 环境</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java -version</pre></td></tr></table></figure><p>如果控制台输出 <code>-bash: java: command not found</code>  表示服务器没有安装 java</p>\n<p>如果控制台输出了 java 的版本号，我们需要卸载 java, 然后重新安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> jdk <span class=\"token comment\">#检查 jdk 的版本信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rpm</span> -e --nodeps jdk版本号 <span class=\"token comment\">#强制移除 jdk 版本号，如:rpm -e --nodeps jdk1.8-1.8.0_281-fcs.x86_64</span></pre></td></tr></table></figure></li>\n<li>\n<p>下载 JDK 的 rpm 包 :  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZC5vcmFjbGUuY29tL290bi9qYXZhL2pkay84dTI4MS1iMDkvODlkNjc4ZjJiZTE2NDc4NmIyOTI1Mjc2NThjYTE2MDUvamRrLTh1MjgxLWxpbnV4LXg2NC5ycG0=\">https://download.oracle.com/otn/java/jdk/8u281-b09/89d678f2be164786b292527658ca1605/jdk-8u281-linux-x64.rpm</span></p>\n</li>\n<li>\n<p>使用 xftpt 上传至 /home 目录里的用户文件夹下，我这里上传到 /home/honshen 目录下，<strong> 注意命令:  <code>rpm -ivh 文件名</code> </strong>:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /home/honshen</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rpm</span> -ivh jdk-8u281-linux-x64.rpm</pre></td></tr></table></figure></li>\n<li>\n<p>安装完成后使用命令 <code>java -version</code>  查看版本号，如果控制台输出如下表明 java 已经安装成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen honshen<span class=\"token punctuation\">]</span><span class=\"token comment\"># java -version</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>java version <span class=\"token string\">\"1.8.0_281\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Java<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> SE Runtime Environment <span class=\"token punctuation\">(</span>build <span class=\"token number\">1.8</span>.0_281-b09<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Java HotSpot<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> <span class=\"token number\">64</span>-Bit Server VM <span class=\"token punctuation\">(</span>build <span class=\"token number\">25.281</span>-b09, mixed mode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置 java 的环境变量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>profile</pre></td></tr></table></figure><p>然后按键盘的 i 键表示编辑文本，在文件的最后书写环境变量，书写完成后，按 esc 键然后输入 <code>:wq</code>  表示保存并退出</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-31_18-19-20.png\" alt=\"环境变量\" /></p>\n</li>\n<li>\n<p>让配置文件生效</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure></li>\n<li>\n<p>查看防火墙开启了哪些端口，然后开启端口 80, 重启防火墙，如果是阿里云一定要修改安全组</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --list-ports</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>firewall-cmd --zone<span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl restart firewalld.service</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"解压缩安装\"><a class=\"anchor\" href=\"#解压缩安装\">#</a> 解压缩安装</h1>\n<ol>\n<li>\n<p>使用命令 cd /usr/local/src 进入到用户目录下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/src</pre></td></tr></table></figure></li>\n<li>\n<p>这时我们就在 src 目录下，在这个目录下我们安装 nodejs (这是一个压缩包), 并解压，如果提示找不到 wget 命令，就先使用命令:  <code>yum install -y wget </code> 去安装 wget</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> xvJf node-v10.15.3-linux-x64.tar.xz</pre></td></tr></table></figure></li>\n<li>\n<p>我们对解压后的文件夹更名，方便我们之后建立软连接</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> node-v10.15.3-linux-x64 nodejs</pre></td></tr></table></figure></li>\n<li>\n<p>建立软连接</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ln</span> -sf /usr/local/src/nodejs/bin/node /usr/local/bin/node</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ln</span> -sf /usr/local/src/nodejs/bin/npm /usr/local/bin/npm</pre></td></tr></table></figure></li>\n<li>\n<p>配置环境变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=/usr/local/nodejs/bin:<span class=\"token environment constant\">$PATH</span>'</span> <span class=\"token operator\">>></span> /etc/profile</pre></td></tr></table></figure></li>\n<li>\n<p>使环境变量生效</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure></li>\n<li>\n<p>通过查看版本号检测 nodejs 是否安装成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node -v</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> -v</pre></td></tr></table></figure><p>如果 xshell 控制台上输出如下信息表面 nodejs 环境已经搭建好了，如果你使用的 nodejs 版本不一样那么控制台输出也不一样</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen src<span class=\"token punctuation\">]</span><span class=\"token comment\"># node -v</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v15.7.0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen src<span class=\"token punctuation\">]</span><span class=\"token comment\"># npm -v</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">7.4</span>.3</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"yum安装\"><a class=\"anchor\" href=\"#yum安装\">#</a> yum 安装</h1>\n<ol>\n<li>\n<p>检测 CentOs 版本，我的版本是 CentOS7, 如果版本不一样，命令也不一样，这里上 docker 官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==\">https://docs.docker.com/engine/install/centos/</span></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/redhat-release</pre></td></tr></table></figure></li>\n<li>\n<p>移除本地的 docker</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum remove docker <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>           docker-client <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           docker-client-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           docker-common <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           docker-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           docker-latest-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           docker-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           docker-engine</pre></td></tr></table></figure></li>\n<li>\n<p>在线安装命令 <code>yum -y intsall 包名</code> ，-y 表示所有提示都选择确定</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> -y yum-utils device-mapper-persistant-data lvm2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr></table></figure></li>\n<li>\n<p>更新 yum 包索引</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum makecache fast</pre></td></tr></table></figure></li>\n<li>\n<p>安装 docker</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io</pre></td></tr></table></figure></li>\n<li>\n<p>启动 docker, 如果没有报错表启动成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start docker</pre></td></tr></table></figure></li>\n<li>\n<p>查看 docker 是否启动成功，我们执行以下命令查看 docker 进程</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> docker</pre></td></tr></table></figure></li>\n<li>\n<p>运行 helloword, 执行以下命令 docker 会去官网上 pull 一个 helloworld, 当你在控制台看到 <code>Hello from Docker!</code>  已经成功了</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run hello-world</pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "HEXO搭建个人博客",
                "服务器",
                "Hexo",
                "博客"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/02/06/Docker/%E7%AC%AC6%E7%AB%A0-Docker%E8%BF%9B%E9%98%B6%E4%B9%8BDockerCompose/",
            "url": "https://honshen.xyz/2021/02/06/Docker/%E7%AC%AC6%E7%AB%A0-Docker%E8%BF%9B%E9%98%B6%E4%B9%8BDockerCompose/",
            "title": "第6章-Docker进阶之Docker Compose",
            "date_published": "2021-02-06T04:20:45.000Z",
            "content_html": "<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h1><ul>\n<li><p>轻松高效管理容器-定义和运行多个容器</p>\n</li>\n<li><p>compose是开源项目需要先安装</p>\n</li>\n<li><p>三个步骤</p>\n<ol>\n<li><p><code>Dockerfile</code>定义应用环境–保证应用可以在任意地方可运行</p>\n</li>\n<li><p>将配置写在<code>docker-compose.yml</code>文件中,类似如下: </p>\n<pre><code class=\"shell\">version: &quot;3.9&quot;  # optional since v1.27.0\nservices:\n  web:\n    build: .\n    ports:\n      - &quot;5000:5000&quot;\n    volumes:\n      - .:/code\n      - logvolume01:/var/log\n    links:\n      - redis\n  redis:\n    image: redis\nvolumes:\n  logvolume01: &#123;&#125;</code></pre>\n</li>\n<li><p><code>docker-compose up</code>运行项目即可</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"Compose安装\"><a href=\"#Compose安装\" class=\"headerlink\" title=\"Compose安装\"></a>Compose安装</h1><ul>\n<li>官网地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsLw==\">https://docs.docker.com/compose/install/</span></li>\n</ul>\n<ol>\n<li><p>下载</p>\n<pre><code class=\"shell\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n\n#推荐使用下面这个地址\ncurl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n</code></pre>\n</li>\n</ol>\n<p>#如果第一步没有下载下来,我们就手动去网站下载即可!<br>   #地址: https ://github.com/ docker/compose/releases<br>   #下载:docker-compose-Linux-x86_64</p>\n<h1 id=\"然后将文件上传到-usr-loca1-bin-文件夹下，然后将其重命名为docker-compose\"><a href=\"#然后将文件上传到-usr-loca1-bin-文件夹下，然后将其重命名为docker-compose\" class=\"headerlink\" title=\"然后将文件上传到/usr/loca1/bin/文件夹下，然后将其重命名为docker-compose\"></a>然后将文件上传到/usr/loca1/bin/文件夹下，然后将其重命名为docker-compose</h1><pre><code>\n2. 授权\n\n```shell\nsudo chmod +x /usr/local/bin/docker-compose</code></pre>\n<ol start=\"3\">\n<li><p>查看</p>\n<pre><code class=\"shell\">docker-compose version\n\n#控制台输出如下表示安装成功\n[root@honshen bin]# docker-compose version\ndocker-compose version 1.25.5, build 8a1c60f6\ndocker-py version: 4.1.0\nCPython version: 3.7.5\nOpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</code></pre>\n</li>\n</ol>\n<h1 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h1><ul>\n<li>官网地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9nZXR0aW5nc3RhcnRlZC8=\">https://docs.docker.com/compose/gettingstarted/</span></li>\n<li>流程:<ol>\n<li>创建网络,生成一个默认网络: 文件夹_default,且服务都是在同一网段下,可以通过域名互相访问</li>\n<li>执行Dockerfile</li>\n<li>启动服务</li>\n</ol>\n</li>\n<li>默认服务名: 文件名_服务名_副本数量 </li>\n<li>集群的服务一遍有多个副本(运行实例),项目一定是弹性的,多个副本保证高可用高并发</li>\n</ul>\n<h1 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h1><ul>\n<li><p>运行时停止</p>\n<pre><code class=\"shell\">Ctrl+C</code></pre>\n</li>\n<li><p>进入<code>docker-compose.yml</code>所在文件夹,通过命令停止</p>\n<pre><code class=\"shell\">docker-compose down</code></pre>\n</li>\n</ul>\n<h1 id=\"docker-compose-yml的编写规则\"><a href=\"#docker-compose-yml的编写规则\" class=\"headerlink\" title=\"docker-compose.yml的编写规则\"></a>docker-compose.yml的编写规则</h1><ul>\n<li><p>官方示例: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9jb21wb3NlLWZpbGUvY29tcG9zZS1maWxlLXYzLw==\">https://docs.docker.com/compose/compose-file/compose-file-v3/</span></p>\n<pre><code class=\"yml\"># 3层\n\nversion: &#39;&#39; # 版本号\nservices: # 服务\n    服务1: # docker配置\n        image:\n        build:\n        network:\n        ...\n    服务2: # 配置\n    ...\n# 其他配置:网络,卷挂载,全局规则\nvolumes:\nnetworks:\nconfigs:</code></pre>\n<ul>\n<li>当你的服务依赖于其他应用时需要先启动其他服务使用<code>depends_on</code></li>\n</ul>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-06_13-06-41.png\" alt=\"注意服务的启动顺序\"></p>\n</li>\n</ul>\n<h1 id=\"一键部署WordPress\"><a href=\"#一键部署WordPress\" class=\"headerlink\" title=\"一键部署WordPress\"></a>一键部署WordPress</h1><ol>\n<li><p>新建一个WordPress的文件夹</p>\n<pre><code class=\"shell\">mkdir MyWordPress</code></pre>\n</li>\n<li><p>新建docker-compose.yml</p>\n<pre><code class=\"shell\">vim docker-compose.yml</code></pre>\n<p>复制以下配置到yml中并按下esc后在输入<code>:wq</code>退出</p>\n<pre><code class=\"yml\">version: &#39;3.3&#39;\n\nservices:\n   db:\n     image: mysql:5.7\n     volumes:\n       - db_data:/var/lib/mysql\n     restart: always\n     environment:\n       MYSQL_ROOT_PASSWORD: somewordpress\n       MYSQL_DATABASE: wordpress\n       MYSQL_USER: wordpress\n       MYSQL_PASSWORD: wordpress\n\n   wordpress:\n     depends_on:\n       - db\n     image: wordpress:latest\n     ports:\n       - &quot;8000:80&quot;\n     restart: always\n     environment:\n       WORDPRESS_DB_HOST: db:3306\n       WORDPRESS_DB_USER: wordpress\n       WORDPRESS_DB_PASSWORD: wordpress\n       WORDPRESS_DB_NAME: wordpress\nvolumes:\n    db_data: &#123;&#125;</code></pre>\n</li>\n<li><p>运行WordPress</p>\n<pre><code class=\"shell\"># 前台运行\ndocker-compose up\n#后台运行\ndocker-compose up -d\n#重新打包运行\ndocker-compose up --build</code></pre>\n</li>\n<li><p>查看WordPress站点</p>\n<p>你可以尝试访问服务器的公网ip:  http://公网ip:8000,并开始使用WordPress</p>\n</li>\n</ol>\n",
            "tags": [
                "Docker基础及进阶",
                "docker",
                "笔记",
                "服务器"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/02/04/Docker/%E7%AC%AC4%E7%AB%A0-Docker%E7%9A%84%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86/",
            "url": "https://honshen.xyz/2021/02/04/Docker/%E7%AC%AC4%E7%AB%A0-Docker%E7%9A%84%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86/",
            "title": "第4章-Docker的镜像原理",
            "date_published": "2021-02-04T04:20:45.000Z",
            "content_html": "<h1 id=\"docker镜像原理\"><a class=\"anchor\" href=\"#docker镜像原理\">#</a> Docker 镜像原理</h1>\n<h2 id=\"联合文件系统\"><a class=\"anchor\" href=\"#联合文件系统\">#</a> 联合文件系统</h2>\n<p>​\tUnionFS (联合文件系统）: Union 文件系统 ( UnionFS) 是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下 (unite several directories into a single virtualfilesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br />\n​\t特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-02_21-51-16.png\" alt=\"文件系统\" /></p>\n<p>​\tdocker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。<br />\n​\tboots (boot fle system) 主要包含 bootloader 和 kernel, bootloader 主要是引导加载 kernel, Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是 boots。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。<br />\n​\troots (rot fle system)，在 bootfs 之上。包含的就是典型 Linux 系统中的 /dev,/proc, /bin, /etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 uBuntu , Centos 等等。</p>\n<h1 id=\"镜像层和容器层\"><a class=\"anchor\" href=\"#镜像层和容器层\">#</a> 镜像层和容器层</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_10-04-32.png\" alt=\"理解\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_10-08-01.png\" alt=\"分层\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_10-08-22.png\" alt=\"合并\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_10-12-54.png\" alt=\"镜像层\" /></p>\n<h1 id=\"commit镜像\"><a class=\"anchor\" href=\"#commit镜像\">#</a> commit 镜像</h1>\n<ul>\n<li>\n<p>提交一个镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker commit <span class=\"token comment\">#提交容器称为一个副本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker commit -m<span class=\"token operator\">=</span><span class=\"token string\">\"描述\"</span> -a<span class=\"token operator\">=</span><span class=\"token string\">\"作者\"</span> 容器id 镜像名:<span class=\"token punctuation\">[</span>版本<span class=\"token punctuation\">]</span> <span class=\"token comment\">#完整的提交一个镜像</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#例如:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker commit -m<span class=\"token operator\">=</span><span class=\"token string\">\"add webapps app\"</span> -a<span class=\"token operator\">=</span><span class=\"token string\">\"honshen\"</span> 300e315adb2f tomcat01:1.0</pre></td></tr></table></figure></li>\n<li>\n<p>执行上述命令后会生成一个 tomcat01 的镜像 (版本号：1.0), 以后我们可以直接使用修改后的镜像，这个镜像类似于虚拟机的快照</p>\n</li>\n</ul>\n",
            "tags": [
                "Docker基础及进阶",
                "docker",
                "笔记",
                "服务器"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/02/04/Docker/%E7%AC%AC5%E7%AB%A0-Docker%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7,File%E5%92%8C%E7%BD%91%E7%BB%9C/",
            "url": "https://honshen.xyz/2021/02/04/Docker/%E7%AC%AC5%E7%AB%A0-Docker%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7,File%E5%92%8C%E7%BD%91%E7%BB%9C/",
            "title": "第5章-Docker的数据卷,File和网络",
            "date_published": "2021-02-04T04:20:45.000Z",
            "content_html": "<h1 id=\"容器数据卷\"><a class=\"anchor\" href=\"#容器数据卷\">#</a> 容器数据卷</h1>\n<h2 id=\"为什么需要\"><a class=\"anchor\" href=\"#为什么需要\">#</a> 为什么需要？</h2>\n<ul>\n<li>数据存放在容器中，删除容器数据丢失 --<strong> 需求：数据的可持久化</strong></li>\n<li>类似于 mysql 一样的数据库 --<strong> 需求：数据存储在本地</strong></li>\n<li><strong>容器之间数据共享 -- 容器产生的数据同步到本地</strong></li>\n</ul>\n<h2 id=\"实质\"><a class=\"anchor\" href=\"#实质\">#</a> 实质</h2>\n<ul>\n<li>\n<p>将容器内的目录挂载到 linux 服务器上</p>\n</li>\n<li>\n<p>容器的持久化和同步操作</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_11-06-43.png\" alt=\"挂载\" /></p>\n</li>\n</ul>\n<h1 id=\"挂载数据卷\"><a class=\"anchor\" href=\"#挂载数据卷\">#</a> 挂载数据卷</h1>\n<h2 id=\"指定路径挂载\"><a class=\"anchor\" href=\"#指定路径挂载\">#</a> 指定路径挂载</h2>\n<ul>\n<li>\n<p><code>docker run</code>  的参数中加上 <code>- v</code> , 如下:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -it -v 主机目录:容器目录 -p 主机端口:容器端口 容器id</pre></td></tr></table></figure><p>例如:   <code>docker run -it -v /home/mysql:/usr/mysql mysql /bin/bash </code> , 这里将容器内 /usr/mysql 目录挂载到服务器的 /home/mysql 目录下</p>\n</li>\n<li>\n<p>使用 <code>docker inspect</code>  查看卷是否挂载成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker inspect 容器id</pre></td></tr></table></figure><p>例如:  <code>docker inspect 300e315adb2f</code> , 控制台会输出其配置文件信息，其中字段 <code>Mounts</code>  中有一个对象其中记录了挂载信息</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"Mounts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bind\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 挂载方式为绑定</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"Source\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home/mysql\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 挂载的服务器目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"Destination\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home/msql\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 挂载的容器目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"Mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">\"RW\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">\"Propagation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"private\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"具名挂载和匿名挂载\"><a class=\"anchor\" href=\"#具名挂载和匿名挂载\">#</a> 具名挂载和匿名挂载</h2>\n<ul>\n<li>\n<h3 id=\"查看卷信息\"><a class=\"anchor\" href=\"#查看卷信息\">#</a> 查看卷信息</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker volume --help</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Commands:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  create      Create a volume</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  inspect     Display detailed information on one or <span class=\"token function\">more</span> volumes</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">ls</span>          List volumes</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  prune       Remove all unused <span class=\"token builtin class-name\">local</span> volumes</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">rm</span>          Remove one or <span class=\"token function\">more</span> volumes</pre></td></tr></table></figure></li>\n<li>\n<h3 id=\"匿名挂载\"><a class=\"anchor\" href=\"#匿名挂载\">#</a> 匿名挂载</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -P --name 容器名 -v 路径 镜像</pre></td></tr></table></figure><p>例如:  <code>docker run -d -P --name nginx01 -v /ect/nginx nginx</code> , 这里 - v 的参数只写了容器的路径，没有写主机的路径，这种挂载的卷名称为 hashcode</p>\n<p>你可以使用 <code>docker volume ls</code>  查看本地挂载的卷，通过匿名挂载的卷名称是一串很长的 hashcode, 这些卷挂载于服务器的 <code>/var/lib/docker/volumes/hashcode卷名称/_data</code>  路径下，一般不建议使用匿名挂载</p>\n</li>\n<li>\n<h3 id=\"具名挂载\"><a class=\"anchor\" href=\"#具名挂载\">#</a> 具名挂载</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -P --name 容器名 -v 卷名称:路径 镜像</pre></td></tr></table></figure><p>例如:  <code>docker run -d -P --name nginx02 -v honshen:/ect/nginx nginx</code> , 这里为挂载路径命名为 honshen</p>\n<p>你可以使用 <code>docker volume 卷名称</code> 查看具名挂载的具体路径，例如:  <code>docker volume honshen</code>  可以查看到 nginx02 的挂载路径，一般 docker 的挂载路径为服务器的 <code>/var/lib/docker/volumes/卷名称/_data</code>  路径下</p>\n</li>\n</ul>\n<h2 id=\"修改卷权限\"><a class=\"anchor\" href=\"#修改卷权限\">#</a> 修改卷权限</h2>\n<ul>\n<li>\n<p>在挂载时 <code>-v 路径:ro</code>  表示只读或 <code>-v 路径:rw</code>  表示可读可写</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -P --name 容器名 -v 卷名称:路径:ro 镜像</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker run -d -P --name 容器名 -v 卷名称:路径:rw 镜像</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker run -d -P --name 容器名 -v 服务器路径:容器路径:ro 镜像</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker run -d -P --name 容器名 -v 服务器路径:容器路径:rw 镜像</pre></td></tr></table></figure></li>\n<li>\n<p>一旦使用 ro 修改为只读，容器对改卷没有操作权限，该卷只能通过宿主机 (服务器去修改)</p>\n</li>\n</ul>\n<h1 id=\"安装mysql\"><a class=\"anchor\" href=\"#安装mysql\">#</a> 安装 mysql</h1>\n<ol>\n<li>\n<p>docker 下载 mysql <code>docker pull mysql</code>  最新版本，这里指定下载 5.7 版本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull mysql:5.7</pre></td></tr></table></figure></li>\n<li>\n<p>运行容器并挂载数据</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -it -p <span class=\"token number\">3306</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>配置mysql初始密码 --name mysql01 mysql:5.7</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen home <span class=\"token punctuation\">]</span><span class=\"token comment\"># docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSwORD=123456 --name mysql01 mysql:5.7</span></pre></td></tr></table></figure><p>这里，我们启动 mysql 服务 (端口是 3306) 并将 mysql 的数据和配置文件挂载到了服务器的 /home/mysql 下，接下来我们可以使用 sqlyog 远程连接 mysql</p>\n</li>\n</ol>\n<h1 id=\"dockerfile\"><a class=\"anchor\" href=\"#dockerfile\">#</a> Dockerfile</h1>\n<h2 id=\"初识dockerfile\"><a class=\"anchor\" href=\"#初识dockerfile\">#</a> 初识 Dockerfile</h2>\n<ul>\n<li>\n<p>dockerfile 是用来构建 docker 镜像的构建文件</p>\n</li>\n<li>\n<p>创建 dockerfile, 名字可以任意但文件名为建议 Dockerfile</p>\n</li>\n<li>\n<p>文件中命令大写！</p>\n</li>\n<li>\n<p>使用 <code>docker build</code>  执行 Dockerfile</p>\n<figure class=\"highlight docker\"><figcaption data-lang=\"docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">FROM</span> centos</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">VOLUME</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"容器挂载路径\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"容器挂载路径\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CMD</span> echo <span class=\"token string\">\"--end--\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p>这种方式挂载出来是匿名挂载，你可以使用 <code>docker inspect 容器id</code>  查看镜像中的 Mounts 字段，这个对象里记录了卷挂载的服务器路径</p>\n</li>\n</ul>\n<h2 id=\"容器数据卷-2\"><a class=\"anchor\" href=\"#容器数据卷-2\">#</a> 容器数据卷</h2>\n<ul>\n<li>\n<p>实现多个容器间的数据共享</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#启动一个容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker run -it --name 容器名称 -v 服务器路径:容器路径 /bin/bash 容器id</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#启动第二个容器并与第一个共享数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker run -it --name 容器名称 --volumes-from 第一个容器名称 容器id</pre></td></tr></table></figure></li>\n<li>\n<p>共享的文件是互相拷贝的，删除其中一个容器另一个容器的数据不会丢失，数据卷的声明周期持续到没有容器使用为止，且一旦使用同步到了本地那么数据卷将不会消失</p>\n</li>\n</ul>\n<h2 id=\"dockerfile构建镜像\"><a class=\"anchor\" href=\"#dockerfile构建镜像\">#</a> Dockerfile 构建镜像</h2>\n<h3 id=\"基础知识\"><a class=\"anchor\" href=\"#基础知识\">#</a> 基础知识</h3>\n<ul>\n<li>\n<p>每个保留关键字 (命令) 都是大写，代码从上到下顺序执行执行</p>\n</li>\n<li>\n<p>#表示注释，每一行的命令都会创建一个新的镜像层并提交</p>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/2030366/202006/2030366-20200630103737429-2119801149.png\" alt=\"镜像层\" /></p>\n</li>\n</ul>\n<h3 id=\"命令集\"><a class=\"anchor\" href=\"#命令集\">#</a> 命令集</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FROM</td>\n<td>基础镜像，一切从这里开始构建</td>\n</tr>\n<tr>\n<td>MAINTAINER</td>\n<td>镜像的作者：姓名 + 邮箱</td>\n</tr>\n<tr>\n<td>RUN</td>\n<td>docker 镜像构建时执行的命令</td>\n</tr>\n<tr>\n<td>ADD</td>\n<td>添加内容</td>\n</tr>\n<tr>\n<td>WORKDIR</td>\n<td>镜像的工作目录</td>\n</tr>\n<tr>\n<td>VOLUME</td>\n<td>挂载卷</td>\n</tr>\n<tr>\n<td>EXPOSE</td>\n<td>指定暴露端口</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>指定容器启动时运行的命令，只有最后一个会生效，可被替代</td>\n</tr>\n<tr>\n<td>ENTRYPOINT</td>\n<td>指定容器启动时运行的命令，可以追加命令</td>\n</tr>\n</tbody>\n</table>\n<p>tips:CMD 和 ENTRYPOINT 的区别:</p>\n<ul>\n<li>CMD:build 成功后执行 <code>docker run 镜像id</code>  会执行 CMD 的命令相当于 <code>docker run 镜像id CMD命令</code> ，但是如果在 <code>docker run 镜像id 参数</code> 类似于 <code>docker run 镜像id CMD命令+参数</code> 会报错，如果想对 CMD 中的命令加参数，需要覆盖掉 CMD 命令，直接写 <code>docker run 镜像id 命令+参数</code></li>\n<li>ENTRYPOINT: 执行 <code>docker run 镜像id</code>  会执行 ENTRYPOINT 的命令相当于 <code>docker run 镜像id ENTRYPOINT命令</code> ，但是如果在 <code>docker run 镜像id 参数</code> 类似于 <code>docker run 镜像id ENTRYPOINT命令+参数</code> 不会报错</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ONBUILD</td>\n<td>当构建一个被继承的 dockerfile, 这时会运行 ONBUILD 指令</td>\n</tr>\n<tr>\n<td>COPY</td>\n<td>将文件拷贝到镜像中</td>\n</tr>\n<tr>\n<td>ENV</td>\n<td>构建镜像设置环境变量</td>\n</tr>\n</tbody>\n</table>\n<p><strong>dockerhub 中很多镜像来源于一个基础镜像</strong></p>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">FROM</span> scratch</pre></td></tr></table></figure><p><img data-src=\"https://upload-images.jianshu.io/upload_images/6870990-744e06b25e051ac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp\" alt=\"dockerfile\" /></p>\n<h3 id=\"制作centos\"><a class=\"anchor\" href=\"#制作centos\">#</a> 制作 centos</h3>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">FROM</span> centos</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">MAINTAINER</span> honshen&lt;1394948572@qq.com<span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ENV</span> MYPATH /usr/local</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">WORKDIR</span> $MYPATH</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">RUN</span> yum <span class=\"token punctuation\">-</span>y install vim</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">RUN</span> yum <span class=\"token punctuation\">-</span>y install net<span class=\"token punctuation\">-</span>tools</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">EXPOSE</span> 80</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">CMD</span> echo $MYPATH</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">CMD</span> echo <span class=\"token string\">\"--end--\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">CMD</span> /bin/bash</pre></td></tr></table></figure><ul>\n<li>运行 dockerfile</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker build -f 文件路径 -t 镜像名称:版本号 <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p><strong>注意命令最后有个英文字符点 <code>.</code> </strong></p>\n<h3 id=\"查看镜像构建历史\"><a class=\"anchor\" href=\"#查看镜像构建历史\">#</a> 查看镜像构建历史</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token function\">history</span> 镜像id</pre></td></tr></table></figure><h1 id=\"发布镜像\"><a class=\"anchor\" href=\"#发布镜像\">#</a> 发布镜像</h1>\n<h2 id=\"发布到dockerhub\"><a class=\"anchor\" href=\"#发布到dockerhub\">#</a> 发布到 dockerhub</h2>\n<ul>\n<li>\n<p>dockerhub 官网地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">https://hub.docker.com/</span></p>\n</li>\n<li>\n<p>dockerhub 注册地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5odWIuZG9ja2VyLmNvbS8=\">https://registry.hub.docker.com/</span></p>\n</li>\n<li>\n<p>登录到命令行登录 dockerhub</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker login -u 用户名 -p 密码</pre></td></tr></table></figure></li>\n<li>\n<p>发布到 dockerhub</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker push 作者/镜像名:版本号</pre></td></tr></table></figure><p>例如:  <code>docker push honshen/myCentos:1.0</code></p>\n</li>\n</ul>\n<h2 id=\"发布到阿里云镜像\"><a class=\"anchor\" href=\"#发布到阿里云镜像\">#</a> 发布到阿里云镜像</h2>\n<ul>\n<li>\n<p>登录阿里云控制台找到容器镜像服务其中有镜像仓库</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-39-39.png\" alt=\"找到镜像仓库\" /></p>\n</li>\n<li>\n<p>镜像仓库下面是命名空间，首先我们创建一个命名空间 -- 创建命名空间的按钮在网页的右上角</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-45-47.png\" alt=\"创建命名空间\" /></p>\n</li>\n<li>\n<p>接着打开镜像仓库我们点击创建镜像仓库</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-47-34.png\" alt=\"创建镜像仓库\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-47-56.png\" alt=\"仓库选择本地\" /></p>\n</li>\n<li>\n<p>使用阿里云镜像：我们创建完仓库后点击仓库，这里有阿里云的官方操作，我们只需要复制代码即可</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-51-12.png\" alt=\"使用阿里云镜像\" /></p>\n</li>\n</ul>\n<h2 id=\"docker全流程\"><a class=\"anchor\" href=\"#docker全流程\">#</a> docker 全流程</h2>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-05_11-06-40.jpg\" alt=\"全流程\" /></p>\n<h1 id=\"docker网络\"><a class=\"anchor\" href=\"#docker网络\">#</a> docker 网络</h1>\n<h2 id=\"理解docker0\"><a class=\"anchor\" href=\"#理解docker0\">#</a> 理解 docker0</h2>\n<ul>\n<li>\n<p>获取 ip</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ip</span> addr</pre></td></tr></table></figure><p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-05_12-34-16.png\" alt=\"地址\" /></p>\n</li>\n</ul>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<ul>\n<li>\n<p>安装 docker 后，docker 会有一个网卡 docker0 (桥接模式), 使用 evth-pair 技术</p>\n</li>\n<li>\n<p>每启动一个 docker 容器，docker 会给容器分配一个同网段的 ip</p>\n<blockquote>\n<p>容器的网卡都是一对一对的<br />\n evth-pair 是一对虚拟设备的接口，成对出现，一端连接协议，一端彼此相连，相当于桥梁连接各种虚拟设备</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>因此容器和容器之间可以互相 ping 通</p>\n</blockquote>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-05_12-52-02.png\" alt=\"原理图\" /></p>\n<ul>\n<li>从图可知 tomcat01 和 tomcat02 通过 docker0 转发请求，docker0 充当路由，在容器不指定网络的情况下是由 docker0 路由，docker0 会给每个容器分配一个可用的 ip 保证其可以互相通信</li>\n</ul>\n<h2 id=\"-link\"><a class=\"anchor\" href=\"#-link\">#</a> --link</h2>\n<ul>\n<li>\n<p>启动时命令 <code>--link 容器名</code> 与另一个容器互联</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -P --name 容器名 --link 容器名 镜像名</pre></td></tr></table></figure><p>例如:  <code>docker run -d -P --name tomcat02 --link tomcat01 tomcat</code>  这样将 tomcat02 和 tomcat01 联接，你可以尝试 ping tomcat01  <code>docker exec -it tomcat02 ping tomcat01</code>  你可以看到来自 tomcat01 的数据包，但是如果 tomcat01 启动时没有连接 tomcat02 则不能反向 ping tomcat01 的数据</p>\n</li>\n<li>\n<p>查看配置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it 容器名 <span class=\"token function\">cat</span> /etc/hosts</pre></td></tr></table></figure><p>例如:  <code>docker exec -it tomcat02 cat /etc/host</code> , 你可以清楚的在此处看到 tomcat02 的 hosts 文件中直接将 tomcat01 的容器名映射到了内网地址下，但是如果你查看 tomcat01 的 hosts 文件你会发现这里没有对 tomcat02 的相关映射</p>\n</li>\n<li>\n<p>不建议使用 --link</p>\n</li>\n</ul>\n<h2 id=\"自定义网络\"><a class=\"anchor\" href=\"#自定义网络\">#</a> 自定义网络</h2>\n<ul>\n<li>docker0 不支持容器名访问</li>\n</ul>\n<h3 id=\"网络模式\"><a class=\"anchor\" href=\"#网络模式\">#</a> 网络模式</h3>\n<ul>\n<li>bridge: 桥接 (docker 默认，自定义网络)</li>\n<li>none: 不配置网络</li>\n<li>host: 和宿主机共享网络</li>\n<li>container: 和容器网络互联 (局限很大)</li>\n</ul>\n<h3 id=\"容器互联\"><a class=\"anchor\" href=\"#容器互联\">#</a> 容器互联</h3>\n<ul>\n<li>\n<p>查看 docker 网络配置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker network <span class=\"token function\">ls</span> <span class=\"token comment\">#查看网络</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker network <span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>NAME<span class=\"token punctuation\">]</span> <span class=\"token comment\">#移除网络</span></pre></td></tr></table></figure></li>\n<li>\n<p>自定义网络</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker network create --driver bridge --subnet 子网ip --gateway 网关 网络名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker -d -P --name 容器名 --net 网络名 镜像名 <span class=\"token comment\">#默认使用 docker0 也是就 --net bridge</span></pre></td></tr></table></figure><p>例如:  <code>docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.169.0.1 mynet</code> , 接着你可要使用命令 <code>docker network ls</code>  查看新建的网络，这里子网最大支持 192.168.0.2~192.168.255.255, 你也可以使用 <code>docker network inspect 网络名</code> 去查看某个网络名详细的网络配置</p>\n<p>这样自定义网络可以用于容器互联，这时即便没有使用 --link 也可以直接 <code>docker exec -it tomcat02 ping tomcat01</code>  或者 <code>docker exec -it tomcat01 ping tomcat02</code></p>\n</li>\n</ul>\n<h2 id=\"网络连通\"><a class=\"anchor\" href=\"#网络连通\">#</a> 网络连通</h2>\n<ul>\n<li>\n<p>当两个容器处于不同的网段时，直接 <code>ping 容器名</code> 会报错</p>\n</li>\n<li>\n<p>尝试使一个容器直接连接到网络</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker network connect 网络名 容器名</pre></td></tr></table></figure><p>例如:  <code>docker network connect tomcat03 mynet</code>  如果 tomcat03 的网段与我们之前自定义的网段 192.168 不同我们通过这种方式使 tomcat03 能够访问到 tomcat01 和 tomcat02, 这时我们可以查看网络的连接配置 <code>docker network inspect mynet</code> , 这时可以看到 docker 直接将 tomcat03 加入到了 tomcat01 和 tomcat02 所在的网络也就是一个容器两个 ip,tomcat03 拥有了两个不同网段的 ip 地址</p>\n</li>\n</ul>\n",
            "tags": [
                "Docker基础及进阶",
                "docker",
                "笔记",
                "服务器"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/02/03/Docker/%E7%AC%AC3%E7%AB%A0-Docker%E9%83%A8%E7%BD%B2Nginx-Tomcat-ES+Kibana%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BFportainer/",
            "url": "https://honshen.xyz/2021/02/03/Docker/%E7%AC%AC3%E7%AB%A0-Docker%E9%83%A8%E7%BD%B2Nginx-Tomcat-ES+Kibana%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BFportainer/",
            "title": "第3章-Docker部署Nginx-Tomcat-ES+Kibana及可视化面板portainer",
            "date_published": "2021-02-03T04:20:45.000Z",
            "content_html": "<h1 id=\"docker部署nginx-tomcat-eskibana及可视化面板portainer\"><a class=\"anchor\" href=\"#docker部署nginx-tomcat-eskibana及可视化面板portainer\">#</a> Docker 部署 Nginx-Tomcat-ES+Kibana 及可视化面板 portainer</h1>\n<h1 id=\"nginx\"><a class=\"anchor\" href=\"#nginx\">#</a> Nginx</h1>\n<ol>\n<li>\n<p>查看 dockerHub 上是否存在 Nginx</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker search nginx</pre></td></tr></table></figure></li>\n<li>\n<p>确认存在镜像后，下载 nginx</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull nginx</pre></td></tr></table></figure></li>\n<li>\n<p>下载完成后启动 nginx</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d --name nginx01 -p <span class=\"token number\">3344</span>:80 nginx <span class=\"token comment\">#以后台运行 nginx 容器端口选择 80, 默认也是 80 映射到主机的 3344 端口，容器名为 nginx01</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> localhost:3344</pre></td></tr></table></figure><p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-02_18-41-18.png\" alt=\"映射\" /></p>\n</li>\n<li>\n<p>查找 nginx 的配置文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">whereis</span> nginx</pre></td></tr></table></figure></li>\n<li>\n<p>修改配置文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#进入 nginx 文件夹，在这里你可以使用 ls 查看 nginx 的所有文件信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /etc/nginx</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h1>\n<ol>\n<li>\n<p>下载 Tomcat</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull tomcat:9.0 <span class=\"token comment\">#下载 tomcat9.0</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动 Tomcat</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p <span class=\"token number\">3355</span>:80 --name tomcat01 tomcat</pre></td></tr></table></figure><p>问题：下载的 tomcat 能够执行 linux 命令少了，webapps 文件夹里没有文件原因是阿里云的最小镜像，保证最小可运行环境，初始项目存在于 webapps.dist 目录中</p>\n</li>\n</ol>\n<h1 id=\"eskibana\"><a class=\"anchor\" href=\"#eskibana\">#</a> ES+Kibana</h1>\n<ol>\n<li>\n<p>下载并启动</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d --name elasticsearch -net somenetwork -p <span class=\"token number\">9200</span>:9200 -p <span class=\"token number\">9300</span>:9300 -e <span class=\"token string\">\"discovery.type=single-node\"</span> elasticsearch:7.62</pre></td></tr></table></figure><p>问题: elasticsearch 启动之后消耗大量内存造成卡顿，可以使用命令 <code>docker stats 容器id</code>  查看 cpu 状态</p>\n</li>\n<li>\n<p>设置内存限制启动，内存大小 64m-512m 之间</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d --name elasticsearch -p <span class=\"token number\">9200</span>:9200 -p <span class=\"token number\">9300</span>:9300 -e <span class=\"token string\">\"discovery.type=single-node\"</span> -e <span class=\"token assign-left variable\">ES_JAVA_OPTS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-Xms64m -Xmx512m\"</span> e1asticsearch:7.6.2</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"portainer可视化面板\"><a class=\"anchor\" href=\"#portainer可视化面板\">#</a> Portainer 可视化面板</h1>\n<ol>\n<li>\n<p>下载安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p <span class=\"token number\">8088</span>:9000 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--restart<span class=\"token operator\">=</span>always -v/var/run/docker.sock:/var/run/docker.sock --privileged<span class=\"token operator\">=</span>true portainer/portainer</pre></td></tr></table></figure></li>\n<li>\n<p>访问通过主机 ip 和 8088 端口去访问 portainer,8088 端口需要你设置开放安全组</p>\n<p><code>http://主机公网ip:8088</code></p>\n</li>\n<li>\n<p>第一次登陆 portainer 需要你配置一个用户及登录密码，并牢记</p>\n</li>\n</ol>\n",
            "tags": [
                "Docker基础及进阶",
                "docker",
                "笔记",
                "服务器"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/02/02/Docker/%E7%AC%AC2%E7%AB%A0-Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/",
            "url": "https://honshen.xyz/2021/02/02/Docker/%E7%AC%AC2%E7%AB%A0-Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/",
            "title": "第2章-Docker的常用命令集",
            "date_published": "2021-02-02T04:20:45.000Z",
            "content_html": "<h1 id=\"docker的常用命令集\"><a class=\"anchor\" href=\"#docker的常用命令集\">#</a> Docker 的常用命令集</h1>\n<h1 id=\"镜像基本命令\"><a class=\"anchor\" href=\"#镜像基本命令\">#</a> 镜像基本命令</h1>\n<ul>\n<li>\n<h2 id=\"查看本地主机上的镜像信息\"><a class=\"anchor\" href=\"#查看本地主机上的镜像信息\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9pbWFnZXMv\">查看本地主机上的镜像信息</span></h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker images <span class=\"token comment\">#查看镜像</span></pre></td></tr></table></figure><h3 id=\"镜像信息\"><a class=\"anchor\" href=\"#镜像信息\">#</a> 镜像信息</h3>\n<table>\n<thead>\n<tr>\n<th>REPOSITORY</th>\n<th>TAG</th>\n<th>IMAGE ID</th>\n<th>CREATED</th>\n<th>SIZE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hello-world</td>\n<td>latest</td>\n<td>bf756fb1ae65</td>\n<td>13 months ago</td>\n<td>13.3kB</td>\n</tr>\n<tr>\n<td>仓库源</td>\n<td>镜像的标签</td>\n<td>镜像的 id</td>\n<td>镜像的创建时间</td>\n<td>镜像的大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"参数及作用\"><a class=\"anchor\" href=\"#参数及作用\">#</a> 参数及作用</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--a , -a</td>\n<td>查看所有镜像</td>\n</tr>\n<tr>\n<td>--quite , -q</td>\n<td>只显示 id</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h2 id=\"搜索镜像\"><a class=\"anchor\" href=\"#搜索镜像\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">搜索镜像</span></h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker search 镜像 <span class=\"token comment\">#搜索镜像: docker search mysql</span></pre></td></tr></table></figure><p>亦可在 dockerHub 上搜索: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9zZWFyY2g/cT1teXNxbCZhbXA7dHlwZT1pbWFnZQ==\">mysql</span></p>\n<h3 id=\"参数及作用-2\"><a class=\"anchor\" href=\"#参数及作用-2\">#</a> 参数及作用</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--filter , -f</td>\n<td>过滤信息，例如 --filter=STARS=3000 #过滤掉 stars 小于 3000 的</td>\n</tr>\n<tr>\n<td>--quite , -q</td>\n<td>只显示 id</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h2 id=\"下载镜像\"><a class=\"anchor\" href=\"#下载镜像\">#</a> 下载镜像</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull 镜像 <span class=\"token comment\">#默认下载镜像的最新版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker pull 镜像<span class=\"token punctuation\">[</span>:tag<span class=\"token punctuation\">]</span> <span class=\"token comment\">#下载镜像的某个版本，该版本必须存在如: docker pull mysql:5.7</span></pre></td></tr></table></figure><p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-02_10-52-46.png\" alt=\"下载镜像\" /></p>\n</li>\n<li>\n<h2 id=\"删除镜像\"><a class=\"anchor\" href=\"#删除镜像\">#</a> 删除镜像</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker rmi -f 镜像id或名称 <span class=\"token comment\">#删除镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker rmi -f 镜像id 镜像id 镜像id <span class=\"token comment\">#删除多个镜像</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker rmi -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker images -aq<span class=\"token variable\">)</span></span> <span class=\"token comment\"># $(参数): 传递参数，删除所有镜像</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"容器命令\"><a class=\"anchor\" href=\"#容器命令\">#</a> 容器命令</h1>\n<ul>\n<li>\n<h2 id=\"运行镜像\"><a class=\"anchor\" href=\"#运行镜像\">#</a> 运行镜像</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run 镜像 <span class=\"token comment\">#启动镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker run --help <span class=\"token comment\">#查看 run 命令的参数列表，很多这里不一一列举</span></pre></td></tr></table></figure><p><strong>参数及作用</strong></p>\n<table>\n<thead>\n<tr>\n<th>可选参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--name=&quot;容器名称&quot;</td>\n<td>为容器设置名称用于区分容器</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>以后台方式运行，但是会暂停运行</td>\n</tr>\n<tr>\n<td>-it</td>\n<td>使用交互方式运行: docker run -it centos /bin/bash</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>指定端口，例如 -p 3344:80</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>随机指定端口</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-02_11-21-13.png\" alt=\"运行镜像\" /></p>\n<p><strong>docker 容器后台运行需要一个前台进程，docker 会停止后台应用</strong></p>\n</li>\n<li>\n<h2 id=\"查看运行的镜像\"><a class=\"anchor\" href=\"#查看运行的镜像\">#</a> 查看运行的镜像</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token function\">ps</span> <span class=\"token comment\">#查看当前运行的镜像</span></pre></td></tr></table></figure><p><strong>参数及作用</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>列出当前运行的容器以及历史运行过的容器</td>\n</tr>\n<tr>\n<td>-n = 数字</td>\n<td>显示最近创建的几个容器常用: -n=1</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>只显示容器 id 常用: docker ps -aq 列出所有容器 id</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h2 id=\"退出容器\"><a class=\"anchor\" href=\"#退出容器\">#</a> 退出容器</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exit</span> <span class=\"token comment\">#退出并关闭容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Ctrl + P + Q <span class=\"token comment\">#退出容器，但将容器放到后台继续运行</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"删除容器\"><a class=\"anchor\" href=\"#删除容器\">#</a> 删除容器</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token function\">rm</span> 容器id <span class=\"token comment\">#删除容器，该容器不能再运行中否则无法删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker <span class=\"token function\">rm</span> -f 容器id <span class=\"token comment\">#强制删除容器包括运行中的容器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker <span class=\"token function\">rm</span> -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span> <span class=\"token comment\">#强制删除全部容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker <span class=\"token function\">ps</span> -a -q<span class=\"token operator\">|</span><span class=\"token function\">xargs</span> docker <span class=\"token function\">rm</span> <span class=\"token comment\">#删除所有的容器</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"启动和停止容器\"><a class=\"anchor\" href=\"#启动和停止容器\">#</a> 启动和停止容器</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker start 容器id <span class=\"token comment\">#启动一个停止的容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker restart 容器id <span class=\"token comment\">#重启一个容器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker stop 容器id <span class=\"token comment\">#停止一个正在运行的容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker <span class=\"token function\">kill</span> 容器id <span class=\"token comment\">#强制停止一个正在运行的容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#docker 容器后台运行需要一个前台进程，docker 会停止后台应用</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"进入容器\"><a class=\"anchor\" href=\"#进入容器\">#</a> 进入容器</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it 容器id /bin/bash <span class=\"token comment\">#进入 ring 器后开启一个新的终端，能够在终端里进行操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker attach 容器id <span class=\"token comment\">#进入正在运行容器的终端，不会开启新的进程</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h1>\n<ul>\n<li>\n<h2 id=\"查看日志\"><a class=\"anchor\" href=\"#查看日志\">#</a> 查看日志</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker logs -f -t --tail 数字 容器id <span class=\"token comment\">#查看某个容器的多少条日志信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker logs -tf <span class=\"token comment\">#查看全部日志</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h1>\n<ul>\n<li>\n<h2 id=\"查看docker容器内部进程\"><a class=\"anchor\" href=\"#查看docker容器内部进程\">#</a> 查看 docker 容器内部进程</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token function\">top</span> 容器id <span class=\"token comment\">#查看容器的内部进程</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"拷贝\"><a class=\"anchor\" href=\"#拷贝\">#</a> 拷贝</h1>\n<ul>\n<li>\n<h2 id=\"拷贝文件\"><a class=\"anchor\" href=\"#拷贝文件\">#</a> 拷贝文件</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token function\">cp</span> 容器id:容器内路径 主机路径 <span class=\"token comment\">#将容器内的文件拷贝到主机，例如:docker cp abcd:/home/test.txt/home 这里将容器里 /home/test.txt 拷贝到主机的 /home 路径下</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"元数据\"><a class=\"anchor\" href=\"#元数据\">#</a> 元数据</h1>\n<ul>\n<li>\n<h2 id=\"查看镜像的元数据\"><a class=\"anchor\" href=\"#查看镜像的元数据\">#</a> 查看镜像的元数据</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker inspect 容器id <span class=\"token comment\">#查看容器的元数据</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"帮助命令\"><a class=\"anchor\" href=\"#帮助命令\">#</a> 帮助命令</h1>\n<ul>\n<li>\n<h2 id=\"查看版本号\"><a class=\"anchor\" href=\"#查看版本号\">#</a> 查看版本号</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker version</pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"查看docker系统详细信息\"><a class=\"anchor\" href=\"#查看docker系统详细信息\">#</a> 查看 docker 系统详细信息</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker info</pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"查看与docker命令有关的帮助\"><a class=\"anchor\" href=\"#查看与docker命令有关的帮助\">#</a> 查看与 docker 命令有关的帮助</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker 命令 --help <span class=\"token comment\">#</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"查看docker的全部命令\"><a class=\"anchor\" href=\"#查看docker的全部命令\">#</a> 查看 docker 的全部命令</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker --help</pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"这里放上docker的官网命令帮助文档\"><a class=\"anchor\" href=\"#这里放上docker的官网命令帮助文档\">#</a> 这里放上 docker 的官网命令帮助文档</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9ydW4v\">https://docs.docker.com/engine/reference/run/</span></p>\n</li>\n</ul>\n",
            "tags": [
                "Docker基础及进阶",
                "docker",
                "笔记",
                "服务器"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/02/01/Hexo/%E7%AC%AC4%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/",
            "url": "https://honshen.xyz/2021/02/01/Hexo/%E7%AC%AC4%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/",
            "title": "第4章-服务器环境搭建和博客部署",
            "date_published": "2021-02-01T05:12:45.000Z",
            "content_html": "<h1 id=\"第4章-服务器环境搭建和博客部署\"><a class=\"anchor\" href=\"#第4章-服务器环境搭建和博客部署\">#</a> 第 4 章 - 服务器环境搭建和博客部署</h1>\n<h1 id=\"连接远程服务器\"><a class=\"anchor\" href=\"#连接远程服务器\">#</a> 连接远程服务器</h1>\n<blockquote>\n<p>我们通过 XShell 连接到远程服务器，<strong> 需要以 root 用户登录</strong>，登录成功后控制台输出如下：我们需要切换到 /usr/local/src 目录下去部署 nodejs</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WARNING<span class=\"token operator\">!</span> The remote SSH server rejected X11 forwarding request.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Last login: Fri Jan <span class=\"token number\">29</span> <span class=\"token number\">19</span>:45:56 <span class=\"token number\">2021</span> from </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Welcome to Alibaba Cloud Elastic Compute Service <span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"nodejs部署\"><a class=\"anchor\" href=\"#nodejs部署\">#</a> nodejs 部署</h1>\n<blockquote>\n<p>使用命令 cd /usr/local/src 进入到用户目录下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/src</pre></td></tr></table></figure><p>这时我们就在 src 目录下，在这个目录下我们安装 nodejs (这是一个压缩包), 并解压，如果提示找不到 wget 命令，就先使用命令:  <code>yum install -y wget </code> 去安装 wget</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> xvJf node-v10.15.3-linux-x64.tar.xz</pre></td></tr></table></figure><p>我们对解压后的文件夹更名，方便我们之后建立软连接</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> node-v10.15.3-linux-x64 nodejs</pre></td></tr></table></figure><p>建立软连接</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ln</span> -sf /usr/local/src/nodejs/bin/node /usr/local/bin/node</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ln</span> -sf /usr/local/src/nodejs/bin/npm /usr/local/bin/npm</pre></td></tr></table></figure><p>配置环境变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=/usr/local/nodejs/bin:<span class=\"token environment constant\">$PATH</span>'</span> <span class=\"token operator\">>></span> /etc/profile</pre></td></tr></table></figure><p>使环境变量生效</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure><p>通过查看版本号检测 nodejs 是否安装成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node -v</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> -v</pre></td></tr></table></figure><p><strong>如果 xshell 控制台上输出如下信息表面 nodejs 环境已经搭建好了，如果你使用的 nodejs 版本不一样那么控制台输出也不一样</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen src<span class=\"token punctuation\">]</span><span class=\"token comment\"># node -v</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v15.7.0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen src<span class=\"token punctuation\">]</span><span class=\"token comment\"># npm -v</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">7.4</span>.3</pre></td></tr></table></figure></blockquote>\n<h1 id=\"部署博客\"><a class=\"anchor\" href=\"#部署博客\">#</a> 部署博客</h1>\n<blockquote>\n<p>我们利用 xftp 将之前搭建的个人博客上传到服务器的 /home 目录下，在此之前，我们先将博客文件复制到桌面，然后进入博客文件夹删除里面的 <code>node_modules</code>  文件夹，这个里面存放的都是一些依赖且文件体积较大，直接上传会浪费不少时间，删除完成后我们将博客文件夹上传到服务器</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_17-12-32.png\" alt=\"上传文件夹\" /></p>\n<p>接下来我们使用 XShell 进入到这个博客文件夹，并将之前删除的依赖重新安装，这里我们使用淘宝的镜像下载依赖怎样会快很多～</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /home/hongsheng-xu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> registry https://registry.npm.taobao.org</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> i</pre></td></tr></table></figure><p>在服务器上安装 nohup 和 hexo</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> coreutils</pre></td></tr></table></figure><p>编辑配置，如图在环境变量后加上 usr/bin:, 编辑完后按 esc 键，然后输入:  <code>:wq</code> , 这样就修改完成</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> ~/.bash_profile</pre></td></tr></table></figure><p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-05_21-44-19.png\" alt=\"配置\" /></p>\n<p>使配置生效，并检查 nohup 的版本号验证是否安装成功，同理如果控制台输出了 nohup 的版本号表明安装成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> ~/.bash_profile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nohup</span> --version</pre></td></tr></table></figure><p>接下来我们安装 hexo 并且启动服务</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli -g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nohup</span> hexo s -p <span class=\"token number\">80</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr></table></figure><p>看到控制台输出如下表明成功:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen hongsheng-xu<span class=\"token punctuation\">]</span><span class=\"token comment\"># nohup: ignoring input and appending output to ‘nohup.out’</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">logout</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>There are stopped jobs.</pre></td></tr></table></figure><p>这里你可以通过 http:// 服务器公网 ip / 或者通过域名去查看部署的代码，举个栗子:</p>\n<p>我部署的博客空间: <a href=\"http://honshen.xyz\">http://honshen.xyz</a></p>\n<p>也可以通过公网 ip 访问: <span class=\"exturl\" data-url=\"aHR0cDovLzguMTMxLjYyLjQ4Lw==\">http://8.131.62.48/</span></p>\n</blockquote>\n",
            "tags": [
                "HEXO搭建个人博客",
                "服务器",
                "Hexo",
                "博客"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/02/01/Docker/%E7%AC%AC1%E7%AB%A0-Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://honshen.xyz/2021/02/01/Docker/%E7%AC%AC1%E7%AB%A0-Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "第1章-Docker安装部署及阿里云加速服务的使用",
            "date_published": "2021-02-01T04:20:45.000Z",
            "content_html": "<h1 id=\"docker安装部署及阿里云加速服务的使用\"><a class=\"anchor\" href=\"#docker安装部署及阿里云加速服务的使用\">#</a> Docker 安装部署及阿里云加速服务的使用</h1>\n<h1 id=\"docker简介\"><a class=\"anchor\" href=\"#docker简介\">#</a> Docker 简介</h1>\n<h2 id=\"docker官网-httpswwwdockercom\"><a class=\"anchor\" href=\"#docker官网-httpswwwdockercom\">#</a> Docker 官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8=\">https://www.docker.com/</span></h2>\n<h2 id=\"docker文档-httpsdocsdockercomget-startedoverview\"><a class=\"anchor\" href=\"#docker文档-httpsdocsdockercomget-startedoverview\">#</a> Docker 文档: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZ2V0LXN0YXJ0ZWQvb3ZlcnZpZXcv\">https://docs.docker.com/get-started/overview/</span></h2>\n<h2 id=\"docker与虚拟机容器化技术\"><a class=\"anchor\" href=\"#docker与虚拟机容器化技术\">#</a> Docker 与虚拟机 (容器化技术)</h2>\n<ul>\n<li>虚拟机需要虚拟硬件，完整的操作系统，然后才能安装运行软件</li>\n<li>docker 容器内的应用直接运行在宿主机，应用 + 环境即可部署</li>\n<li>容器之间互相隔离互不影响，有独立的文件系统</li>\n<li><strong>DevOps (开发，运维): 更快的交付和部署 -- 更便捷的升级和扩容 -- 更简单的系统运维 -- 更高效的计算资源利用</strong></li>\n</ul>\n<h2 id=\"docker基本组成\"><a class=\"anchor\" href=\"#docker基本组成\">#</a> Docker 基本组成</h2>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_19-43-37.png\" alt=\"docker基本组成\" /></p>\n<ul>\n<li>镜像 (image)\n<ul>\n<li>类似模板，可以通过镜像创建多个容器服务 -- 最终项目运行在容器中</li>\n</ul>\n</li>\n<li>容器 (container)\n<ul>\n<li>通过镜像创建，可以独立运行一个或一组应用，基本命令：启动，停止，删除</li>\n</ul>\n</li>\n<li>仓库 (repository)\n<ul>\n<li>存放仓库的地方</li>\n<li>分为私有仓库和公有仓库，默认源为国外需要配置</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"docker安装\"><a class=\"anchor\" href=\"#docker安装\">#</a> Docker 安装</h1>\n<h2 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<ul>\n<li>\n<p>Linux 服务器 CentOS7, 你可以使用命令 <code>cat /etc/os-release</code>  来查看当前系统的版本</p>\n</li>\n<li>\n<p>XShell 进行远程连接，使用 <code>uname -r</code>  查看系统内核，控制台输出 <code>3.10.0-514.26.2.el7.x86_64</code> , 需要系统内核是 <code>3.10</code>  及以上的环境</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">uname</span> -r</pre></td></tr></table></figure></li>\n<li>\n<p>这里放上一篇 Docker 在 linux 的安装官方文档: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv\">https://docs.docker.com/engine/install/</span>, 你亦可在 docker 官网找到其他操作系统的安装，这里放上其他操作系统的安装文档: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZ2V0LWRvY2tlci8=\">https://docs.docker.com/get-docker/</span></p>\n</li>\n</ul>\n<h2 id=\"安装docker引擎\"><a class=\"anchor\" href=\"#安装docker引擎\">#</a> 安装 Docker 引擎</h2>\n<ol>\n<li>\n<p>移除本地的 docker</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum remove docker <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>           docker-client <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           docker-client-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           docker-common <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           docker-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           docker-latest-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           docker-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           docker-engine</pre></td></tr></table></figure></li>\n<li>\n<p>在线安装：命令 <code>yum -y intsall 包名</code> ，-y 表示所有提示都选择确定，这里我们不使用官方推荐的镜像，我们选择阿里云镜像，这样的下载速度更快</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> -y yum-utils device-mapper-persistant-data lvm2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr></table></figure></li>\n<li>\n<p>更新：使用命令更新 yum 包索引</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum makecache fast</pre></td></tr></table></figure></li>\n<li>\n<p>安装: docker 在线安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io</pre></td></tr></table></figure></li>\n<li>\n<p>查看：安装完成后，我们可以使用命令去查看 docker 是否安装成功，当控制台输出 docker 版本后表面安装成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker version</pre></td></tr></table></figure></li>\n<li>\n<p>启动：使用命令启动 docker, 如果没有报错表启动成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start docker</pre></td></tr></table></figure></li>\n<li>\n<p>测试：运行 helloword, 执行以下命令 docker 会去官网上 pull 一个 helloworld, 当你在控制台看到 <code>Hello from Docker!</code>  已经成功了</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run hello-world</pre></td></tr></table></figure><p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_16-50-19.png\" alt=\"拉取hello-word\" /></p>\n</li>\n<li>\n<p>镜像：使用命令 <code>docker images</code>  查看下载的 hello-word 镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker images</pre></td></tr></table></figure><p>控制台输出，其中有一个是项目是 hello-word, 它是 docker 从远程仓库 pull 来的:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@honshen ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker images</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hello-world   latest    bf756fb1ae65   <span class=\"token number\">13</span> months ago   <span class=\"token number\">13</span>.3kB</pre></td></tr></table></figure></li>\n<li>\n<p>卸载: (1) 卸载依赖 (2) 删除资源:  <code>/var/lib/docker</code> docker 的默认工作路径</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1、卸载依赖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum remove docker-ce docker-ce-cli containerd.io</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#2、删除资源</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">rm</span> -rf /var/lib/docker</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"阿里云镜像加速\"><a class=\"anchor\" href=\"#阿里云镜像加速\">#</a> 阿里云镜像加速</h1>\n<ol>\n<li>\n<p>阿里云: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8=\">https://www.aliyun.com/</span>  需要先登录，然后进入到控制台，在产品与服务里选择容器镜像服务，如果你是第一次使用需要按照阿里云的引导设置一个登陆密码</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_17-01-08.png\" alt=\"镜像服务\" /></p>\n</li>\n<li>\n<p>在阿里云的镜像中心找到镜像加速器，复制里面的加速器地址即可这是免费的，<strong> 注：每一个账号的加速地址都不一样！！！</strong></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_17-11-44.png\" alt=\"镜像加速地址\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_17-15-07.png\" alt=\"操作文档\" /></p>\n</li>\n<li>\n<p>配置使用:</p>\n<ol>\n<li>创建一个 docker 的配置目录，<strong> 如果你加上 sudo 报错了且是 root 用户可以执行以下命令</strong></li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> -p /etc/docker</pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>修改配置文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"registry-mirrors\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"个人加速地址\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  EOF</pre></td></tr></table></figure></li>\n<li>\n<p>重启服务</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl daemon-reload</pre></td></tr></table></figure></li>\n<li>\n<p>重启 docker</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart docker</pre></td></tr></table></figure></li>\n<li>\n<p>至此阿里云镜像已经配置完毕</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"docker底层原理\"><a class=\"anchor\" href=\"#docker底层原理\">#</a> Docker 底层原理</h1>\n<ul>\n<li>\n<p>docker 运行时流程图</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_18-35-40.png\" alt=\"docker运行时流程图\" /></p>\n</li>\n<li>\n<p>docker 是一个 client-server 结构的系统，docker 的守护进程运行在主机上，通过 Socket 从客户端访问</p>\n</li>\n<li>\n<p>dockerServer 接收 dockerClient 的指令并执行</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_18-43-17.png\" alt=\"docker运行时\" /></p>\n</li>\n<li>\n<p>为什么 docker 比虚拟机快？</p>\n<p>下图可以说明:</p>\n<p>​\t(1) docker 比虚拟机有更少的抽象层</p>\n<p>​\t(2) docker 使用宿主机的内核</p>\n<p>当新建容器时，docker 不需要像虚拟机一样加载内核 CentOS (分钟), 直接利用宿主机的操作系统 (秒), 避免引导</p>\n<p><img data-src=\"https://ucc.alicdn.com/pic/developer-ecology/f70eb5d1e0594c9694080ab0a17a1e99.png\" alt=\"docker比虚拟快\" /><br />\n<img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_19-26-37.png\" alt=\"docker比虚拟机快\" /></p>\n</li>\n</ul>\n",
            "tags": [
                "Docker基础及进阶",
                "docker",
                "笔记"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/01/31/Hexo/%E7%AC%AC3%E7%AB%A0-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8(%E5%9F%BA%E4%BA%8ECentOS7)/",
            "url": "https://honshen.xyz/2021/01/31/Hexo/%E7%AC%AC3%E7%AB%A0-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8(%E5%9F%BA%E4%BA%8ECentOS7)/",
            "title": "第3章-Linux服务器的使用(基于CentOS7)",
            "date_published": "2021-01-31T05:12:45.000Z",
            "content_html": "<h1 id=\"linux服务器的使用基于centos7-配合阿里云\"><a class=\"anchor\" href=\"#linux服务器的使用基于centos7-配合阿里云\">#</a> Linux 服务器的使用 (基于 centOS7)-- 配合阿里云</h1>\n<h1 id=\"xshell和xftp的下载\"><a class=\"anchor\" href=\"#xshell和xftp的下载\">#</a> XShell 和 Xftp 的下载</h1>\n<ul>\n<li>XShell 官网下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly94c2hlbGwuZW4uc29mdG9uaWMuY29tLw==\">https://xshell.en.softonic.com/</span></li>\n<li>Xftp 官网下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS96aC94ZnRwLw==\">https://www.netsarang.com/zh/xftp/</span></li>\n</ul>\n<h1 id=\"xshell登录\"><a class=\"anchor\" href=\"#xshell登录\">#</a> XShell 登录</h1>\n<ol>\n<li>\n<p>新建远程连接，点击右上角新建按钮</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-29-30.png\" alt=\"新建远程连接\" /></p>\n</li>\n<li>\n<p>在弹出的新建窗口中，输入自已服务器的名称 (可以是任意名称), 然后选择协议，一般云服务器的协议是 SSH, 公网 IP 可以去阿里云找到服务器的实例查看这里以阿里云轻量服务器为例，填入服务器 ip 后可以点击连接，如果你没有服务器，可以在阿里云或者腾讯云，百度云选购一台，一般来说学生服务器大概在 100~200yuan 一年:</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-51-25.png\" alt=\"寻找公网ip\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-34-56.png\" alt=\"新建会话\" /></p>\n</li>\n<li>\n<p>连接服务器，先修改服务器密码</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-58-56.png\" alt=\"修改密码\" /></p>\n</li>\n<li>\n<p>回到 XShell 链接服务器，选择接受来自服务器的 ssh 秘钥</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-56-25.png\" alt=\"登录名为root\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-57-57.png\" alt=\"输入密码\" /></p>\n<ul>\n<li>XShell 控制台输出如下表明连接成功</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Welcome to Alibaba Cloud Elastic Compute Service <span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@iz2zeg6qs3stnlr0awniwwz ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"xftp使用\"><a class=\"anchor\" href=\"#xftp使用\">#</a> xftp 使用</h1>\n<ul>\n<li>点击 xshell 上方的图标进入 xftp, 或者直接进入 xftp, 打开后如下</li>\n</ul>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_18-09-40.png\" alt=\"打开zftp\" /><br />\n<img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_18-14-43.png\" alt=\"打开xftp\" /></p>\n<h1 id=\"服务器文件信息\"><a class=\"anchor\" href=\"#服务器文件信息\">#</a> 服务器文件信息</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-29_12-48-03.png\" alt=\"服务器文件\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-29_13-00-34.png\" alt=\"绪\" /></p>\n<h1 id=\"xshell命令\"><a class=\"anchor\" href=\"#xshell命令\">#</a> XShell 命令</h1>\n<p><strong>linux 中没有错误就代表操作成功</strong></p>\n<ul>\n<li>\n<h2 id=\"清屏\"><a class=\"anchor\" href=\"#清屏\">#</a> 清屏</h2>\n<pre><code class=\"language-shelll\">clear\n</code></pre>\n</li>\n<li>\n<h2 id=\"关机\"><a class=\"anchor\" href=\"#关机\">#</a> 关机</h2>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sync</span> <span class=\"token comment\"># 将数据由内存同步到硬盘中。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">shutdown</span> <span class=\"token comment\">#关机指令，你可以 man shutdown 来看一下帮助文档。例如你可以运行如下命令关机:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">shutdown</span> -h <span class=\"token number\">10</span> <span class=\"token comment\">#这个命令告诉大家，计算机将在 10 分钟后关机</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">shutdown</span> -h now <span class=\"token comment\">#立马关机</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">shutdown</span> -h <span class=\"token number\">20</span>:25 <span class=\"token comment\">#系统会在今天 20:25 关机</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">shutdown</span> -h +10 <span class=\"token comment\"># 十分钟后关机</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">shutdown</span> -r now <span class=\"token comment\">#系统立马重启</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">shutdown</span> -r +10 <span class=\"token comment\"># 系统十分钟后重启</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">reboot</span> <span class=\"token comment\">#就是重启，等同于 shutdown -r now</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">halt</span> <span class=\"token comment\">#关闭系统，等同于 shutdown -h now 和 poweroff</span></pre></td></tr></table></figure><ul>\n<li>\n<h2 id=\"文件列表查看\"><a class=\"anchor\" href=\"#文件列表查看\">#</a> 文件列表查看</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token comment\">#查看当前目录下的文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -a 参数表示查看全部的文件，包含隐藏文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># -l 参数列出全部的文件包含文件属性和权限，没有隐藏文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#Linux 命令可以组合使用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ls</span> / <span class=\"token comment\">#查看根目录下的文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">ls</span> -ll <span class=\"token comment\">#列表查看当前目录下的文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">ls</span> -al <span class=\"token comment\">#列表查看全部文件 (含隐藏文件)</span></pre></td></tr></table></figure><p>文件属性，通过 ls -al 列出文件的属性</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-29_15-48-46.png\" alt=\"文件权限\" /></p>\n<table>\n<thead>\n<tr>\n<th>文件类型</th>\n<th>属主权限</th>\n<th>属组权限</th>\n<th>其他用户权限</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d: 目录文件</td>\n<td>r (读) w (写) x (执行)</td>\n<td>r (读) w (写) x (执行)</td>\n<td>r (读) w (写) x (执行)</td>\n</tr>\n<tr>\n<td>l: 链接文件</td>\n<td>rwx (可读写执行)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>-: 文件</td>\n<td>---(不可读写执行)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>b: 随机存储设备</td>\n<td>r-x (可读执行)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>c: 一次性读取装置</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h2 id=\"修改文件属性\"><a class=\"anchor\" href=\"#修改文件属性\">#</a> 修改文件属性</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chgrp</span> -R 属组名 文件名/文件夹名 <span class=\"token comment\"># chgrp -R root www 将 www 属组改为 root</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chown</span> -R 属主名 文件名/文件夹名 <span class=\"token comment\"># chown -R root www 将 www 属主改为 root</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> -R xyz 文件/文件名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r:4 w:2 x:1 -:0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>属主: <span class=\"token assign-left variable\">rwx</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>+2+1<span class=\"token operator\">=</span><span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>属组: <span class=\"token assign-left variable\">rwx</span><span class=\"token operator\">=</span><span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>其他用户 ---<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">777</span> 文件名 <span class=\"token comment\">#将一个文件属性修改为可读可写可执行，对所有用户有效赋予最高权限</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"文件内容查看\"><a class=\"anchor\" href=\"#文件内容查看\">#</a> 文件内容查看</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> 文件名 <span class=\"token comment\">#从第一行开始显示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tac</span> 文件名 <span class=\"token comment\">#从最后一行倒着显示</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nl</span> 文件名 <span class=\"token comment\">#显示时输出行号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">more</span> 文件名 <span class=\"token comment\">#一页一页的显示，空格键翻页，enter 向下翻一行，q 键退出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">less</span> 文件名 <span class=\"token comment\">#比 more 更好，能往前翻页，键盘的上下键代表翻页，enter 翻一行，到文件结束按下 q 键退出，输入字符 / 字符串查找 / 后的字符串在文件中的所有位置 (向下查询), 使用？字符串向下查找，例: /set (查找此页及后的所有 set) ?set (查找此页及前的 set 字符) n 表示查找下一个，N 表示查找上一个</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">head</span> -n <span class=\"token number\">20</span> 文件名 <span class=\"token comment\">#只看头 20 行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">tail</span> -n <span class=\"token number\">20</span> 文件名 <span class=\"token comment\">#只看尾 20 行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">man</span> <span class=\"token punctuation\">[</span>命令<span class=\"token punctuation\">]</span> <span class=\"token comment\">#man cp 查看 cp 的使用文档</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#cat /etc/passwd 账号密码信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#cat /etc/shadow 密码信息都是经过加密的</span></pre></td></tr></table></figure><p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-29_19-06-20.png\" alt=\"密码\" /></p>\n</li>\n<li>\n<h2 id=\"切换目录\"><a class=\"anchor\" href=\"#切换目录\">#</a> 切换目录</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 文件夹名 <span class=\"token comment\">#进入文件夹:cd usr</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 绝对路径 <span class=\"token comment\">#切换到该路径:cd /usr/local/src, 其中:cd / 切换到根目录，cd ~ 切换到 /root</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 相对路径 <span class=\"token comment\">#切到该路径下的目录: cd ./usr/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span> <span class=\"token comment\">#返回上一级</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token comment\">#返回上一级目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">pwd</span> <span class=\"token comment\"># 查看当前目录</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> 文件名 <span class=\"token comment\">#删除文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-f 忽略不存在的文件,不会出现警告强制删除</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-r 递归删除目录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">rm</span> -rf / <span class=\"token comment\">#删库跑路！</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rm</span> -rf 文件夹 <span class=\"token comment\">#删除文件夹下的所有文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">rmdir</span> 文件夹 <span class=\"token comment\">#删除为空的文件夹</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">rmdir</span> -p 文件夹 <span class=\"token comment\">#删除文件夹包含里面的内容</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"创建文件\"><a class=\"anchor\" href=\"#创建文件\">#</a> 创建文件</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> 文件夹名 <span class=\"token comment\">#创建文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> 文件夹1/文件夹2/文件夹3 <span class=\"token comment\">#在当前目录下创建文件夹 1, 文件夹 1 下创建文件夹 2, 文件夹 2 下创建文件夹 3</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"复制文件\"><a class=\"anchor\" href=\"#复制文件\">#</a> 复制文件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> 文件路径1/文件名 文件路径2 <span class=\"token comment\">#将文件从文件路径 1 拷贝到文件路径 2</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"移动文件\"><a class=\"anchor\" href=\"#移动文件\">#</a> 移动文件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> 文件夹或文件名 文件路径 <span class=\"token comment\">#将文件夹或文件移动到另一个文件路径下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> 文件夹1或文件名1 文件夹2或文件名2 <span class=\"token comment\">#将文件夹或文件名更名 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-f 强制移动</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-u 只替换更新的文件夹</pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"网络\"><a class=\"anchor\" href=\"#网络\">#</a> 网络</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#centOS7 中网络配置文件在 cd/etc/sysconfig/network-scripts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ifconfig</span> <span class=\"token comment\">#查看网络配置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ping</span> <span class=\"token comment\">#ping 一个网址</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"主机\"><a class=\"anchor\" href=\"#主机\">#</a> 主机</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">hostname</span> <span class=\"token comment\">#查看主句名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">hostname</span> 名称 <span class=\"token comment\">#修改名称，重启后生效</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"修改环境变量\"><a class=\"anchor\" href=\"#修改环境变量\">#</a> 修改环境变量</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /etc/profile <span class=\"token comment\">#修改全局环境变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:w <span class=\"token comment\">#保存修改的环境变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:q <span class=\"token comment\">#退出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>:wq <span class=\"token comment\"># 保存环境变量并退出</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"硬链接和软链接\"><a class=\"anchor\" href=\"#硬链接和软链接\">#</a> 硬链接和软链接</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ln</span> 文件路径1 文件路径2 <span class=\"token comment\">#创建软链接 (符号链接)-- 删除源文件链接失效</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ln</span> -s 文件路径1 文件路径2 <span class=\"token comment\">#创建硬链接 -- 删除源文件链接依然有效</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">touch</span> 文件名 <span class=\"token comment\">#创建文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"字符串\"</span> <span class=\"token operator\">>></span> 文件名 <span class=\"token comment\">#向文件写入字符串</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"vim编辑器简略\"><a class=\"anchor\" href=\"#vim编辑器简略\">#</a> vim 编辑器 (简略)</h2>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWFnZXMwLmNuYmxvZ3MuY29tL2Jsb2cyMDE1LzUxNTY4NC8yMDE1MDMvMjcxNzE1NTUwMDU2NzU2LmpwZw==\">https://images0.cnblogs.com/blog2015/515684/201503/271715550056756.jpg</span>&quot; alt=&quot;vim&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> 文件名/路径下的文件 <span class=\"token comment\">#如果文件不存在新建文件并编辑，如果存在则直接编辑</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#按下 i 进入编辑模式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#按下：进入底线命令模式，如果是在编辑模式下要先按 esc</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#编辑命令</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>数字<span class=\"token operator\">&lt;</span>space<span class=\"token operator\">></span> <span class=\"token comment\">#输入数字后按下空格光标移动 n 个位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>数字<span class=\"token operator\">&lt;</span>enter<span class=\"token operator\">></span> <span class=\"token comment\">#输入数字后按下回车光标移动 n 行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">0</span>或者home键 <span class=\"token comment\">#回到文件开头</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$或者end键 <span class=\"token comment\">#回到文件末尾</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>u <span class=\"token comment\">#复原前一个动作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#底线命令</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:w <span class=\"token comment\">#保存修改的文件变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>:q <span class=\"token comment\">#退出</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:wq <span class=\"token comment\">#保存文件并退出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>:wq<span class=\"token operator\">!</span> <span class=\"token comment\">#强制保存并退出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>:set nu <span class=\"token comment\">#设置行号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>:set nonu <span class=\"token comment\">#取消设置行号</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#ctrl+z 退出 vim</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"账号管理\"><a class=\"anchor\" href=\"#账号管理\">#</a> 账号管理</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> -m 用户名 <span class=\"token comment\">#自动创建该用户的主目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-c <span class=\"token string\">\"描述\"</span> <span class=\"token comment\">#指定一段描述</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-d <span class=\"token comment\">#指定用户主目录，如果主目录不存在需要使用 - m</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-g <span class=\"token comment\">#指定用户组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-G <span class=\"token comment\">#指定用户的附加组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-m <span class=\"token comment\">#使用者目录不在则自动创建</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-s Shell文件 <span class=\"token comment\">#指定用户登录的 shell</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-u <span class=\"token comment\">#指定用户的用户号如果有 - o 选项可以重复使用其他用户的标识号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">userdel</span> -r 用户名 <span class=\"token comment\">#删除用户及其目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-r <span class=\"token comment\">#清空目录</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">usermod</span> 对应修改内容 用户名</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">usermod</span> -d /home/xu honshen <span class=\"token comment\">#将 honshen 用户的目录 honshen 修改为 xu</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">su</span> 用户名 <span class=\"token comment\">#切换用户，su - 用户名 切换到用户且到用户目录下</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>password 用户名 <span class=\"token comment\">#通过 root 创建账户后修改账户密码，Linux 输入密码是不会显示的</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>password <span class=\"token comment\">#修改自己账户的密码</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>password -l 用户名 <span class=\"token comment\">#锁定一个用户不能登录</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>password -u 用户名 <span class=\"token comment\">#解锁一个用户</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>password -d 用户名 <span class=\"token comment\">#清除密码，清除后不能登录</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"用户组\"><a class=\"anchor\" href=\"#用户组\">#</a> 用户组</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#用户组的增删改查是对 /etc/group 文件的更新</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">groupadd</span> 用户组名 <span class=\"token comment\">#添加一个用户组，id 从 1000 开始</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">groupadd</span> -d  <span class=\"token number\">1003</span> 用户组名 <span class=\"token comment\">#添加一个用户组，id 为 1003</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">groupdel</span> 用户组名 <span class=\"token comment\">#删除一个用户组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">groupmod</span> -g id名 -n 新用户组名 用户组 <span class=\"token comment\">#给一个用户组更名更 id</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ newgrp root <span class=\"token comment\">#登录当前用户切换到 root 组</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"磁盘\"><a class=\"anchor\" href=\"#磁盘\">#</a> 磁盘</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">df</span> <span class=\"token comment\">#列出文件整体使用量 (以字节为单位)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">df</span> -h <span class=\"token comment\">#列出文件整体使用量 (以 M 为单位)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">du</span> <span class=\"token comment\">#检查磁盘空间使用量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">du</span> -a <span class=\"token comment\">#检查磁盘及子文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">du</span> -sm  /* <span class=\"token comment\">#检查根目录下的文件占用的容量，一般 /usr 占用资源最大</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"外部设备\"><a class=\"anchor\" href=\"#外部设备\">#</a> 外部设备</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> /dev/xu /mnt/xu <span class=\"token comment\">#将名为 xu 的 u 盘挂载到 mnt 目录下，来实现访问 u 盘</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">umount</span> -f 挂载位置<span class=\"token comment\">#强制卸载 u 盘</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token comment\">#查看当前系统进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> -help <span class=\"token comment\">#查看命令的帮助</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-a <span class=\"token comment\">#显示所有进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-u <span class=\"token comment\">#i</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-x <span class=\"token comment\">#显示后台进程的参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token comment\">#查找文件中符合条件的字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># | 是管道符 A|B 将 A 的结果拿给 B</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">ps</span> -aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> nodejs <span class=\"token comment\">#查看所有 nodejs 进程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql <span class=\"token comment\">#查看 mysql 的父进程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pstree -pu <span class=\"token comment\">#以目录结构查看进程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token environment constant\">$USER</span> <span class=\"token comment\">#查看用户进程</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">ps</span> -aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> 进程<span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$2</span>&#125;'</span> <span class=\"token comment\">#查看进程号，如:ps -aux|grep nodejs|awk '&#123;print $2&#125;'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">kill</span> -9 <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> 进程<span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$2</span>&#125;'</span><span class=\"token variable\">`</span></span> <span class=\"token comment\">#杀掉指定进程如: kill -9 `ps -aux|grep hexo|awk '&#123;print $2&#125;'`</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>-p -u <span class=\"token comment\">#-p 显示父 id -u 显示用户组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">kill</span> -9 进程id <span class=\"token comment\">#强制结束进程</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"防火墙\"><a class=\"anchor\" href=\"#防火墙\">#</a> 防火墙</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查看 firewall 服务状态 systemctl status firewalld</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#开启、重启、关闭、firewalld.service 服务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">service</span> firewalld start<span class=\"token comment\">#开启</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">service</span> firewalld restart<span class=\"token comment\">#重启</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">service</span> firewalld stop<span class=\"token comment\">#关闭</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看防火墙规则</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>firewall-cmd --list-all<span class=\"token comment\">#查看全部信息 firewall-cmd --list-ports# 只看端口信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#开启端口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>开端口命令:firewall-cmd --zone<span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>重启防火墙:systemctl restart firewalld.service</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>命令含义:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>--zone <span class=\"token comment\">#作用域</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>--add-port<span class=\"token operator\">=</span> <span class=\"token number\">80</span>/tcp <span class=\"token comment\">#添加端口，格式为：端口 / 通讯协议</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--permanent<span class=\"token comment\">#永久生效，没有此参数重启后失效</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"nohup挂载后台进程\"><a class=\"anchor\" href=\"#nohup挂载后台进程\">#</a> nohup 挂载后台进程</h1>\n<ul>\n<li>\n<p>使用命令 <code>onhup command [args...] &amp;</code>  挂载后台进程，接着使用 exit 断开与服务器的连接，终端会忽略收到 HUP（hangup）信号从而不关闭其所有子进程～如下:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>onhup hexo s -p <span class=\"token number\">80</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr></table></figure></li>\n<li>\n<p>我们可以使用 <code>jobs -l</code>  或 <code>ps -ef</code>  查看后台进程，例如我们查看 nojs 进程并输出其进程 Id</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> nodejs<span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print <span class=\"token variable\">$2</span>&#125;'</span></pre></td></tr></table></figure></li>\n<li>\n<p>拿到进程号以后，我们使用 <code>fg jubNumber</code>  将该进程调至前台，并可以直接终结该进程</p>\n<p>我们也可以使用 <code>Ctrl+z</code>  来将一个前台命令放到后台并暂停执行</p>\n<p>接着我们使用 <code>bg jobNumber</code>  来将一个后台暂停的命令继续</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu<span class=\"token punctuation\">]</span><span class=\"token comment\"># nohup hexo s -p 80 &amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">3032</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu<span class=\"token punctuation\">]</span><span class=\"token comment\"># nohup: ignoring input and appending output to ‘nohup.out’</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu<span class=\"token punctuation\">]</span><span class=\"token comment\"># jobs</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Running                 <span class=\"token function\">nohup</span> hexo s -p <span class=\"token number\">80</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu<span class=\"token punctuation\">]</span><span class=\"token comment\"># fg 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">nohup</span> hexo s -p <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>^Z</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 <span class=\"token function\">nohup</span> hexo s -p <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu<span class=\"token punctuation\">]</span><span class=\"token comment\"># bg 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+ <span class=\"token function\">nohup</span> hexo s -p <span class=\"token number\">80</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果后台进程挂载失败，使用 <code>lsof -i:端口号</code> 去查看端口的进程，使用 <code>nestat</code>  去查看其占用的端口</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>losf -i:80</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> -ap<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token number\">80</span></pre></td></tr></table></figure></li>\n<li>\n<p>接着使用 <code>kill -9 进程号</code> 去终结该进程的运行</p>\n</li>\n</ul>\n",
            "tags": [
                "HEXO搭建个人博客",
                "服务器",
                "linux"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/01/31/Hexo/%E7%AC%AC2%E7%AB%A0-%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96Hexo%E4%B8%BB%E9%A2%98shkoa%E7%9A%84%E9%85%8D%E7%BD%AE/",
            "url": "https://honshen.xyz/2021/01/31/Hexo/%E7%AC%AC2%E7%AB%A0-%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96Hexo%E4%B8%BB%E9%A2%98shkoa%E7%9A%84%E9%85%8D%E7%BD%AE/",
            "title": "第2章-博客的美化Hexo主题shkoa的配置",
            "date_published": "2021-01-31T04:12:45.000Z",
            "content_html": "<h1 id=\"第2章-博客的美化hexo主题shoka的配置\"><a class=\"anchor\" href=\"#第2章-博客的美化hexo主题shoka的配置\">#</a> 第 2 章 - 博客的美化 Hexo 主题 shoka 的配置</h1>\n<p><strong>引言：我们已经初始化个人博客并将代码发布至 github, 如果不懂可以查阅: <a href=\"/2020/12/13/Hexo/%E7%AC%AC1%E7%AB%A0-%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8BHEXO%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96/\">第 1 章 - 零基础使用 HEXO 搭建个人博客之 HEXO 及其初始化</a>，接下来我们需要对个人博客进行美化～</strong></p>\n<h1 id=\"下载依赖\"><a class=\"anchor\" href=\"#下载依赖\">#</a> 下载依赖</h1>\n<blockquote>\n<p><strong>首先我们进入自己博客所在的文件夹里，在此处打开 Git bash, 然后使用 npm 下载依赖</strong></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_11-35-31.png\" alt=\"打开gitbash\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i hexo-renderer-multi-markdown-it --save</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-autoprefixer --save</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">npm</span> i  hexo-algolia --save</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-algoliasearch --save</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-symbols-count-time --save</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-feed --save</pre></td></tr></table></figure><p>接着，我们在 bash 里去下载 shoka 这一款主题，由于代码存放于 github 所以下载主题的时间可能会很长，请耐心等待喔...</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><p>下载成功后，我们可以看到多了一个 shoka 的文件夹</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_12-27-22.png\" alt=\"文件\" /></p>\n</blockquote>\n<h1 id=\"修改配置文件\"><a class=\"anchor\" href=\"#修改配置文件\">#</a> 修改配置文件</h1>\n<blockquote>\n<p>这里推荐几篇 shoka 作者的博客</p>\n<ul>\n<li>基本配置: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/</span></li>\n<li>页面配置: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/</span></li>\n<li>依赖插件: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kZXBlbmRlbnRzLw==\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/dependents/</span></li>\n</ul>\n<p>我们打开 shoka 文件夹，找到里面_config.yml 文件，这个文件是主题配置文件，使用 vscode 打开编辑配置如图，vscode 下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">https://code.visualstudio.com/</span></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_13-46-23.png\" alt=\"主题配置文件\" /></p>\n</blockquote>\n<blockquote>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_14-27-20.png\" alt=\"配置2\" /></p>\n</blockquote>\n<blockquote>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_14-48-59.png\" alt=\"配置3\" /></p>\n</blockquote>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">点击此处了解如何获取 AppID 和 Appkey</span><br />\n<img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-06-43.png\" alt=\"配置4\" /></p>\n</blockquote>\n<blockquote>\n<p>接下来我们修改全局配置文件_config.yml<strong> 注意这个文件名和主题的文件名是一样的别修改错文件了</strong><br />\n<img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-27-23.png\" alt=\"全局配置1\" /></p>\n</blockquote>\n<blockquote>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-39-09.png\" alt=\"全局配置2\" /></p>\n</blockquote>\n<blockquote>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-41-43.png\" alt=\"全局配置3\" /></p>\n</blockquote>\n<blockquote>\n<p>这些代码直接复制粘贴到全局配置文件即可这里会使用到搜索功能因此需要 appId 和 apikey, 这里有一篇博客能够帮助大家获取到 appId 和 apikey: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDc5NDY4L2FydGljbGUvZGV0YWlscy8xMDczMzU2NjM=\">为 Hexo 增加 algolia 搜索功能</span></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'*.min.css'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里填上你的 appId</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token key atrule\">apiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里填上你的 apiKey</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token key atrule\">adminApiKey</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#这里填上你的 adminApiKey</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token key atrule\">chunkSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token key atrule\">indexName</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#填入自己的 index name</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#推荐配置</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token key atrule\">strip</span><span class=\"token punctuation\">:</span> truncate<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">gallery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">photos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token key atrule\">atom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token key atrule\">jsonFeed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"feed.json\"</span></pre></td></tr></table></figure><p><strong>另外需要注意的是你的每一篇博客都需要开头加入下述代码，这样表面这是一篇博客:</strong></p>\n<pre><code class=\"language-Markdown\">---\ntitle: 文章的标题\ndate: 文章发布是年/月/日 时/分/秒\ncategories:\n- [博客的分类]\ntags:\n---\n# 这里开始使用Markdown书写博客正文\n</code></pre>\n<p>举个栗子:</p>\n<pre><code class=\"language-Markdown\">---\ntitle: Markdown使用指南\ndate: 2020/12/24 12:10:45\ncategories:\n- [Markdown使用指南]\ntags:\n---\n# MarkdownNote\n\ncommon grammar--MarkdownNote\n\n推荐markdown软件[Typora](https://www.typora.io/)\n后文略...\n</code></pre>\n<p><strong>tips: 这里只列出了大致需要修改的地方，其他地方你可以阅读主题作者的博客获得更多配置信息</strong></p>\n</blockquote>\n<h1 id=\"修改图片\"><a class=\"anchor\" href=\"#修改图片\">#</a> 修改图片</h1>\n<blockquote>\n<p>进入到 shoka 文件夹里的 source 文件夹，再进入 images 文件夹在这里你可以更改为自己喜欢的图片，<strong> 注意图片要和原来的文件名字一模一样否则会加载出错</strong></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-19-09.png\" alt=\"修改图片\" /></p>\n</blockquote>\n",
            "tags": [
                "HEXO搭建个人博客",
                "Hexo",
                "博客",
                "主题"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/01/30/CCode/CProgrammaCode%E7%AE%97%E6%B3%95%E9%9B%86%E5%90%88/",
            "url": "https://honshen.xyz/2021/01/30/CCode/CProgrammaCode%E7%AE%97%E6%B3%95%E9%9B%86%E5%90%88/",
            "title": "CProgrammaCode算法集合",
            "date_published": "2021-01-30T04:20:45.000Z",
            "content_html": "<h1 id=\"cprogrammacode算法集合\"><a class=\"anchor\" href=\"#cprogrammacode算法集合\">#</a> CProgrammaCode 算法集合</h1>\n<p><strong>C/C++</strong></p>\n<h2 id=\"最短路径算法详见short_path_link_gpcpp\"><a class=\"anchor\" href=\"#最短路径算法详见short_path_link_gpcpp\">#</a> 最短路径算法 (详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hvbmdzaGVuZy14dS9DUHJvZ3JhbW1hQ29kZS9ibG9iL21haW4vc2hvcnRfcGF0aF9saW5rX0dQLmNwcA==\"> short_path_link_GP.cpp</span>)</h2>\n<blockquote>\n<p>图邻接表 (GP)</p>\n</blockquote>\n<blockquote>\n<p>纵向优先搜索遍历 (DFS)</p>\n</blockquote>\n<h2 id=\"分块查找算法详见blocking_searchcpp\"><a class=\"anchor\" href=\"#分块查找算法详见blocking_searchcpp\">#</a> 分块查找算法 (详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hvbmdzaGVuZy14dS9DUHJvZ3JhbW1hQ29kZS9ibG9iL21haW4vYmxvY2tpbmdfc2VhcmNoLmNwcA==\"> blocking_search.cpp</span>)</h2>\n<blockquote>\n<p>按位段分块</p>\n</blockquote>\n<blockquote>\n<p>映射查找</p>\n</blockquote>\n<h2 id=\"排序算法详见array_sort\"><a class=\"anchor\" href=\"#排序算法详见array_sort\">#</a> 排序算法 (详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hvbmdzaGVuZy14dS9DUHJvZ3JhbW1hQ29kZS9ibG9iL21haW4vYXJyYXlfc29ydC5jcHA=\"> array_sort</span>)</h2>\n<blockquote>\n<p>直接插入排序</p>\n</blockquote>\n<blockquote>\n<p>选择排序</p>\n</blockquote>\n<blockquote>\n<p>冒泡排序</p>\n</blockquote>\n<blockquote>\n<p>快速排序</p>\n</blockquote>\n",
            "tags": [
                "C&C++算法设计",
                "c",
                "c++",
                "算法"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/01/28/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%9D%A2%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(Java%E6%A0%B8%E5%BF%83)/",
            "url": "https://honshen.xyz/2021/01/28/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%9D%A2%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(Java%E6%A0%B8%E5%BF%83)/",
            "title": "第4章-面对象编程(Java核心)",
            "date_published": "2021-01-28T03:28:45.000Z",
            "content_html": "<h1 id=\"java笔记-第4章面对象编程java核心\"><a class=\"anchor\" href=\"#java笔记-第4章面对象编程java核心\">#</a> Java 笔记 -- 第 4 章面对象编程 (Java 核心)</h1>\n<h1 id=\"面向过程面向对象oop\"><a class=\"anchor\" href=\"#面向过程面向对象oop\">#</a> 面向过程 &amp; 面向对象 (OOP)</h1>\n<ul>\n<li>面向过程思想\n<ul>\n<li>步骤简单，第一步做什么，第二步做什么......</li>\n<li>面对过程适合处理一些较为简单的问题</li>\n</ul>\n</li>\n<li>面向对象思想\n<ul>\n<li>物理类聚，分类的思维模式，首先解决问题需要哪些分类，然后对这些分类进行单独思考，最后对分类下的细节进行面向过程的思索</li>\n<li>面向对象审核处理复杂问题，审核处理多人协作</li>\n</ul>\n</li>\n<li>面向对象编程的本质：以类的方式组织代码，以对象的组织 (封装) 数据</li>\n<li>三大特性：封装、继承、多态</li>\n<li>类和对象的关系\n<ul>\n<li>类是一种抽象的数据类型，它是对某一类事物整体描述 / 定义，但不能代表某一个具体的事物</li>\n<li>对象是抽象概念的具体实例</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"方法详解\"><a class=\"anchor\" href=\"#方法详解\">#</a> 方法详解</h1>\n<blockquote>\n<ul>\n<li>\n<p>静态方法和非静态方法</p>\n<ul>\n<li>静态方法的修饰符 static, 非静态方法不加 static</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 静态方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//demo1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 可以直接调用 add ()</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 其他类调用 Demo1.add ();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//demo2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Demo1</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 非静态方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//demo1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 方法里除 static 修饰的方法都可以直接调用 add ()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//demo2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 首先实例化对象</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 对象类型 对象名 = 对象值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">Demo1</span> demo1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    demo1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    a,b 方法中可以互相调用对方</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    public void a ()&#123;&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    public void b ()&#123;&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    a 不能直接调用 b, 但是 b 可以调用 a</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    原因: static 是和类一起加载，不加 static 则是实例化后方法才存在</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    public static void a ()&#123;&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public void b ()&#123;&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 可以互相调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 也可以 Demo.b ()</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 也可以 Demo.a ()</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>this 关键字</p>\n<ul>\n<li>this () 调用自己的构造器</li>\n<li>总是指向对象本身</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"创建与初始化对象\"><a class=\"anchor\" href=\"#创建与初始化对象\">#</a> 创建与初始化对象</h1>\n<blockquote>\n<ul>\n<li>\n<p>使用 new 关键字创建对象，会分配内存空间，对对象进行默认的初始化</p>\n</li>\n<li>\n<p>类的构造器也称为构造方法是在进行创建对象的时候必须调用的</p>\n<ul>\n<li>\n<p>必须和类的名字相同</p>\n</li>\n<li>\n<p>必须没有返回值且不能写 void</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 属性：字段</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> study<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//this 代表当前类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//================</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">xyz<span class=\"token punctuation\">.</span>honshen</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 类的实例化: stu1 和 stu2 为两个不同实例</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Student</span> stu1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对对象默认初始化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Student</span> stu2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        stu1<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//null</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        stu1<span class=\"token punctuation\">.</span><span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        stu1<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//abc</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        stu2<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//null</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>定义一个<span class=\"token class-name\">Student</span>类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tpublic Student()&#123;&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//====================</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//Student 类中默认包含一个构造方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//=====================</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 无参构造</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 实例化会调用构造方法，一般用来初始化值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 使用 new 关键字本质调用构造器</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Alt+insert 快捷生成构造器</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    一旦定义有参构造，无参构造必须显示定义</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    public Student ()&#123;&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    public Student (String name)&#123;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    // 执行代码</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>内存分析</p>\n<ul>\n<li>\n<p>new 出的对象实例存在堆中，变量名存在栈里是引用类型</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-27_16-34-45.png\" alt=\"内存分析\" /></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"三大特性\"><a class=\"anchor\" href=\"#三大特性\">#</a> 三大特性</h1>\n<blockquote>\n<h2 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h2>\n<ul>\n<li>\n<p>通常应禁止直接访问一个对象中主句的实际表示，而应通过操作接口来访问，这称为信息隐藏，隐藏代码的实现细节</p>\n</li>\n<li>\n<p>属性私有 get/set</p>\n</li>\n<li>\n<p>高内聚，低耦合：类的内部数据操作自己完成不允许外部干涉，仅暴露少量方法给外部</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 不能通过实例操作 name</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 可以通过实例.age 操作 age</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 public int age;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 提供方法去操作数据，而不是直接用。去访问</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//idea 中使用快捷键 Alt+insert 可以直接添加 get 和 set 方法继承</span></pre></td></tr></table></figure><h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<ul>\n<li>\n<p>类和类之间的一种关系，对一批类的抽象</p>\n</li>\n<li>\n<p>父类和子类，子类是父类的扩展，也叫派生类，用 extends 来表示</p>\n</li>\n<li>\n<p>子类可以继承父类的 public 方法和 public 属性，final 不能继承</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//java 中所有的类都默认直接或间接继承于 object</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//java 只有单继承没有多继承</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 父类，继承于 object 类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nice!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cant use\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 子类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//extends 先执行父类构造器，在执行子类构造器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tpublic Student ()&#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t// 调用父类的构造器必须要在第一行</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tsuper ();//super (参数) 调用有参构造，不写默认调用</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t// 子类的其他语句</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//Application</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Student</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 只能使用 public 的方法，private 方法不能使用</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        stu<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>super 关键字\n<ul>\n<li>super 调用父类构造方法必须在构造方法第一个</li>\n<li>super 必须只能出现在子类方法或构造方法中</li>\n<li>super 和 this 不能同时调用构造方法</li>\n<li>this 本身调用者，super 父类对象的引用</li>\n<li>this 没有继承也能使用，super 在继承下使用</li>\n<li>this () 本类方法的构造，super () 父类关键字的构造</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 父类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nice!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 子类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 关键字 super, 调用父类的属性但不能调用私有属性和方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 子类的 say ();</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 父类的 say ();</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h2>\n<ul>\n<li>\n<p>多态存在的条件：有继承关系，子类重写父类方法，父类引用指向子类</p>\n</li>\n<li>\n<p>classCastException-- 父类子类转换异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对象能执行那些方法看左边！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Son</span> son<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 子类能够调用的方法来自父类和子类本身</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        son<span class=\"token punctuation\">.</span><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Son.test1()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 父类的引用指向子类，向上转型，调用方法来自本身，但不能调用子类方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Father</span> father<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        father<span class=\"token punctuation\">.</span><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Father.test1()</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 高转低，强制转换调用子类的放阿飞</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">)</span>father<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Son.test2()</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 父类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father.test()1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 子类</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son.test1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son.test2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"方法的重写\"><a class=\"anchor\" href=\"#方法的重写\">#</a> 方法的重写</h1>\n<blockquote>\n<ul>\n<li>需要有继承关系，方法名必须相同，参数列表需要相同</li>\n<li>重写的修饰符范围可以扩大但是不能缩小</li>\n<li>重写抛出的异常范围可以缩小但是不能扩大</li>\n<li>不能重写的方法\n<ul>\n<li>static 静态</li>\n<li>final 常量池，final 类不能继承</li>\n<li>private 私有</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 主程序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Son</span> son<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        son<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Son.test()</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 父类的引用指向子类，向上转型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Father</span> father<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        father<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Father.test()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 父类</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father.test()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 子类</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//Father father=new Son();</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 非静态的方法才可以被重写，子类重写了父类的方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token comment\">//override 重新这是注解</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    这是原本子类的方法被重写后变成了上面的方法</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    public  void test ()&#123;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        System.out.println (\"Son.test ()\");</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    * */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"instanceof关键字\"><a class=\"anchor\" href=\"#instanceof关键字\">#</a> instanceof 关键字</h1>\n<blockquote>\n<ul>\n<li>\n<p>判断两个类之间是否有关系</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Object > Person > Student</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Object > String</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 通过判断是否有关系就可以强制转换</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 父类的引用指向子类的对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译报错</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 转换低 (子类)-> 高 (父类) 自动</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 转换高 (父类)-> 低 (子类) 强制</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">Father</span> father<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 被自动强制转换为了父类</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">)</span>father<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 强制转换为子类调用子类的方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 子类转父类，向上转型</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 父类转子类，向下转型，强制转换，可能丢失方法</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h1 id=\"static关键字\"><a class=\"anchor\" href=\"#static关键字\">#</a> static 关键字</h1>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 静态代码块，用于初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 和类一起加载并执行一次，且只执行一次</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 匿名代码块，用于赋初始值，在每次生成实例对象时都会调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 加了 static 的属性称为类变量，或静态变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 静态变量是所有实例共享的变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 非静态变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span><span class=\"token comment\">// 类变量可以直接调用</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Father</span> father <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 非静态变量需要实例化才能使用属性</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        father<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        father<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 静态导入包</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>PI<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以之间调用 Math.random ();</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>PI<span class=\"token punctuation\">;</span><span class=\"token comment\">//Math.PI;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h1>\n<blockquote>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_11-03-00.png\" alt=\"抽象类\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//abstract 抽象类，不能被实例化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 修饰方法：抽象方法只有方法名字，没有方法实现</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 继承抽象类的子类必须重写抽象类的所有方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 如果子类也是抽象类，则子子类去重写所有方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 一旦方法使用 abstract, 该类必须是抽象类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 子类</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 必须重写父类的方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 子类，除非子类也是抽象类</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h1>\n<blockquote>\n<ul>\n<li>\n<p>普通类：只有具体实现</p>\n</li>\n<li>\n<p>抽象类：具体实现和规范 (抽象方法) 都有</p>\n</li>\n<li>\n<p>接口：只有规范</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接口 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserServer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 接口中不能写方法的实现，方法都是 public abstract</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//private void test ();// 报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 接口中定义均为 public static final</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//public static final int age=10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 接口 2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimeServer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 类可以实现接口，重写接口中的所有方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 接口可以多继承</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 实现：与接口同名 + Impl</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserSeverImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserServer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeServer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h1 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h1>\n<blockquote>\n<h2 id=\"成员内部类\"><a class=\"anchor\" href=\"#成员内部类\">#</a> 成员内部类</h2>\n<ul>\n<li>\n<p>在 A 类中定义一个内部类，B 对 A 来说就是内部类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 外部类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 内部类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 内部类可以访问外部内的私有属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//Application</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token class-name\">Outer</span> outer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       <span class=\"token comment\">// 通过外部类来实例化内部类</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Inner</span> inner <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        inner<span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//In</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"静态类\"><a class=\"anchor\" href=\"#静态类\">#</a> 静态类</h2>\n<ul>\n<li>\n<p>通过 static 修饰的内部类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 外部类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 静态类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"In\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 内部类可以访问外部内的私有属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">//return id; 此时不能访问 id</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"局部内部类\"><a class=\"anchor\" href=\"#局部内部类\">#</a> 局部内部类</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 外部类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 局部内部类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"匿名内部类\"><a class=\"anchor\" href=\"#匿名内部类\">#</a> 匿名内部类</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类，不赋值，也可以直接调用方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 不用将实例保存于变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"异常机制\"><a class=\"anchor\" href=\"#异常机制\">#</a> 异常机制</h1>\n<blockquote>\n<p>java 把异常当做对象处理，定义了一个基类 java.lang.Throwable 作为所有类的超类</p>\n<p>异常类分为：错误 (ERROR) 和异常 (Exception)</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_13-26-25.png\" alt=\"异常机制\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_13-31-43.png\" alt=\"错误\" /></p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_13-31-56.png\" alt=\"异常\" /></p>\n<h2 id=\"异常处理常用五个关键字trycatchfinallythrowthorws\"><a class=\"anchor\" href=\"#异常处理常用五个关键字trycatchfinallythrowthorws\">#</a> 异常处理常用五个关键字 (try,catch,finally,throw,thorws)</h2>\n<ul>\n<li>异常类型，catch 参数</li>\n</ul>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_13-42-57.png\" alt=\"异常类型\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 监控异常</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token comment\">//catch 中的参数是想要捕获的异常类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token comment\">// 最高类型 Throwable</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token comment\">// 捕获异常</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//java.lang.ArithmeticException: / by zero</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token comment\">// 程序无论是否出现异常都会执行的代码块</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//java 支持依次捕获异常</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Exception 异常</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Error</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 此处将捕获到 2/0 异常</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 按照异常类型从小到大写</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 主动抛出异常</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       <span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token function\">divide1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token function\">divide2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divide1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 一般在方法中主动抛出异常</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 使用 throws 在方法上抛出异常</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> divide2 <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//idea 快捷键，选中要生成 try-catch 的代码块</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">//Ctrl + Alt + T</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"自定义异常\"><a class=\"anchor\" href=\"#自定义异常\">#</a> 自定义异常</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_14-07-25.png\" alt=\"自定义异常\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自定义异常</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 打印异常信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"MyException &#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">\"ArrayIndexOutOfBounds: \"</span><span class=\"token operator\">+</span>index<span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 抛出异常</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MyException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">></span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Exception in thread \"main\" MyException &#123;ArrayIndexOutOfBounds: 11&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 出现异常安装 alt + enter 键出现提示选项修复</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 尽量添加 Finally 语句释放占用的资源</span></pre></td></tr></table></figure>",
            "tags": [
                "Java笔记",
                "算法",
                "笔记",
                "java"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/01/27/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%95%B0%E7%BB%84/",
            "url": "https://honshen.xyz/2021/01/27/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%95%B0%E7%BB%84/",
            "title": "第3章-方法详解及数组",
            "date_published": "2021-01-27T03:28:45.000Z",
            "content_html": "<h1 id=\"java笔记-第3章方法详解及数组\"><a class=\"anchor\" href=\"#java笔记-第3章方法详解及数组\">#</a> Java 笔记 -- 第 3 章方法详解及数组</h1>\n<h1 id=\"方法的定义\"><a class=\"anchor\" href=\"#方法的定义\">#</a> 方法的定义</h1>\n<ul>\n<li>\n<p>java 方法是语句的集合，它们在一起执行一个功能</p>\n</li>\n<li>\n<p>方法是解决一类问题的步骤的有序组合</p>\n</li>\n<li>\n<p>方法包含于类或对象中</p>\n</li>\n<li>\n<p>方法在程序中被创建，在其他地方被引用</p>\n</li>\n<li>\n<p>方法的原子性：一个方法只完成一个工能，这样利于后期的扩展</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//System.out.println (); 其中 System 为系统类，out 为输出对象，println 为方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 方法的命名规则：首字母小写，驼峰命名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//main 方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//static 将变量提升为类变量，可以直接在该类的其他地方调用</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法包含一个方法头和一个方法体</p>\n<ul>\n<li>修饰符：可选，告诉编译器如何调用该方法，定义了方法的访问类型</li>\n<li>返回值类型：方法可能有返回值 --returnValueType 是返回值类型；方法没有返回值，则 returnValueType 为 void</li>\n<li>方法名：方法名和参数表共同构成方法签名</li>\n<li>参数类型：方法被调用时传递值给参数，这个值称为实参或者变量，参数列表是指参数类型、顺序和参数个数，参数是可选的可以不包含任何参数</li>\n<li>方法体：方法包含的具体语句，定义该方法的功能</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>修饰符有<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">private</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>修饰符 返回值 方法名 <span class=\"token punctuation\">(</span>参数类型 参数名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2 是实际参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//a,b 为形式参数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//return 终止方法的进行，遇到 return 直接返回</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>值传递和引用传递</p>\n<ul>\n<li>java 基本类型都是值传递</li>\n<li>java 引用类型：类，接口类型，数组为引用传递</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"方法的重载\"><a class=\"anchor\" href=\"#方法的重载\">#</a> 方法的重载</h1>\n<blockquote>\n<p>在一个类中，有相同的函数名称，但形参不同的函数</p>\n<p>重载的规则:</p>\n<ul>\n<li>方法名称相同</li>\n<li>参数列表必须不同 (个数、参数排列顺序或类型不同)</li>\n<li>返回类型不同不能做为方法重载，重载的方法返回类型可以相同或不同</li>\n<li>方法名称相同时，编译器会根据参数的个数、参数的类型匹配对应的方法，匹配失败编译器报错</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> m<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会调用第二个方法返回 2.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 会调用第一个方法返回 2, 但是注意返回值不同并不能构成方法的重载</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"命令行传参\"><a class=\"anchor\" href=\"#命令行传参\">#</a> 命令行传参</h1>\n<ul>\n<li>\n<p>新建一个 java 文件如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> val<span class=\"token operator\">:</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在该文件路径下打开 cmd, 使用 javac Demo.java 编译</p>\n</li>\n<li>\n<p>回退到包的 src 路径下使用 java 包名.Demo 才能运行如: java xyz.honshen.Demo</p>\n</li>\n<li>\n<p>在命令后加入参数 结果如下</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_17-28-06.png\" alt=\"命令行参数\" /></p>\n</li>\n<li>\n<p>在 main 函数中将命令行参数输出到了控制台</p>\n</li>\n</ul>\n<h1 id=\"可变参数\"><a class=\"anchor\" href=\"#可变参数\">#</a> 可变参数</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_17-58-29.png\" alt=\"可变参数\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//15</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 可变参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sum <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val <span class=\"token operator\">:</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           sum<span class=\"token operator\">+=</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h1>\n<ul>\n<li>递归结构包括两个部分:\n<ul>\n<li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。递归体：什么时候需要调用自身方法。</li>\n<li>递归体：什么时候需要调用自身方法</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<blockquote>\n<ul>\n<li>\n<h2 id=\"数组的创建\"><a class=\"anchor\" href=\"#数组的创建\">#</a> 数组的创建</h2>\n<ul>\n<li>数组是相同类型的数据集合</li>\n<li>下标从 0 到 arr.length-1, 索引从 0 开始</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组初始化不赋值默认为 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首选</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dataType arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 效果相同但不是首选</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span>arraySize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用 new 操作符创建数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取数组的长度</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"数组使用\"><a class=\"anchor\" href=\"#数组使用\">#</a> 数组使用</h2>\n<ul>\n<li>数组变量属于引用类型，数组本身是对象，数组对象本身存在于堆中</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 入参和返回值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<h2 id=\"多维常用的二维数组\"><a class=\"anchor\" href=\"#多维常用的二维数组\">#</a> 多维 (常用的二维) 数组</h2>\n<ul>\n<li>\n<p>二维数组是一个特殊的一位数组，其中每一个元素都是一个一维数组</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 二维数组遍历</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     \t<span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ins <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>三维以上此次类推</p>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"array类\"><a class=\"anchor\" href=\"#array类\">#</a> Array 类</h2>\n<ul>\n<li>\n<p>java 的工具类: java.util.Arrays</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1, 4, 3, 2]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3,4]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 当 arr 部分为空时，那部分会被 0 填充</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第 2 到 4 之间的元素会被 1 填充</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 冒泡排序，八大排序算法之一</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<h2 id=\"稀疏数组\"><a class=\"anchor\" href=\"#稀疏数组\">#</a> 稀疏数组</h2>\n<ul>\n<li>\n<p>二维数组存储数据初始化很多没有意义的数据 0</p>\n</li>\n<li>\n<p>一种数据结构，把不同元素的行和列记录在一个小规模的数组中，其本身也是一个二维数组</p>\n</li>\n<li>\n<p>稀疏矩阵解读</p>\n<ul>\n<li>第一行表明二维数组矩阵的 row 和 col, 以及二维数组所含有效数据个数 8</li>\n<li>接下来第二行至第八行分别表示二维矩阵的有效数字所在位置的行 (0<sub>5), 列 (0</sub>6) 和其值</li>\n</ul>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-27_12-44-46.png\" alt=\"稀疏数组\" /></p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"java内存\"><a class=\"anchor\" href=\"#java内存\">#</a> java 内存</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_19-16-05.png\" alt=\"java内存\" /></p>\n",
            "tags": [
                "Java笔记",
                "算法",
                "笔记",
                "java"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/01/26/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/",
            "url": "https://honshen.xyz/2021/01/26/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/",
            "title": "第2章-包机制、流程控制及循环结构",
            "date_published": "2021-01-26T04:28:45.000Z",
            "content_html": "<h1 id=\"java笔记-第2章包机制-流程控制及循环结构\"><a class=\"anchor\" href=\"#java笔记-第2章包机制-流程控制及循环结构\">#</a> Java 笔记 -- 第 2 章包机制、流程控制及循环结构</h1>\n<h1 id=\"包机制\"><a class=\"anchor\" href=\"#包机制\">#</a> 包机制</h1>\n<blockquote>\n<p>包的本质是文件夹，用于区别类名的命名空间</p>\n<p>一般使用公司域名倒置做为包名</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//www.baidu.com 其包名为 com.baidu.www</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 项目文件右上角设置里取消勾选 Compact Middle Package</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baidu<span class=\"token punctuation\">.</span>www</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在最上面</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 导入包，语句必须在 package 下面</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baidu<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 导入所有类</span></pre></td></tr></table></figure><p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_13-27-13.png\" alt=\"包机制\" /></p>\n</blockquote>\n<h1 id=\"javadoc\"><a class=\"anchor\" href=\"#javadoc\">#</a> javaDoc</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_13-30-07.png\" alt=\"javaDoc\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">xyz<span class=\"token punctuation\">.</span>honshen</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author honshen</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @version 1.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @since 1.8 开发 java 的版本 jdk1.8</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWord</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param name</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @throws Exception</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span>  name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"java的scanner对象-与用户交互\"><a class=\"anchor\" href=\"#java的scanner对象-与用户交互\">#</a> java 的 Scanner 对象 -- 与用户交互</h1>\n<blockquote>\n<h2 id=\"scanner基本语法\"><a class=\"anchor\" href=\"#scanner基本语法\">#</a> Scanner 基本语法:</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Scanner</span> s<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 通过 Scanner 类的 next () 与 nextLine () 方法获取输入的字符串，在读取输入数据以前需要使用 hasNext () 或 hasNextLine () 判断是否还有输入的数据</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">xyz<span class=\"token punctuation\">.</span>honshen</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWord</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next接收输入: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 判断用户是否输入</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//next 方式接收，只能到空格结束</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">//println 会换行，print 不会换行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入内容为: \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 输出输入内容</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nextline接收输入: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//nextLine 方式接收，接收一行到 \\n 结束</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入内容为: \"</span><span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出输入内容</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭 Scanner io 流必须关闭否则会占用资源</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_14-25-19.png\" alt=\"next和nextline区别\" /></p>\n</blockquote>\n<blockquote>\n<h2 id=\"scanner进阶\"><a class=\"anchor\" href=\"#scanner进阶\">#</a> Scanner 进阶</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Scanner</span> s<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 接收小数和整数，判断输入是否为整数或小数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     a<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      b<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b: \"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> s<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 同理还有 nextDouble 等</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"java程序之顺序-选择-循环结构breakcontinue\"><a class=\"anchor\" href=\"#java程序之顺序-选择-循环结构breakcontinue\">#</a> java 程序之顺序 -- 选择 -- 循环结构 (break,continue)</h1>\n<blockquote>\n<h2 id=\"顺序结构\"><a class=\"anchor\" href=\"#顺序结构\">#</a> 顺序结构</h2>\n<ul>\n<li>\n<p>一句一句执行，从上往下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从上到下输出 1 2 3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<blockquote>\n<h2 id=\"选择结构\"><a class=\"anchor\" href=\"#选择结构\">#</a> 选择结构</h2>\n<ul>\n<li>\n<p>if 选择结构</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//string.equals (\"str\") 判断字符串是否一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//if 语句的嵌套</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 多个判断</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 执行语句 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 执行语句 2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 执行语句 3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 执行语句 4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>switch 选择结构</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从 javase7 开始支持比较字符串，本质是比较数字 (hash 数字)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 本质是 hashcode 编码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    在文件路径下输入 cmd + 空格然后回车可直接进入 cmd</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    将编译的 class 文件用 idea 直接打开获得反编译文件反编译后结果，如下</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    String name = \"abc\";</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tswitch (name.hashCode ())&#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \tcase 9987: </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        \t// 语句</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        \tbreak;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"中国\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 不加 break, 则 case 穿透会一直执行到 break</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">case</span> value<span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">default</span> value<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>可选</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<blockquote>\n<h2 id=\"循环结构\"><a class=\"anchor\" href=\"#循环结构\">#</a> 循环结构</h2>\n<ul>\n<li>\n<p>while</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 无限循环，常用于服务器监听</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>do-while</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 执行语句，至少执行一次</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>for</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化<span class=\"token punctuation\">;</span>布尔表达式<span class=\"token punctuation\">;</span>更新<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 例如:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 在 idea 输入 100.for 可以直接获得 100 次的 for 循环结构</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>增强型 for 循环</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//jdk5 引入的特性，主要遍历数组和集合</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>声明语句<span class=\"token operator\">:</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 例如数组遍历: </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义一个数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次循环 numbers [i] 为: 10,20,30</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    val<span class=\"token punctuation\">;</span><span class=\"token comment\">// 每次循环 val 为: 10, 20, 30</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<blockquote>\n<h2 id=\"break和continue-组合成类似goto语句\"><a class=\"anchor\" href=\"#break和continue-组合成类似goto语句\">#</a> break 和 continue  组合成类似 goto 语句</h2>\n<ul>\n<li>break 用于循环和 switch, 强制退出循环或语句块</li>\n<li>continue 只用于循环，跳过本次循环，进入下一次循环</li>\n<li>goto 语句:java 中保留字含有 goto, 但并未得到使用，给语句加上 label, 通过 break 和 continue 实现 (不建议使用了解即可)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结束循环</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 进入下一次循环</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 执行语句</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 利用 label 求质数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>outer<span class=\"token operator\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 有其他因数，则不是质数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">continue</span> outer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "Java笔记",
                "算法",
                "笔记",
                "java"
            ]
        },
        {
            "id": "https://honshen.xyz/2021/01/25/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%B8%80%E7%AB%A0HelloWord/",
            "url": "https://honshen.xyz/2021/01/25/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%B8%80%E7%AB%A0HelloWord/",
            "title": "第1章-HelloWord基础",
            "date_published": "2021-01-25T04:20:45.000Z",
            "content_html": "<h1 id=\"java笔记-第1章helloword基础\"><a class=\"anchor\" href=\"#java笔记-第1章helloword基础\">#</a> Java 笔记 -- 第 1 章 HelloWord 基础</h1>\n<h1 id=\"第一个java程序\"><a class=\"anchor\" href=\"#第一个java程序\">#</a> 第一个 java 程序</h1>\n<blockquote>\n<p>Tips:</p>\n<ol>\n<li>\n<p>文件名与类名一致 (<em>类名大写，这是规范</em>), 且在该文件的目录下执行 java 命令</p>\n</li>\n<li>\n<p>大小写敏感</p>\n</li>\n<li>\n<p>javac 文件名.java -- <strong>javac 生成的是文件名.class 文件</strong></p>\n</li>\n<li>\n<p>java 文件名 -- <strong>java 执行的是文件名.class 文件，执行 java 命令文件名不用带后缀 class</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//demo 类需要与文件名一致</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWord</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//idea 输入 psvm 可以直接获得 public static void main (String [] args) &#123;&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 参数不能写错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//idea 输入 sout 能够直接获得 ystem.out.print (\"\");</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Word!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大小写敏感</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n<h1 id=\"java程序运行机制\"><a class=\"anchor\" href=\"#java程序运行机制\">#</a> java 程序运行机制</h1>\n<ul>\n<li>编译型 (一次性全部编译，执行速度快)</li>\n<li>解释型 (即时编译，边执行边编译)</li>\n</ul>\n<h1 id=\"java入门语法\"><a class=\"anchor\" href=\"#java入门语法\">#</a> java 入门语法</h1>\n<blockquote>\n<p>注释 (3 种):</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单行注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>多行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>注释</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*javaDoc 文档注释</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*@author 解释</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>* 这是有功能的注释</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"java关键字及标识符\"><a class=\"anchor\" href=\"#java关键字及标识符\">#</a> java 关键字及标识符</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-25_19-46-59.png\" alt=\"java标识符\" /></p>\n<blockquote>\n<p>标识符以  字母  $  _   开头，首字母之后可以是 字母 $  _  数字  的任何组合</p>\n<p>不能使用关键字，且大小写敏感也可以中文命名 \\</p>\n<p>java 是强类型语言，所有变量必须先定义后使用</p>\n</blockquote>\n<h1 id=\"java数据类型\"><a class=\"anchor\" href=\"#java数据类型\">#</a> java 数据类型</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-25_20-08-07.png\" alt=\"java数据类型\" /></p>\n<blockquote>\n<p>常用数据类型:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 整数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">byte</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">short</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">long</span> num4 <span class=\"token operator\">=</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//long 类型需要数字后加 L 以区分</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 小数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">float</span> num5 <span class=\"token operator\">=</span> <span class=\"token number\">10.0F</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 浮点类型需要数字后加 F 区分 double</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">double</span> num6<span class=\"token operator\">=</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 字符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 字符串</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//String 不是关键字而是一个类</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 布尔值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>整数扩展</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 十进制</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">010</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0 开头表示八进制，结果为 8 (十进制)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0x 开头表示十六进制，结果为 16 (十进制)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> num4 <span class=\"token operator\">=</span> <span class=\"token number\">0b10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0b 开头表示二进制，结果为 2 (十进制)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> num5 <span class=\"token operator\">=</span> <span class=\"token number\">100_0000_0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数字之间可以使用下划线分开</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 浮点数 有限 离散 舍入误差 大约 接近但不等于</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 不要使用浮点数比较使用类 BigDecimal</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 所有的字符本质是数字可以强制转换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> <span class=\"token string\">'中'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> num6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//97</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> num7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//20013</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//unicode 编码 U0000-UFFFF</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">char</span> ch1 <span class=\"token operator\">=</span> <span class=\"token string\">'\\u0061'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 十六进制转义字符表示字符 'a'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 转义字符：水平制表符: \\t 垂直制表符: \\r 换行: \\n 退格: \\b \\: \\\\ \": \\\"</span></pre></td></tr></table></figure><p>类型转换</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-25_20-55-23.png\" alt=\"类型转换\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内存溢出 -- 强制转换 (高 --> 低)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> c <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动转换 (低 --> 高)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 不能对 boolean 转换</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 不能把对象类型转换为不相干类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 把高容量向低容量需要强制转换</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 进行转换可能会出现精度损失和内存溢出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 注意计算溢出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> money <span class=\"token operator\">=</span> <span class=\"token number\">10_0000_0000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> years <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> total1<span class=\"token operator\">=</span> money<span class=\"token operator\">*</span>years<span class=\"token punctuation\">;</span><span class=\"token comment\">// 溢出，结果为负数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">long</span> total2<span class=\"token operator\">=</span> money<span class=\"token operator\">*</span>years<span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算结果已经溢出在将溢出结果进行转换，结果为负数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 建议: long total3=money*((long) years); 先将其中一个强制另一个自动转换</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h1>\n<ol>\n<li>\n<p>java 是强类型语言，每个变量都必须声明其类型</p>\n</li>\n<li>\n<p>每个变量都有类型，类型可以是基本类型也可以是引用类型</p>\n</li>\n<li>\n<p>变量名必须是合法的标识符</p>\n</li>\n<li>\n<p>变量声明是一条完整的语句，每一个声明以分号结束</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据类型 变量名 = 值；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>type varName <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>value<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">,</span>varName<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 可以使用逗号隔开以申明多个变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 也可以</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"变量作用域\"><a class=\"anchor\" href=\"#变量作用域\">#</a> 变量作用域</h2>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Varlue</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实例变量，方法外面，类的里面，从属于对象，如果不初始化会赋予一个默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 默认情况：布尔值:false 字符串: U0000 整形: 0 浮点：0.0 除了基本类型其余为 null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 局部变量，只在方法内 method &#123;&#125; 能够使用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Varlue</span> demo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Varlue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        demo<span class=\"token punctuation\">.</span>ch<span class=\"token punctuation\">;</span><span class=\"token comment\">//abc</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n</ol>\n<h1 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h1>\n<blockquote>\n<p>初始化后不能改变的值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 常量名一般使用大写字符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 修饰符不区分前后</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Var</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 不区分前后</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"变量命名规范\"><a class=\"anchor\" href=\"#变量命名规范\">#</a> 变量命名规范</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-25_22-52-09.png\" alt=\"变量命名\" /></p>\n<h1 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_12-27-39.png\" alt=\"运算符\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果操作数其中一个为 long 类型其结果为 long 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果操作数其中一个为 double 其类型为 double</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> c<span class=\"token operator\">=</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果为 long 类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果为 double 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果操作数为 short,byte 其结果也为 long</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">short</span> c<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">byte</span> d <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>c<span class=\"token operator\">+</span>d<span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果为 int 类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 自增，自减运算符，一元运算符</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">++</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">--</span>d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 幂运算使用工具类</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">double</span> pow <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2^3=8</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 短路运算: &amp;&amp; 左边为假时不执行右边的算法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">boolean</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">boolean</span> b<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 不会执行 b 语句</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 位运算: &amp; | ^ ~</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>A = 0011 1100</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>B = 0000 1101</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>A&amp;B = 0000 1100</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>A|B = 0011 1101 // 一个为 1 即为 1</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>A^B = 0011 0001 // 相同为 0 不同为 1</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>~B = 1111 0010</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>2*8 怎么运算最快？</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>2&lt;&lt;3</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>左移: &lt;&lt; 相当于 *2</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>右移: >> 相当于 /2</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>位运算效率极高！</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 扩展运算符</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>a<span class=\"token operator\">+=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a=a+5;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>b<span class=\"token operator\">-=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>c<span class=\"token operator\">*=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>d<span class=\"token operator\">/=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 字符串连接符 +</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token string\">\"\"</span><span class=\"token operator\">+</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//1020 将字符串拼接</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//30 先运算 a+b 为 int 再进行拼接</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 三元运算符</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>x<span class=\"token operator\">?</span>y<span class=\"token operator\">:</span>z<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果 x 语句为真执行 y 否则执行 z</span></pre></td></tr></table></figure>",
            "tags": [
                "Java笔记",
                "算法",
                "笔记",
                "java"
            ]
        },
        {
            "id": "https://honshen.xyz/2020/12/24/MarkDown/Markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
            "url": "https://honshen.xyz/2020/12/24/MarkDown/Markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
            "title": "Markdown使用指南",
            "date_published": "2020-12-24T04:10:45.000Z",
            "content_html": "<h1 id=\"markdownnote\"><a class=\"anchor\" href=\"#markdownnote\">#</a> MarkdownNote</h1>\n<p>common grammar--MarkdownNote</p>\n<p>推荐 markdown 软件<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHlwb3JhLmlvLw==\"> Typora</span></p>\n<h1 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h1>\n<blockquote>\n<p><strong>使用技巧:  &quot;#&quot; + 空格 + 文本</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">###</span> 三级标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">##</span> 二级标题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span> 一级标题</span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<h6 id=\"六级标题\"><a class=\"anchor\" href=\"#六级标题\">#</a> 六级标题</h6>\n<h3 id=\"三级标题\"><a class=\"anchor\" href=\"#三级标题\">#</a> 三级标题</h3>\n<h2 id=\"二级标题\"><a class=\"anchor\" href=\"#二级标题\">#</a> 二级标题</h2>\n<h1 id=\"一级标题\"><a class=\"anchor\" href=\"#一级标题\">#</a> 一级标题</h1>\n</blockquote>\n<h1 id=\"title\"><a class=\"anchor\" href=\"#title\">#</a> title</h1>\n<blockquote>\n<p><strong>使用技巧: title 下方  + ''  = &quot;或&quot; - &quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\">Second Title(-的数量随意)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">------</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token title important\">First Title(=的数量随意)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">===</span></span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<h2 id=\"second-title-的数量随意\"><a class=\"anchor\" href=\"#second-title-的数量随意\">#</a> Second Title (- 的数量随意)</h2>\n<h1 id=\"first-title的数量随意\"><a class=\"anchor\" href=\"#first-title的数量随意\">#</a> First Title (= 的数量随意)</h1>\n</blockquote>\n<h1 id=\"字体样式\"><a class=\"anchor\" href=\"#字体样式\">#</a> 字体样式</h1>\n<blockquote>\n<ol>\n<li>\n<p><strong>加粗使用技巧: &quot;**&quot; + 文本 + &quot;**&quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">这是加粗文本</span><span class=\"token punctuation\">**</span></span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p><strong>这是加粗文本</strong></p>\n</li>\n<li>\n<p><strong>斜体使用技巧: &quot;*&quot;+ 文本 +&quot;*&quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">这是斜体</span><span class=\"token punctuation\">*</span></span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p><em>这是斜体</em></p>\n</li>\n<li>\n<p><strong>粗斜体使用技巧:  &quot;***&quot;+ 文本 +&quot;***&quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\"><span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">这是粗斜体</span><span class=\"token punctuation\">*</span></span></span><span class=\"token punctuation\">**</span></span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p><em><strong>这是粗斜体</strong></em></p>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"分割线\"><a class=\"anchor\" href=\"#分割线\">#</a> 分割线</h1>\n<blockquote>\n<p><strong>分割线使用技巧：文本下方 + 3 个 &quot;_&quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>下划线在文本下方(_3个)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>___</pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p>下划线在文本下方 (_3 个)</p>\n<hr />\n</blockquote>\n<h1 id=\"删除线\"><a class=\"anchor\" href=\"#删除线\">#</a> 删除线</h1>\n<blockquote>\n<p><strong>删除线使用技巧: &quot;~~&quot; + 文本 + ''~~&quot;</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>~~我不会markdown~~</pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p><s>我不会 markdown</s></p>\n</blockquote>\n<h1 id=\"代码插入\"><a class=\"anchor\" href=\"#代码插入\">#</a> 代码插入</h1>\n<blockquote>\n<p><strong>小块代码使用技巧: &quot;`&quot;+ 代码语句 +&quot; ` &quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token code keyword\">`npm install hexo-cli --save`</span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p><code>npm install hexo-cli --save</code></p>\n<p><strong>区域代码块使用技巧: &quot;``` 语言类型 &quot;+ {代码块} +&quot;```&quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>​```java</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public class demo &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t//代码块</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>​```</pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> demo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 代码块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>tips: 常用语言类型有 c、c++、java、javascript、html、css、nodejs、bash、cmd、markdown 等</strong></p>\n</blockquote>\n<h1 id=\"对齐\"><a class=\"anchor\" href=\"#对齐\">#</a> 对齐</h1>\n<blockquote>\n<p><strong>使用技巧: &quot;&gt;&quot;+ 空格</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token blockquote punctuation\">></span> 第一列</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token blockquote punctuation\">> ></span> 第二列</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token blockquote punctuation\">> > ></span> 第三列</pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<blockquote>\n<p>第一列</p>\n<blockquote>\n<p>第二列</p>\n<blockquote>\n<p>第三列</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h1>\n<blockquote>\n<p><strong>使用技巧: &quot;[&quot;+ 文本 +&quot;]&quot;+&quot;(&quot;+ 地址 +&quot;)&quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token url\">[<span class=\"token content\">百度一下,点击前往百度</span>](https://baidu.com)</span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlkdS5jb20=\">百度一下，点击前往百度</span></p>\n<p><strong>tips: 中括号中的内容是显示的链接文字，地址可以是网路地址也可以是本机文件的绝对地址</strong></p>\n</blockquote>\n<h1 id=\"图像\"><a class=\"anchor\" href=\"#图像\">#</a> 图像</h1>\n<blockquote>\n<p><strong>使用技巧: &quot;!&quot;+&quot;[&quot;+ 文本 +&quot;]&quot;+&quot;(&quot;+ 地址 +&quot;)&quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token url\">![<span class=\"token content\">profile</span>](https://avatars0.githubusercontent.com/u/61302414?s=120&amp;v=4)</span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p><img data-src=\"https://avatars0.githubusercontent.com/u/61302414?s=120&amp;v=4\" alt=\"profile\" /></p>\n<p><strong>tips: 中括号中的文本是对图像的一段描述，如果图像加载失败将会显示中括号中的文本，地址可以是网络地址也可以是本机图像文件的绝对地址</strong></p>\n</blockquote>\n<h1 id=\"待解释\"><a class=\"anchor\" href=\"#待解释\">#</a> 待解释</h1>\n<blockquote>\n<p><strong>使用技巧: &quot;[&quot;+&quot;^&quot;+ 文本 +&quot;]&quot;</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GitHub[^ex]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">^ex</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Build</span> software better, together</pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p>GitHub<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<p><strong>tips: 一般待解释需要放到文档或网页的页脚进行注释</strong></p>\n</blockquote>\n<h1 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h1>\n<blockquote>\n<ol>\n<li>\n<p><strong>无序列表使用技巧: &quot;+&quot; 或 &quot;-&quot; + 文本</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">+</span> 无序列表1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">+</span> 无序列表2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">-</span> 无序列表3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">-</span> 无序列表4</pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<ul>\n<li>无序列表 1</li>\n<li>无序列表 2</li>\n</ul>\n<ul>\n<li>无序列表 3</li>\n<li>无序列表 4</li>\n</ul>\n</li>\n<li>\n<p><strong>有序列表使用技巧：数字 + &quot;.&quot; + 文本</strong></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 有序列表1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 有序列表2</pre></td></tr></table></figure><p>** 效果如下: **</p>\n<ol>\n<li>有序列表 1</li>\n<li>有序列表 2</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"表格\"><a class=\"anchor\" href=\"#表格\">#</a> 表格</h1>\n<blockquote>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token table\"><span class=\"token table-header-row\"><span class=\"token punctuation\">|</span><span class=\"token table-header important\"> TITLE </span><span class=\"token punctuation\">|</span><span class=\"token table-header important\"> COL  </span><span class=\"token punctuation\">|</span><span class=\"token table-header important\"> COL  </span><span class=\"token punctuation\">|</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></span><span class=\"token table-line\"><span class=\"token punctuation\">|</span> <span class=\"token punctuation\">-----</span> <span class=\"token punctuation\">|</span> <span class=\"token punctuation\">----</span> <span class=\"token punctuation\">|</span> <span class=\"token punctuation\">----</span> <span class=\"token punctuation\">|</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></span><span class=\"token table-data-rows\"><span class=\"token punctuation\">|</span><span class=\"token table-data\"> ROW1  </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> ROW1 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> ROW1 </span><span class=\"token punctuation\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">|</span><span class=\"token table-data\"> ROW2  </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> ROW2 </span><span class=\"token punctuation\">|</span><span class=\"token table-data\"> ROW2 </span><span class=\"token punctuation\">|</span></span></span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<table>\n<thead>\n<tr>\n<th>TITLE</th>\n<th>COL</th>\n<th>COL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ROW1</td>\n<td>ROW1</td>\n<td>ROW1</td>\n</tr>\n<tr>\n<td>ROW2</td>\n<td>ROW2</td>\n<td>ROW2</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h1 id=\"网页\"><a class=\"anchor\" href=\"#网页\">#</a> 网页</h1>\n<blockquote>\n<p><strong>tips: Markdown 支持使用 Html, 只要你会使用 Html, 就可以做到任何事！</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://avatars0.githubusercontent.com/u/61302414?s=120&amp;v=4<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\">zoom=50%</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://baidu.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>百度一下<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdmF0YXJzMC5naXRodWJ1c2VyY29udGVudC5jb20vdS82MTMwMjQxND9zPTEyMCZhbXA7dj00\">https://avatars0.githubusercontent.com/u/61302414?s=120&amp;v=4</span>&quot; style=&quot;zoom=50%&quot;/&gt;<br />\n&lt;a href=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlkdS5jb20v\">https://baidu.com/</span>&quot;&gt; 百度一下 &lt;/a&gt;</p>\n</blockquote>\n<h1 id=\"转义\"><a class=\"anchor\" href=\"#转义\">#</a> 转义</h1>\n<blockquote>\n<p><strong>当你想使用一些特殊字符时如:  <code>&gt; &lt; #</code> 等，可能会被 markdown 语法解析下面有两种方法防止语法被解析:</strong></p>\n<ol>\n<li>\n<p>使用 ``反引号` 来防止被解析，反引号位于 esc 键下方，被两个反引号包裹的内容不会被解析</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token code keyword\">`> &lt; # ![图片](src) [链接](href)`</span></pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p><code>&gt; &lt; # ![图片](src) [链接](href)</code></p>\n</li>\n<li>\n<p>使用转义字符:  <code>\\</code>  来防止语法被解析，如下:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>\\> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\\&lt;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\\\\</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\\#</pre></td></tr></table></figure><p><strong>效果如下:</strong></p>\n<p>&gt;<br />\n&lt;<br />\n\\<br />\n#</p>\n<p><strong>tips: 如果想要使用反引号可以使用 <code>&amp;#96;</code>  来表示  `</strong></p>\n</li>\n</ol>\n</blockquote>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Build software better, together <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Markdown使用指南",
                "笔记",
                "Markdown"
            ]
        },
        {
            "id": "https://honshen.xyz/2020/12/13/Hexo/%E7%AC%AC1%E7%AB%A0-%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8BHEXO%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96/",
            "url": "https://honshen.xyz/2020/12/13/Hexo/%E7%AC%AC1%E7%AB%A0-%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8BHEXO%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96/",
            "title": "第1章-零基础使用HEXO搭建个人博客之HEXO及其初始化",
            "date_published": "2020-12-13T04:12:45.000Z",
            "content_html": "<h1 id=\"零基础hexo搭建个人博客之hexo安装及其初始化\"><a class=\"anchor\" href=\"#零基础hexo搭建个人博客之hexo安装及其初始化\">#</a> 零基础 HEXO 搭建个人博客之 HEXO 安装及其初始化</h1>\n<p><strong>引言：很多小伙伴都希望搭建一个属于自己的博客平台，今天这篇文章教会大家如何 0 基础也能搭建个人博客，我们使用 Hexo 来帮助我们搭建个人博客～</strong></p>\n<h2 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h2>\n<blockquote>\n<ol>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iZWJiYTBkODAzOGU=\">安装 git</span>--<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8=\">git 官网</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xM2Y0NWUyNGIxZGU=\">安装 nodejs</span>--<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">nodejs 官网</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYzBkOGQxMGExY2I=\">注册 github</span>-- 创建一个和 Username 一样名称的仓库</p>\n<p><img data-src=\"https://s3.ax1x.com/2020/12/08/rSNdZ8.md.png\" alt=\"创建仓库\" /></p>\n<blockquote>\n<p>Tips: 创建仓库名如果与 Username 不一致，请在下文初始化博客和配置博客文件时使用和仓库名一样的名字！！！<strong>访问链接 https:// 仓库名.github.io 访问</strong></p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> Git</h2>\n<blockquote>\n<ol>\n<li>\n<p>在任意文件夹里，点击鼠标右键，选择 Git bash here, 打开 git bash 输入配置信息</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"用户名\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"邮箱地址\"</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 例如:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"hongsheng-xu\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"1394948572@qq.com\"</span></pre></td></tr></table></figure></blockquote>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>\n<p>在 git bash 里输入</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen -t rsa -C  <span class=\"token string\">\"邮箱地址\"</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#例如: </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssh-keygen -t rsa -C  <span class=\"token string\">\"1394948572@qq.com\"</span></pre></td></tr></table></figure></blockquote>\n</li>\n</ol>\n<p>控制台输出如下:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Enter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/c/Users/13949/.ssh/id_rsa<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Created directory <span class=\"token string\">'/c/Users/13949/.ssh'</span><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Enter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Enter same passphrase again:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Your identification has been saved <span class=\"token keyword\">in</span> /c/Users/13949/.ssh/id_rsa</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Your public key has been saved <span class=\"token keyword\">in</span> /c/Users/13949/.ssh/id_rsa.pub</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>The key fingerprint is:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#后文输出省略......</span></pre></td></tr></table></figure><pre><code class=\"language-cmd\"># 打开目录--控制台第二行输出Created directory '/c/Users/13949/.ssh'.其中ssh的存放路径为:\nC:\\Users\\13949\\.ssh\n# 打开github&gt;点击个人头像&gt;点击设置(Settings)&gt;点击SSH and GPG keys&gt;New SSH key&gt;在路径:C:\\Users\\13949\\.ssh记事本打开id_rsa.pub文件,复制全部到New SSH key中key内容里\n</code></pre>\n<p><a href=\"https://imgchr.com/i/rSdmMn\"><img data-src=\"https://s3.ax1x.com/2020/12/08/rSdmMn.md.png\" alt=\"rSdmMn.md.png\" /></a></p>\n</blockquote>\n<h1 id=\"hexo安装\"><a class=\"anchor\" href=\"#hexo安装\">#</a> Hexo 安装</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">hexo 文档</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">hexo 安装</span></p>\n</blockquote>\n<blockquote>\n<pre><code class=\"language-cmd\"># 安装hexo, win+R,输入cmd 打开控制台输入: \ne: \nmd blog\ncd blog\nnpm install hexo-cli -g\n#列如: \nC:\\Users\\13949&gt;e:\nE:\\&gt;md blog\nE:\\&gt;cd blog\nE:\\blog&gt;npm install hexo-cli -g\n</code></pre>\n<p><strong>Tips: 通过上述代码在 E 盘创建了一个名为 blog 的文件夹，接下来我们需要做的就是初始化个人博客</strong></p>\n</blockquote>\n<h1 id=\"hexo初始化\"><a class=\"anchor\" href=\"#hexo初始化\">#</a> Hexo 初始化</h1>\n<blockquote>\n<pre><code class=\"language-cmd\">#在blog文件夹下初始化博客 hexo init 博客名\nhexo init hongsheng-xu\n#进入博客所在文件夹\ncd hongsheng-xu\n#安装依赖\nnpm i\n#安装插件\nnpm i hexo-deployer-git --save\n#运行博客\nhexo sever\n#上一步也可以这样写--运行博客并指定端口名\nhexo s -p 8080\n</code></pre>\n<pre><code class=\"language-cmd\">#列如:\nE:\\blog&gt;hexo init hongsheng-xu\nE:\\blog&gt;cd hongsheng-xu\nE:\\blog&gt;hongsheng-xu&gt;npm i\nE:\\blog&gt;hongsheng-xu&gt;npm i hexo-deployer-git --save\nE:\\blog&gt;hongsheng-xu&gt;hexo sever\n</code></pre>\n<p><strong>输入 hexo sever 后你会看到控制台输出如下:</strong></p>\n<pre><code class=\"language-cmd\">#INFO  Validating config\n#INFO  Start processing\n#INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n</code></pre>\n<blockquote>\n<p>完成这一步，nodejs 会建立一个本地服务器通常会向 Windows 请求相关权限</p>\n<p>你可以复制地址 http://localhost:4000 到浏览器的地址栏，回车就能看到个人博客啦！</p>\n<p>同时按住 ctrl+c 可以停止服务器的运行</p>\n</blockquote>\n<p><strong>搭建好的个人博客大概长这样</strong>:</p>\n<p><a href=\"https://imgchr.com/i/rSBmMd\"><img data-src=\"https://s3.ax1x.com/2020/12/08/rSBmMd.md.png\" alt=\"个人博客\" /></a></p>\n</blockquote>\n<h1 id=\"hexo发布至github\"><a class=\"anchor\" href=\"#hexo发布至github\">#</a> Hexo 发布至 github</h1>\n<blockquote>\n<ol>\n<li>\n<p>修改博客子目录下_config.yml</p>\n<p><a href=\"https://imgchr.com/i/ri3Y7T\"><img data-src=\"https://s3.ax1x.com/2020/12/10/ri3Y7T.png\" alt=\"修改_config.yml.png\" /></a></p>\n<p>修改为 https:// 仓库名.github.io    <strong>这样就可以通过仓库名.github.io 去访问个人博客</strong></p>\n<p><a href=\"https://imgchr.com/i/ri3Dj1\"><img data-src=\"https://s3.ax1x.com/2020/12/10/ri3Dj1.png\" alt=\"ri3Dj1.png\" /></a></p>\n<p>找到 deploy 加入几行代码</p>\n<p><a href=\"https://imgchr.com/i/ri8V29\"><img data-src=\"https://s3.ax1x.com/2020/12/10/ri8V29.png\" alt=\"ri8V29.png\" /></a></p>\n</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/hongsheng<span class=\"token punctuation\">-</span>xu/hongsheng<span class=\"token punctuation\">-</span>xu.github.io.git</pre></td></tr></table></figure><p><em>Tips:  这里 type 指定为 git,branch 指定为 master, 如果你有新建分支可以提交到其他分支上，repo 里写上自己仓库的地址 &gt; 打开 github &gt; 进入自己的博客仓库 (博客名.gthub.io 这个仓库)&gt; 点击下载 code &gt; 复制地址</em></p>\n<p><a href=\"https://imgchr.com/i/ri8XdK\"><img data-src=\"https://s3.ax1x.com/2020/12/10/ri8XdK.png\" alt=\"ri8XdK.png\" /></a></p>\n<ol start=\"2\">\n<li>\n<p>在博客所在的文件夹下点击右键打开 git bash 安装 hexo-deployer-git</p>\n<p><img data-src=\"https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_11-35-31.png\" alt=\"博客文件夹\" /></p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在 bash 里输入以下代码，下载 hexo-deployer-git 依赖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</pre></td></tr></table></figure><ol start=\"3\">\n<li>接着在 bash 里，编译代码 hexo g</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr></table></figure><ol start=\"4\">\n<li>上传代码 (提交到分支) hexo d</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo d</pre></td></tr></table></figure><p><strong>以后就可以通过 https:// 仓库名.github.io/ 去访问个人博客了，例如你可以戳此访问搭建好的博客: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob25nc2hlbmcteHUuZ2l0aHViLmlv\">https://hongsheng-xu.github.io</span></strong></p>\n</blockquote>\n",
            "tags": [
                "HEXO搭建个人博客",
                "Hexo",
                "博客"
            ]
        }
    ]
}