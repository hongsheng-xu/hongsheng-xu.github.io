<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://honshen.xyz</id>
    <title>Web前端</title>
    <subtitle>=别怕路长梦远,总有星河照耀=</subtitle>
    <icon>https://honshen.xyz/images/favicon.ico</icon>
    <link href="https://honshen.xyz" />
    <author>
      <name>Hongsheng-xu</name>
    </author>
    <updated>2021-02-07T04:12:45.000Z</updated>
    <category term="web安全" />
    <category term="笔记" />
    <category term="web" />
    <category term="前端" />
    <category term="theme" />
    <category term="nodejs" />
    <category term="java" />
    <category term="markdown" />
    <category term="c" />
    <category term="c++" />
    <entry>
        <id>https://honshen.xyz/2021/02/07/Hexo/%E7%95%AA%E5%A4%96%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85(%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F)/</id>
        <title>番外篇-服务器环境安装(三种方式)</title>
        <link rel="alternate" href="https://honshen.xyz/2021/02/07/Hexo/%E7%95%AA%E5%A4%96%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85(%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F)/"/>
        <content type="html">&lt;h1 id=&#34;环境安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境安装&#34;&gt;#&lt;/a&gt; 环境安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一般有三种安装方式: rpm (jdk) 解压缩 (tomcat) yum 在线安装 (docker)&lt;/li&gt;
&lt;li&gt;rmp (以安装 jdk 为例)&lt;/li&gt;
&lt;li&gt;解压缩 (以 nodejs 为例：发布网站)&lt;/li&gt;
&lt;li&gt;yun 在线安装 (docker: 运行 docker)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;jdk安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk安装&#34;&gt;#&lt;/a&gt; JDK 安装&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查服务器是否存在 java 环境&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;java -version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果控制台输出 &lt;code&gt;-bash: java: command not found&lt;/code&gt;  表示服务器没有安装 java&lt;/p&gt;
&lt;p&gt;如果控制台输出了 java 的版本号，我们需要卸载 java, 然后重新安装&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rpm&lt;/span&gt; -qa&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; jdk &lt;span class=&#34;token comment&#34;&gt;#检查 jdk 的版本信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rpm&lt;/span&gt; -e --nodeps jdk版本号 &lt;span class=&#34;token comment&#34;&gt;#强制移除 jdk 版本号，如:rpm -e --nodeps jdk1.8-1.8.0_281-fcs.x86_64&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 JDK 的 rpm 包 :  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb3dubG9hZC5vcmFjbGUuY29tL290bi9qYXZhL2pkay84dTI4MS1iMDkvODlkNjc4ZjJiZTE2NDc4NmIyOTI1Mjc2NThjYTE2MDUvamRrLTh1MjgxLWxpbnV4LXg2NC5ycG0=&#34;&gt;https://download.oracle.com/otn/java/jdk/8u281-b09/89d678f2be164786b292527658ca1605/jdk-8u281-linux-x64.rpm&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 xftpt 上传至 /home 目录里的用户文件夹下，我这里上传到 /home/honshen 目录下，&lt;strong&gt; 注意命令:  &lt;code&gt;rpm -ivh 文件名&lt;/code&gt; &lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /home/honshen&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rpm&lt;/span&gt; -ivh jdk-8u281-linux-x64.rpm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装完成后使用命令 &lt;code&gt;java -version&lt;/code&gt;  查看版本号，如果控制台输出如下表明 java 已经安装成功&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@honshen honshen&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# java -version&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;java version &lt;span class=&#34;token string&#34;&gt;&#34;1.8.0_281&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Java&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; SE Runtime Environment &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;build &lt;span class=&#34;token number&#34;&gt;1.8&lt;/span&gt;.0_281-b09&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Java HotSpot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;-Bit Server VM &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;build &lt;span class=&#34;token number&#34;&gt;25.281&lt;/span&gt;-b09, mixed mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 java 的环境变量&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vim &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;etc&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后按键盘的 i 键表示编辑文本，在文件的最后书写环境变量，书写完成后，按 esc 键然后输入 &lt;code&gt;:wq&lt;/code&gt;  表示保存并退出&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-31_18-19-20.png&#34; alt=&#34;环境变量&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让配置文件生效&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; /etc/profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看防火墙开启了哪些端口，然后开启端口 80, 重启防火墙，如果是阿里云一定要修改安全组&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;firewall-cmd --list-ports&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;firewall-cmd --zone&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;public --add-port&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;/tcp --permanent&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl restart firewalld.service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;解压缩安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解压缩安装&#34;&gt;#&lt;/a&gt; 解压缩安装&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用命令 cd /usr/local/src 进入到用户目录下&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /usr/local/src&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这时我们就在 src 目录下，在这个目录下我们安装 nodejs (这是一个压缩包), 并解压，如果提示找不到 wget 命令，就先使用命令:  &lt;code&gt;yum install -y wget &lt;/code&gt; 去安装 wget&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tar&lt;/span&gt; xvJf node-v10.15.3-linux-x64.tar.xz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们对解压后的文件夹更名，方便我们之后建立软连接&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mv&lt;/span&gt; node-v10.15.3-linux-x64 nodejs&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立软连接&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -sf /usr/local/src/nodejs/bin/node /usr/local/bin/node&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -sf /usr/local/src/nodejs/bin/npm /usr/local/bin/npm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置环境变量&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;export PATH=/usr/local/nodejs/bin:&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; /etc/profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使环境变量生效&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; /etc/profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过查看版本号检测 nodejs 是否安装成功&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果 xshell 控制台上输出如下信息表面 nodejs 环境已经搭建好了，如果你使用的 nodejs 版本不一样那么控制台输出也不一样&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@honshen src&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# node -v&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;v15.7.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@honshen src&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# npm -v&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7.4&lt;/span&gt;.3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;yum安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yum安装&#34;&gt;#&lt;/a&gt; yum 安装&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检测 CentOs 版本，我的版本是 CentOS7, 如果版本不一样，命令也不一样，这里上 docker 官网: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==&#34;&gt;https://docs.docker.com/engine/install/centos/&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /etc/redhat-release&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除本地的 docker&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum remove docker &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-client &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-client-latest &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-common &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-latest &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-latest-logrotate &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-logrotate &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-engine&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线安装命令 &lt;code&gt;yum -y intsall 包名&lt;/code&gt; ，-y 表示所有提示都选择确定&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y yum-utils device-mapper-persistant-data lvm2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新 yum 包索引&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum makecache fast&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 docker&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum -y &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; docker-ce docker-ce-cli containerd.io&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 docker, 如果没有报错表启动成功&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl start docker&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看 docker 是否启动成功，我们执行以下命令查看 docker 进程&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -ef&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; docker&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行 helloword, 执行以下命令 docker 会去官网上 pull 一个 helloworld, 当你在控制台看到 &lt;code&gt;Hello from Docker!&lt;/code&gt;  已经成功了&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker run hello-world&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="HEXO搭建个人博客" scheme="https://honshen.xyz/categories/Hexo/" />
        <category term="Hexo" scheme="https://honshen.xyz/tags/Hexo/" />
        <category term="博客" scheme="https://honshen.xyz/tags/%E5%8D%9A%E5%AE%A2/" />
        <category term="服务器" scheme="https://honshen.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/" />
        <updated>2021-02-07T04:12:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/02/06/Docker/%E7%AC%AC6%E7%AB%A0-Docker%E8%BF%9B%E9%98%B6%E4%B9%8BDockerCompose/</id>
        <title>第6章-Docker进阶之DockerCompose</title>
        <link rel="alternate" href="https://honshen.xyz/2021/02/06/Docker/%E7%AC%AC6%E7%AB%A0-Docker%E8%BF%9B%E9%98%B6%E4%B9%8BDockerCompose/"/>
        <content type="html">&lt;h1 id=&#34;dockercompose&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dockercompose&#34;&gt;#&lt;/a&gt; DockerCompose&lt;/h1&gt;
</content>
        <category term="Docker基础及进阶" scheme="https://honshen.xyz/categories/Docker/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="服务器" scheme="https://honshen.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/" />
        <category term="docker" scheme="https://honshen.xyz/tags/docker/" />
        <updated>2021-02-06T04:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/02/04/Docker/%E7%AC%AC4%E7%AB%A0-Docker%E7%9A%84%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86/</id>
        <title>第4章-Docker的镜像原理</title>
        <link rel="alternate" href="https://honshen.xyz/2021/02/04/Docker/%E7%AC%AC4%E7%AB%A0-Docker%E7%9A%84%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86/"/>
        <content type="html">&lt;h1 id=&#34;Docker镜像原理&#34;&gt;&lt;a href=&#34;#Docker镜像原理&#34; class=&#34;headerlink&#34; title=&#34;Docker镜像原理&#34;&gt;&lt;/a&gt;Docker镜像原理&lt;/h1&gt;&lt;h2 id=&#34;联合文件系统&#34;&gt;&lt;a href=&#34;#联合文件系统&#34; class=&#34;headerlink&#34; title=&#34;联合文件系统&#34;&gt;&lt;/a&gt;联合文件系统&lt;/h2&gt;&lt;p&gt;​    UnionFS (联合文件系统）: Union文件系统( UnionFS ) 是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtualfilesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。&lt;br&gt;​    特性:一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-02_21-51-16.png&#34; alt=&#34;文件系统&#34;&gt;&lt;/p&gt;
&lt;p&gt;​    docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。&lt;br&gt;​    boots(boot fle system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是boots。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。&lt;br&gt;​    roots(rot fle system)，在bootfs之上。包含的就是典型Linux系统中的/dev,/proc, /bin, /etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如uBuntu , Centos等等。&lt;/p&gt;
&lt;h1 id=&#34;镜像层和容器层&#34;&gt;&lt;a href=&#34;#镜像层和容器层&#34; class=&#34;headerlink&#34; title=&#34;镜像层和容器层&#34;&gt;&lt;/a&gt;镜像层和容器层&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_10-04-32.png&#34; alt=&#34;理解&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_10-08-01.png&#34; alt=&#34;分层&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_10-08-22.png&#34; alt=&#34;合并&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_10-12-54.png&#34; alt=&#34;镜像层&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;commit镜像&#34;&gt;&lt;a href=&#34;#commit镜像&#34; class=&#34;headerlink&#34; title=&#34;commit镜像&#34;&gt;&lt;/a&gt;commit镜像&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;提交一个镜像&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker commit #提交容器称为一个副本
docker commit -m=&amp;quot;描述&amp;quot; -a=&amp;quot;作者&amp;quot; 容器id 镜像名:[版本] #完整的提交一个镜像
#例如:
docker commit -m=&amp;quot;add webapps app&amp;quot; -a=&amp;quot;honshen&amp;quot; 300e315adb2f tomcat01:1.0 &lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行上述命令后会生成一个tomcat01的镜像(版本号:1.0),以后我们可以直接使用修改后的镜像,这个镜像类似于虚拟机的快照&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Docker基础及进阶" scheme="https://honshen.xyz/categories/Docker/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="服务器" scheme="https://honshen.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/" />
        <category term="docker" scheme="https://honshen.xyz/tags/docker/" />
        <updated>2021-02-04T04:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/02/04/Docker/%E7%AC%AC5%E7%AB%A0-Docker%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7,File%E5%92%8C%E7%BD%91%E7%BB%9C/</id>
        <title>第5章-Docker的数据卷,File和网络</title>
        <link rel="alternate" href="https://honshen.xyz/2021/02/04/Docker/%E7%AC%AC5%E7%AB%A0-Docker%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7,File%E5%92%8C%E7%BD%91%E7%BB%9C/"/>
        <content type="html">&lt;h1 id=&#34;容器数据卷&#34;&gt;&lt;a href=&#34;#容器数据卷&#34; class=&#34;headerlink&#34; title=&#34;容器数据卷&#34;&gt;&lt;/a&gt;容器数据卷&lt;/h1&gt;&lt;h2 id=&#34;为什么需要&#34;&gt;&lt;a href=&#34;#为什么需要&#34; class=&#34;headerlink&#34; title=&#34;为什么需要?&#34;&gt;&lt;/a&gt;为什么需要?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据存放在容器中,删除容器数据丢失–&lt;strong&gt;需求: 数据的可持久化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;类似于mysql一样的数据库–&lt;strong&gt;需求: 数据存储在本地&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器之间数据共享–容器产生的数据同步到本地&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实质&#34;&gt;&lt;a href=&#34;#实质&#34; class=&#34;headerlink&#34; title=&#34;实质&#34;&gt;&lt;/a&gt;实质&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将容器内的目录挂载到linux服务器上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容器的持久化和同步操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-03_11-06-43.png&#34; alt=&#34;挂载&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;挂载数据卷&#34;&gt;&lt;a href=&#34;#挂载数据卷&#34; class=&#34;headerlink&#34; title=&#34;挂载数据卷&#34;&gt;&lt;/a&gt;挂载数据卷&lt;/h1&gt;&lt;h2 id=&#34;指定路径挂载&#34;&gt;&lt;a href=&#34;#指定路径挂载&#34; class=&#34;headerlink&#34; title=&#34;指定路径挂载&#34;&gt;&lt;/a&gt;指定路径挂载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt;的参数中加上&lt;code&gt;- v&lt;/code&gt;,如下: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -it -v 主机目录:容器目录 -p 主机端口:容器端口 容器id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如:  &lt;code&gt;docker run -it -v /home/mysql:/usr/mysql mysql /bin/bash &lt;/code&gt;,这里将容器内/usr/mysql目录挂载到服务器的/home/mysql目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;docker inspect&lt;/code&gt;查看卷是否挂载成功&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker inspect 容器id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;docker inspect 300e315adb2f&lt;/code&gt;,控制台会输出其配置文件信息,其中字段&lt;code&gt;Mounts&lt;/code&gt;中有一个对象其中记录了挂载信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;quot;Mounts&amp;quot;: [
    &amp;#123;
        &amp;quot;Type&amp;quot;: &amp;quot;bind&amp;quot;, //挂载方式为绑定
        &amp;quot;Source&amp;quot;: &amp;quot;/home/mysql&amp;quot;, //挂载的服务器目录
        &amp;quot;Destination&amp;quot;: &amp;quot;/home/msql&amp;quot;, //挂载的容器目录
        &amp;quot;Mode&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;RW&amp;quot;: &amp;quot;true&amp;quot;,
        &amp;quot;Propagation&amp;quot;: &amp;quot;private&amp;quot;
    &amp;#125;
]&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;具名挂载和匿名挂载&#34;&gt;&lt;a href=&#34;#具名挂载和匿名挂载&#34; class=&#34;headerlink&#34; title=&#34;具名挂载和匿名挂载&#34;&gt;&lt;/a&gt;具名挂载和匿名挂载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;查看卷信息&#34;&gt;&lt;a href=&#34;#查看卷信息&#34; class=&#34;headerlink&#34; title=&#34;查看卷信息&#34;&gt;&lt;/a&gt;查看卷信息&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker volume --help
Commands:
  create      Create a volume
  inspect     Display detailed information on one or more volumes
  ls          List volumes
  prune       Remove all unused local volumes
  rm          Remove one or more volumes&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;匿名挂载&#34;&gt;&lt;a href=&#34;#匿名挂载&#34; class=&#34;headerlink&#34; title=&#34;匿名挂载&#34;&gt;&lt;/a&gt;匿名挂载&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d -P --name 容器名 -v 路径 镜像&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;docker run -d -P --name nginx01 -v /ect/nginx nginx&lt;/code&gt;,这里-v的参数只写了容器的路径,没有写主机的路径,这种挂载的卷名称为hashcode&lt;/p&gt;
&lt;p&gt;你可以使用&lt;code&gt;docker volume ls&lt;/code&gt;查看本地挂载的卷,通过匿名挂载的卷名称是一串很长的hashcode,这些卷挂载于服务器的&lt;code&gt;/var/lib/docker/volumes/hashcode卷名称/_data&lt;/code&gt;路径下,一般不建议使用匿名挂载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;具名挂载&#34;&gt;&lt;a href=&#34;#具名挂载&#34; class=&#34;headerlink&#34; title=&#34;具名挂载&#34;&gt;&lt;/a&gt;具名挂载&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d -P --name 容器名 -v 卷名称:路径 镜像&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;docker run -d -P --name nginx02 -v honshen:/ect/nginx nginx&lt;/code&gt;,这里为挂载路径命名为honshen&lt;/p&gt;
&lt;p&gt;你可以使用&lt;code&gt;docker volume 卷名称&lt;/code&gt;查看具名挂载的具体路径,例如: &lt;code&gt;docker volume honshen&lt;/code&gt;可以查看到nginx02的挂载路径,一般docker的挂载路径为服务器的&lt;code&gt;/var/lib/docker/volumes/卷名称/_data&lt;/code&gt;路径下&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;修改卷权限&#34;&gt;&lt;a href=&#34;#修改卷权限&#34; class=&#34;headerlink&#34; title=&#34;修改卷权限&#34;&gt;&lt;/a&gt;修改卷权限&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在挂载时&lt;code&gt;-v 路径:ro&lt;/code&gt;表示只读或&lt;code&gt;-v 路径:rw&lt;/code&gt;表示可读可写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d -P --name 容器名 -v 卷名称:路径:ro 镜像
docker run -d -P --name 容器名 -v 卷名称:路径:rw 镜像
docker run -d -P --name 容器名 -v 服务器路径:容器路径:ro 镜像
docker run -d -P --name 容器名 -v 服务器路径:容器路径:rw 镜像&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一旦使用ro修改为只读,容器对改卷没有操作权限,该卷只能通过宿主机(服务器去修改)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;安装mysql&#34;&gt;&lt;a href=&#34;#安装mysql&#34; class=&#34;headerlink&#34; title=&#34;安装mysql&#34;&gt;&lt;/a&gt;安装mysql&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;docker下载mysql&lt;code&gt;docker pull mysql&lt;/code&gt;最新版本,这里指定下载5.7版本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull mysql:5.7&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行容器并挂载数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d -it -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=配置mysql初始密码 --name mysql01 mysql:5.7&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[root@honshen home ]# docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v/home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSwORD=123456 --name mysql01 mysql:5.7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里,我们启动mysql服务(端口是3306)并将mysql的数据和配置文件挂载到了服务器的/home/mysql下,接下来我们可以使用sqlyog远程连接mysql&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Dockerfile&#34;&gt;&lt;a href=&#34;#Dockerfile&#34; class=&#34;headerlink&#34; title=&#34;Dockerfile&#34;&gt;&lt;/a&gt;Dockerfile&lt;/h1&gt;&lt;h2 id=&#34;初识Dockerfile&#34;&gt;&lt;a href=&#34;#初识Dockerfile&#34; class=&#34;headerlink&#34; title=&#34;初识Dockerfile&#34;&gt;&lt;/a&gt;初识Dockerfile&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dockerfile是用来构建docker镜像的构建文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建dockerfile,名字可以任意但文件名为建议Dockerfile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件中命令大写!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;docker build&lt;/code&gt;执行Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;docker&#34;&gt;FROM centos
VOLUME [&amp;quot;容器挂载路径&amp;quot;,&amp;quot;容器挂载路径&amp;quot;,...]
CMD echo &amp;quot;--end--&amp;quot;
CMD [&amp;quot;/bin/bash&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这种方式挂载出来是匿名挂载,你可以使用&lt;code&gt;docker inspect 容器id&lt;/code&gt;查看镜像中的Mounts字段,这个对象里记录了卷挂载的服务器路径&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器数据卷-1&#34;&gt;&lt;a href=&#34;#容器数据卷-1&#34; class=&#34;headerlink&#34; title=&#34;容器数据卷&#34;&gt;&lt;/a&gt;容器数据卷&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实现多个容器间的数据共享&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#启动一个容器
docker run -it --name 容器名称 -v 服务器路径:容器路径 /bin/bash 容器id&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#启动第二个容器并与第一个共享数据
docker run -it --name 容器名称 --volumes-from 第一个容器名称 容器id&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;共享的文件是互相拷贝的,删除其中一个容器另一个容器的数据不会丢失,数据卷的声明周期持续到没有容器使用为止,且一旦使用同步到了本地那么数据卷将不会消失&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Dockerfile构建镜像&#34;&gt;&lt;a href=&#34;#Dockerfile构建镜像&#34; class=&#34;headerlink&#34; title=&#34;Dockerfile构建镜像&#34;&gt;&lt;/a&gt;Dockerfile构建镜像&lt;/h2&gt;&lt;h3 id=&#34;基础知识&#34;&gt;&lt;a href=&#34;#基础知识&#34; class=&#34;headerlink&#34; title=&#34;基础知识&#34;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个保留关键字(命令)都是大写,代码从上到下顺序执行执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;#表示注释,每一行的命令都会创建一个新的镜像层并提交&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img2020.cnblogs.com/blog/2030366/202006/2030366-20200630103737429-2119801149.png&#34; alt=&#34;镜像层&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命令集&#34;&gt;&lt;a href=&#34;#命令集&#34; class=&#34;headerlink&#34; title=&#34;命令集&#34;&gt;&lt;/a&gt;命令集&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;FROM&lt;/td&gt;
&lt;td&gt;基础镜像,一切从这里开始构建&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAINTAINER&lt;/td&gt;
&lt;td&gt;镜像的作者: 姓名+邮箱&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RUN&lt;/td&gt;
&lt;td&gt;docker镜像构建时执行的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ADD&lt;/td&gt;
&lt;td&gt;添加内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WORKDIR&lt;/td&gt;
&lt;td&gt;镜像的工作目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VOLUME&lt;/td&gt;
&lt;td&gt;挂载卷&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXPOSE&lt;/td&gt;
&lt;td&gt;指定暴露端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMD&lt;/td&gt;
&lt;td&gt;指定容器启动时运行的命令,只有最后一个会生效,可被替代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ENTRYPOINT&lt;/td&gt;
&lt;td&gt;指定容器启动时运行的命令,可以追加命令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;tips:CMD和ENTRYPOINT的区别: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMD:build成功后执行&lt;code&gt;docker run 镜像id&lt;/code&gt;会执行CMD的命令相当于&lt;code&gt;docker run 镜像id CMD命令&lt;/code&gt;,但是如果在&lt;code&gt;docker run 镜像id 参数&lt;/code&gt;类似于&lt;code&gt;docker run 镜像id CMD命令+参数&lt;/code&gt;会报错,如果想对CMD中的命令加参数,需要覆盖掉CMD命令,直接写&lt;code&gt;docker run 镜像id 命令+参数&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ENTRYPOINT: 执行&lt;code&gt;docker run 镜像id&lt;/code&gt;会执行ENTRYPOINT的命令相当于&lt;code&gt;docker run 镜像id ENTRYPOINT命令&lt;/code&gt;,但是如果在&lt;code&gt;docker run 镜像id 参数&lt;/code&gt;类似于&lt;code&gt;docker run 镜像id ENTRYPOINT命令+参数&lt;/code&gt;不会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ONBUILD&lt;/td&gt;
&lt;td&gt;当构建一个被继承的dockerfile,这时会运行ONBUILD指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COPY&lt;/td&gt;
&lt;td&gt;将文件拷贝到镜像中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ENV&lt;/td&gt;
&lt;td&gt;构建镜像设置环境变量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;dockerhub中很多镜像来源于一个基础镜像&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;dockerfile&#34;&gt;FROM scratch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://upload-images.jianshu.io/upload_images/6870990-744e06b25e051ac7.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp&#34; alt=&#34;dockerfile&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;制作centos&#34;&gt;&lt;a href=&#34;#制作centos&#34; class=&#34;headerlink&#34; title=&#34;制作centos&#34;&gt;&lt;/a&gt;制作centos&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;dockerfile&#34;&gt;FROM centos
MAINTAINER honshen&amp;lt;1394948572@qq.com&amp;gt;

ENV MYPATH /usr/local
WORKDIR $MYPATH

RUN yum -y install vim
RUN yum -y install net-tools

EXPOSE 80
CMD echo $MYPATH
CMD echo &amp;quot;--end--&amp;quot;
CMD /bin/bash&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;运行dockerfile&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker build -f 文件路径 -t 镜像名称:版本号 .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意命令最后有个英文字符点&lt;code&gt;.&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;查看镜像构建历史&#34;&gt;&lt;a href=&#34;#查看镜像构建历史&#34; class=&#34;headerlink&#34; title=&#34;查看镜像构建历史&#34;&gt;&lt;/a&gt;查看镜像构建历史&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker history 镜像id&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;发布镜像&#34;&gt;&lt;a href=&#34;#发布镜像&#34; class=&#34;headerlink&#34; title=&#34;发布镜像&#34;&gt;&lt;/a&gt;发布镜像&lt;/h1&gt;&lt;h2 id=&#34;发布到dockerhub&#34;&gt;&lt;a href=&#34;#发布到dockerhub&#34; class=&#34;headerlink&#34; title=&#34;发布到dockerhub&#34;&gt;&lt;/a&gt;发布到dockerhub&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dockerhub官网地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=&#34;&gt;https://hub.docker.com/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dockerhub注册地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWdpc3RyeS5odWIuZG9ja2VyLmNvbS8=&#34;&gt;https://registry.hub.docker.com/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登录到命令行登录dockerhub&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker login -u 用户名 -p 密码&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发布到dockerhub&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker push 作者/镜像名:版本号&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;docker push honshen/myCentos:1.0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;发布到阿里云镜像&#34;&gt;&lt;a href=&#34;#发布到阿里云镜像&#34; class=&#34;headerlink&#34; title=&#34;发布到阿里云镜像&#34;&gt;&lt;/a&gt;发布到阿里云镜像&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;登录阿里云控制台找到容器镜像服务其中有镜像仓库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-39-39.png&#34; alt=&#34;找到镜像仓库&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;镜像仓库下面是命名空间,首先我们创建一个命名空间–创建命名空间的按钮在网页的右上角&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-45-47.png&#34; alt=&#34;创建命名空间&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接着打开镜像仓库我们点击创建镜像仓库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-47-34.png&#34; alt=&#34;创建镜像仓库&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-47-56.png&#34; alt=&#34;仓库选择本地&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用阿里云镜像: 我们创建完仓库后点击仓库,这里有阿里云的官方操作,我们只需要复制代码即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-04_20-51-12.png&#34; alt=&#34;使用阿里云镜像&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker全流程&#34;&gt;&lt;a href=&#34;#docker全流程&#34; class=&#34;headerlink&#34; title=&#34;docker全流程&#34;&gt;&lt;/a&gt;docker全流程&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-05_11-06-40.jpg&#34; alt=&#34;全流程&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;docker网络&#34;&gt;&lt;a href=&#34;#docker网络&#34; class=&#34;headerlink&#34; title=&#34;docker网络&#34;&gt;&lt;/a&gt;docker网络&lt;/h1&gt;&lt;h2 id=&#34;理解docker0&#34;&gt;&lt;a href=&#34;#理解docker0&#34; class=&#34;headerlink&#34; title=&#34;理解docker0&#34;&gt;&lt;/a&gt;理解docker0&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取ip&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;ip addr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-05_12-34-16.png&#34; alt=&#34;地址&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原理&#34;&gt;&lt;a href=&#34;#原理&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装docker后,docker会有一个网卡docker0(桥接模式),使用evth-pair技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每启动一个docker容器,docker会给容器分配一个同网段的ip&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;容器的网卡都是一对一对的&lt;br&gt;evth-pair是一对虚拟设备的接口,成对出现,一端连接协议,一端彼此相连,相当于桥梁连接各种虚拟设备&lt;/p&gt;
&lt;p&gt;因此容器和容器之间可以互相ping通&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-05_12-52-02.png&#34; alt=&#34;原理图&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从图可知tomcat01和tomcat02通过docker0转发请求,docker0充当路由,在容器不指定网络的情况下是由docker0路由,docker0会给每个容器分配一个可用的ip保证其可以互相通信&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;–link&#34;&gt;&lt;a href=&#34;#–link&#34; class=&#34;headerlink&#34; title=&#34;–link&#34;&gt;&lt;/a&gt;–link&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;启动时命令&lt;code&gt;--link 容器名&lt;/code&gt;与另一个容器互联&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d -P --name 容器名 --link 容器名 镜像名&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;docker run -d -P --name tomcat02 --link tomcat01 tomcat&lt;/code&gt;这样将tomcat02和tomcat01联接,你可以尝试ping tomcat01 &lt;code&gt;docker exec -it tomcat02 ping tomcat01&lt;/code&gt;你可以看到来自tomcat01的数据包,但是如果tomcat01启动时没有连接tomcat02则不能反向ping tomcat01的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it 容器名 cat /etc/hosts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;docker exec -it tomcat02 cat /etc/host&lt;/code&gt;,你可以清楚的在此处看到tomcat02的hosts文件中直接将tomcat01的容器名映射到了内网地址下,但是如果你查看tomcat01的hosts文件你会发现这里没有对tomcat02的相关映射&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不建议使用–link&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自定义网络&#34;&gt;&lt;a href=&#34;#自定义网络&#34; class=&#34;headerlink&#34; title=&#34;自定义网络&#34;&gt;&lt;/a&gt;自定义网络&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;docker0不支持容器名访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络模式&#34;&gt;&lt;a href=&#34;#网络模式&#34; class=&#34;headerlink&#34; title=&#34;网络模式&#34;&gt;&lt;/a&gt;网络模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;bridge: 桥接 (docker默认,自定义网络)&lt;/li&gt;
&lt;li&gt;none: 不配置网络&lt;/li&gt;
&lt;li&gt;host: 和宿主机共享网络&lt;/li&gt;
&lt;li&gt;container: 和容器网络互联(局限很大)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器互联&#34;&gt;&lt;a href=&#34;#容器互联&#34; class=&#34;headerlink&#34; title=&#34;容器互联&#34;&gt;&lt;/a&gt;容器互联&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看docker网络配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker network ls #查看网络
docker network rm [NAME] #移除网络&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义网络&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker network create --driver bridge --subnet 子网ip --gateway 网关 网络名
docker -d -P --name 容器名 --net 网络名 镜像名 #默认使用docker0也是就--net bridge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.169.0.1 mynet&lt;/code&gt;,接着你可要使用命令&lt;code&gt;docker network ls&lt;/code&gt;查看新建的网络,这里子网最大支持192.168.0.2~192.168.255.255,你也可以使用&lt;code&gt;docker network inspect 网络名&lt;/code&gt;去查看某个网络名详细的网络配置&lt;/p&gt;
&lt;p&gt;这样自定义网络可以用于容器互联,这时即便没有使用–link也可以直接&lt;code&gt;docker exec -it tomcat02 ping tomcat01&lt;/code&gt;或者&lt;code&gt;docker exec -it tomcat01 ping tomcat02&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络连通&#34;&gt;&lt;a href=&#34;#网络连通&#34; class=&#34;headerlink&#34; title=&#34;网络连通&#34;&gt;&lt;/a&gt;网络连通&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当两个容器处于不同的网段时,直接&lt;code&gt;ping 容器名&lt;/code&gt;会报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尝试使一个容器直接连接到网络&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker network connect 网络名 容器名&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;docker network connect tomcat03 mynet&lt;/code&gt;如果tomcat03的网段与我们之前自定义的网段192.168不同我们通过这种方式使tomcat03能够访问到tomcat01和tomcat02,这时我们可以查看网络的连接配置&lt;code&gt;docker network inspect mynet&lt;/code&gt;,这时可以看到docker直接将tomcat03加入到了tomcat01和tomcat02所在的网络也就是一个容器两个ip,tomcat03拥有了两个不同网段的ip地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Docker基础及进阶" scheme="https://honshen.xyz/categories/Docker/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="服务器" scheme="https://honshen.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/" />
        <category term="docker" scheme="https://honshen.xyz/tags/docker/" />
        <updated>2021-02-04T04:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/02/03/Docker/%E7%AC%AC3%E7%AB%A0-Docker%E9%83%A8%E7%BD%B2Nginx-Tomcat-ES+Kibana%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BFportainer/</id>
        <title>第3章-Docker部署Nginx-Tomcat-ES+Kibana及可视化面板portainer</title>
        <link rel="alternate" href="https://honshen.xyz/2021/02/03/Docker/%E7%AC%AC3%E7%AB%A0-Docker%E9%83%A8%E7%BD%B2Nginx-Tomcat-ES+Kibana%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BFportainer/"/>
        <content type="html">&lt;h1 id=&#34;Docker部署Nginx-Tomcat-ES-Kibana及可视化面板portainer&#34;&gt;&lt;a href=&#34;#Docker部署Nginx-Tomcat-ES-Kibana及可视化面板portainer&#34; class=&#34;headerlink&#34; title=&#34;Docker部署Nginx-Tomcat-ES+Kibana及可视化面板portainer&#34;&gt;&lt;/a&gt;Docker部署Nginx-Tomcat-ES+Kibana及可视化面板portainer&lt;/h1&gt;&lt;h1 id=&#34;Nginx&#34;&gt;&lt;a href=&#34;#Nginx&#34; class=&#34;headerlink&#34; title=&#34;Nginx&#34;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看dockerHub上是否存在Nginx&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker search nginx&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;确认存在镜像后,下载nginx&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull nginx&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载完成后启动nginx&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name nginx01 -p 3344:80 nginx #以后台运行nginx 容器端口选择80,默认也是80映射到主机的3344端口,容器名为nginx01&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;curl localhost:3344&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-02_18-41-18.png&#34; alt=&#34;映射&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查找nginx的配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;whereis nginx&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#进入nginx文件夹,在这里你可以使用ls查看nginx的所有文件信息
cd /etc/nginx&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Tomcat&#34;&gt;&lt;a href=&#34;#Tomcat&#34; class=&#34;headerlink&#34; title=&#34;Tomcat&#34;&gt;&lt;/a&gt;Tomcat&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载Tomcat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull tomcat:9.0 #下载tomcat9.0&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动Tomcat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d -p 3355:80 --name tomcat01 tomcat&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问题:下载的tomcat能够执行linux命令少了,webapps文件夹里没有文件原因是阿里云的最小镜像,保证最小可运行环境,初始项目存在于webapps.dist目录中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;ES-Kibana&#34;&gt;&lt;a href=&#34;#ES-Kibana&#34; class=&#34;headerlink&#34; title=&#34;ES+Kibana&#34;&gt;&lt;/a&gt;ES+Kibana&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载并启动&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name elasticsearch -net somenetwork -p 9200:9200 -p 9300:9300 -e &amp;quot;discovery.type=single-node&amp;quot; elasticsearch:7.62&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问题: elasticsearch启动之后消耗大量内存造成卡顿,可以使用命令&lt;code&gt;docker stats 容器id&lt;/code&gt;查看cpu状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置内存限制启动,内存大小64m-512m之间&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &amp;quot;discovery.type=single-node&amp;quot; -e ES_JAVA_OPTS=&amp;quot;-Xms64m -Xmx512m&amp;quot; e1asticsearch:7.6.2&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Portainer可视化面板&#34;&gt;&lt;a href=&#34;#Portainer可视化面板&#34; class=&#34;headerlink&#34; title=&#34;Portainer可视化面板&#34;&gt;&lt;/a&gt;Portainer可视化面板&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载安装&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d -p 8088:9000 \
--restart=always -v/var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问通过主机ip和8088端口去访问portainer,8088端口需要你设置开放安全组&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://主机公网ip:8088&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第一次登陆portainer需要你配置一个用户及登录密码,并牢记&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Docker基础及进阶" scheme="https://honshen.xyz/categories/Docker/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="服务器" scheme="https://honshen.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/" />
        <category term="docker" scheme="https://honshen.xyz/tags/docker/" />
        <updated>2021-02-03T04:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/02/02/Docker/%E7%AC%AC2%E7%AB%A0-Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/</id>
        <title>第2章-Docker的常用命令集</title>
        <link rel="alternate" href="https://honshen.xyz/2021/02/02/Docker/%E7%AC%AC2%E7%AB%A0-Docker%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
        <content type="html">&lt;h1 id=&#34;docker的常用命令集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker的常用命令集&#34;&gt;#&lt;/a&gt; Docker 的常用命令集&lt;/h1&gt;
&lt;h1 id=&#34;镜像基本命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#镜像基本命令&#34;&gt;#&lt;/a&gt; 镜像基本命令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看本地主机上的镜像信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看本地主机上的镜像信息&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9pbWFnZXMv&#34;&gt;查看本地主机上的镜像信息&lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker images &lt;span class=&#34;token comment&#34;&gt;#查看镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;镜像信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#镜像信息&#34;&gt;#&lt;/a&gt; 镜像信息&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;REPOSITORY&lt;/th&gt;
&lt;th&gt;TAG&lt;/th&gt;
&lt;th&gt;IMAGE ID&lt;/th&gt;
&lt;th&gt;CREATED&lt;/th&gt;
&lt;th&gt;SIZE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hello-world&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;td&gt;bf756fb1ae65&lt;/td&gt;
&lt;td&gt;13 months ago&lt;/td&gt;
&lt;td&gt;13.3kB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;仓库源&lt;/td&gt;
&lt;td&gt;镜像的标签&lt;/td&gt;
&lt;td&gt;镜像的 id&lt;/td&gt;
&lt;td&gt;镜像的创建时间&lt;/td&gt;
&lt;td&gt;镜像的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;参数及作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数及作用&#34;&gt;#&lt;/a&gt; 参数及作用&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--a , -a&lt;/td&gt;
&lt;td&gt;查看所有镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--quite , -q&lt;/td&gt;
&lt;td&gt;只显示 id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;搜索镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索镜像&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=&#34;&gt;搜索镜像&lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker search 镜像 &lt;span class=&#34;token comment&#34;&gt;#搜索镜像: docker search mysql&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;亦可在 dockerHub 上搜索: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9zZWFyY2g/cT1teXNxbCZhbXA7dHlwZT1pbWFnZQ==&#34;&gt;mysql&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;参数及作用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数及作用-2&#34;&gt;#&lt;/a&gt; 参数及作用&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--filter , -f&lt;/td&gt;
&lt;td&gt;过滤信息，例如 --filter=STARS=3000 #过滤掉 stars 小于 3000 的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--quite , -q&lt;/td&gt;
&lt;td&gt;只显示 id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;下载镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载镜像&#34;&gt;#&lt;/a&gt; 下载镜像&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker pull 镜像 &lt;span class=&#34;token comment&#34;&gt;#默认下载镜像的最新版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker pull 镜像&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:tag&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#下载镜像的某个版本，该版本必须存在如: docker pull mysql:5.7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-02_10-52-46.png&#34; alt=&#34;下载镜像&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;删除镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除镜像&#34;&gt;#&lt;/a&gt; 删除镜像&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker rmi -f 镜像id或名称 &lt;span class=&#34;token comment&#34;&gt;#删除镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker rmi -f 镜像id 镜像id 镜像id &lt;span class=&#34;token comment&#34;&gt;#删除多个镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker rmi -f &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;docker images -aq&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# $(参数): 传递参数，删除所有镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;容器命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器命令&#34;&gt;#&lt;/a&gt; 容器命令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;运行镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行镜像&#34;&gt;#&lt;/a&gt; 运行镜像&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker run 镜像 &lt;span class=&#34;token comment&#34;&gt;#启动镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker run --help &lt;span class=&#34;token comment&#34;&gt;#查看 run 命令的参数列表，很多这里不一一列举&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;参数及作用&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;可选参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--name=&amp;quot;容器名称&amp;quot;&lt;/td&gt;
&lt;td&gt;为容器设置名称用于区分容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;以后台方式运行，但是会暂停运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-it&lt;/td&gt;
&lt;td&gt;使用交互方式运行: docker run -it centos /bin/bash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;指定端口，例如 -p 3344:80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-P&lt;/td&gt;
&lt;td&gt;随机指定端口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-02_11-21-13.png&#34; alt=&#34;运行镜像&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;docker 容器后台运行需要一个前台进程，docker 会停止后台应用&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看运行的镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看运行的镜像&#34;&gt;#&lt;/a&gt; 查看运行的镜像&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看当前运行的镜像&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;参数及作用&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-a&lt;/td&gt;
&lt;td&gt;列出当前运行的容器以及历史运行过的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-n = 数字&lt;/td&gt;
&lt;td&gt;显示最近创建的几个容器常用: -n=1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-q&lt;/td&gt;
&lt;td&gt;只显示容器 id 常用: docker ps -aq 列出所有容器 id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;退出容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#退出容器&#34;&gt;#&lt;/a&gt; 退出容器&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#退出并关闭容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Ctrl + P + Q &lt;span class=&#34;token comment&#34;&gt;#退出容器，但将容器放到后台继续运行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;删除容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除容器&#34;&gt;#&lt;/a&gt; 删除容器&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; 容器id &lt;span class=&#34;token comment&#34;&gt;#删除容器，该容器不能再运行中否则无法删除&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; -f 容器id &lt;span class=&#34;token comment&#34;&gt;#强制删除容器包括运行中的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; -f &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;docker &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -aq&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#强制删除全部容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -a -q&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;xargs&lt;/span&gt; docker &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#删除所有的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;启动和停止容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动和停止容器&#34;&gt;#&lt;/a&gt; 启动和停止容器&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker start 容器id &lt;span class=&#34;token comment&#34;&gt;#启动一个停止的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker restart 容器id &lt;span class=&#34;token comment&#34;&gt;#重启一个容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker stop 容器id &lt;span class=&#34;token comment&#34;&gt;#停止一个正在运行的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token function&#34;&gt;kill&lt;/span&gt; 容器id &lt;span class=&#34;token comment&#34;&gt;#强制停止一个正在运行的容器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#docker 容器后台运行需要一个前台进程，docker 会停止后台应用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;进入容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进入容器&#34;&gt;#&lt;/a&gt; 进入容器&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; -it 容器id /bin/bash &lt;span class=&#34;token comment&#34;&gt;#进入 ring 器后开启一个新的终端，能够在终端里进行操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker attach 容器id &lt;span class=&#34;token comment&#34;&gt;#进入正在运行容器的终端，不会开启新的进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看日志&#34;&gt;#&lt;/a&gt; 查看日志&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker logs -f -t --tail 数字 容器id &lt;span class=&#34;token comment&#34;&gt;#查看某个容器的多少条日志信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker logs -tf &lt;span class=&#34;token comment&#34;&gt;#查看全部日志&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程&#34;&gt;#&lt;/a&gt; 进程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看docker容器内部进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看docker容器内部进程&#34;&gt;#&lt;/a&gt; 查看 docker 容器内部进程&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token function&#34;&gt;top&lt;/span&gt; 容器id &lt;span class=&#34;token comment&#34;&gt;#查看容器的内部进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;拷贝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拷贝&#34;&gt;#&lt;/a&gt; 拷贝&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;拷贝文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拷贝文件&#34;&gt;#&lt;/a&gt; 拷贝文件&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; 容器id:容器内路径 主机路径 &lt;span class=&#34;token comment&#34;&gt;#将容器内的文件拷贝到主机，例如:docker cp abcd:/home/test.txt/home 这里将容器里 /home/test.txt 拷贝到主机的 /home 路径下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;元数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#元数据&#34;&gt;#&lt;/a&gt; 元数据&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看镜像的元数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看镜像的元数据&#34;&gt;#&lt;/a&gt; 查看镜像的元数据&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker inspect 容器id &lt;span class=&#34;token comment&#34;&gt;#查看容器的元数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;帮助命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#帮助命令&#34;&gt;#&lt;/a&gt; 帮助命令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看版本号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看版本号&#34;&gt;#&lt;/a&gt; 查看版本号&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看docker系统详细信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看docker系统详细信息&#34;&gt;#&lt;/a&gt; 查看 docker 系统详细信息&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker info&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看与docker命令有关的帮助&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看与docker命令有关的帮助&#34;&gt;#&lt;/a&gt; 查看与 docker 命令有关的帮助&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker 命令 --help &lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;查看docker的全部命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看docker的全部命令&#34;&gt;#&lt;/a&gt; 查看 docker 的全部命令&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker --help&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;这里放上docker的官网命令帮助文档&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这里放上docker的官网命令帮助文档&#34;&gt;#&lt;/a&gt; 这里放上 docker 的官网命令帮助文档&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9ydW4v&#34;&gt;https://docs.docker.com/engine/reference/run/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Docker基础及进阶" scheme="https://honshen.xyz/categories/Docker/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="服务器" scheme="https://honshen.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/" />
        <category term="docker" scheme="https://honshen.xyz/tags/docker/" />
        <updated>2021-02-02T04:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/02/01/Hexo/%E7%AC%AC4%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</id>
        <title>第4章-服务器环境搭建和博客部署</title>
        <link rel="alternate" href="https://honshen.xyz/2021/02/01/Hexo/%E7%AC%AC4%E7%AB%A0-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
        <content type="html">&lt;h1 id=&#34;第4章-服务器环境搭建和博客部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第4章-服务器环境搭建和博客部署&#34;&gt;#&lt;/a&gt; 第 4 章 - 服务器环境搭建和博客部署&lt;/h1&gt;
&lt;h1 id=&#34;连接远程服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接远程服务器&#34;&gt;#&lt;/a&gt; 连接远程服务器&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;我们通过 XShell 连接到远程服务器，&lt;strong&gt; 需要以 root 用户登录&lt;/strong&gt;，登录成功后控制台输出如下：我们需要切换到 /usr/local/src 目录下去部署 nodejs&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WARNING&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; The remote SSH server rejected X11 forwarding request.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Last login: Fri Jan &lt;span class=&#34;token number&#34;&gt;29&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;19&lt;/span&gt;:45:56 &lt;span class=&#34;token number&#34;&gt;2021&lt;/span&gt; from &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Welcome to Alibaba Cloud Elastic Compute Service &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@honshen ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;nodejs部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nodejs部署&#34;&gt;#&lt;/a&gt; nodejs 部署&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;使用命令 cd /usr/local/src 进入到用户目录下&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /usr/local/src&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这时我们就在 src 目录下，在这个目录下我们安装 nodejs (这是一个压缩包), 并解压，如果提示找不到 wget 命令，就先使用命令:  &lt;code&gt;yum install -y wget &lt;/code&gt; 去安装 wget&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tar&lt;/span&gt; xvJf node-v10.15.3-linux-x64.tar.xz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我们对解压后的文件夹更名，方便我们之后建立软连接&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mv&lt;/span&gt; node-v10.15.3-linux-x64 nodejs&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;建立软连接&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -sf /usr/local/src/nodejs/bin/node /usr/local/bin/node&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -sf /usr/local/src/nodejs/bin/npm /usr/local/bin/npm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;配置环境变量&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;export PATH=/usr/local/nodejs/bin:&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; /etc/profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使环境变量生效&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; /etc/profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过查看版本号检测 nodejs 是否安装成功&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;如果 xshell 控制台上输出如下信息表面 nodejs 环境已经搭建好了，如果你使用的 nodejs 版本不一样那么控制台输出也不一样&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@honshen src&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# node -v&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;v15.7.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@honshen src&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# npm -v&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7.4&lt;/span&gt;.3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;部署博客&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部署博客&#34;&gt;#&lt;/a&gt; 部署博客&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;我们利用 xftp 将之前搭建的个人博客上传到服务器的 /home 目录下，在此之前，我们先将博客文件复制到桌面，然后进入博客文件夹删除里面的 &lt;code&gt;node_modules&lt;/code&gt;  文件夹，这个里面存放的都是一些依赖且文件体积较大，直接上传会浪费不少时间，删除完成后我们将博客文件夹上传到服务器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_17-12-32.png&#34; alt=&#34;上传文件夹&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下来我们使用 XShell 进入到这个博客文件夹，并将之前删除的依赖重新安装，这里我们使用淘宝的镜像下载依赖怎样会快很多～&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /home/hongsheng-xu&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; registry https://registry.npm.taobao.org&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; i&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在服务器上安装 nohup 和 hexo&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; coreutils&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编辑配置，如图在环境变量后加上 usr/bin:, 编辑完后按 esc 键，然后输入:  &lt;code&gt;:wq&lt;/code&gt; , 这样就修改完成&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vi&lt;/span&gt; ~/.bash_profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-05_21-44-19.png&#34; alt=&#34;配置&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使配置生效，并检查 nohup 的版本号验证是否安装成功，同理如果控制台输出了 nohup 的版本号表明安装成功&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.bash_profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;nohup&lt;/span&gt; --version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;接下来我们安装 hexo 并且启动服务&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; hexo-cli -g&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;nohup&lt;/span&gt; hexo s -p &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;看到控制台输出如下表明成功:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@honshen hongsheng-xu&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# nohup: ignoring input and appending output to ‘nohup.out’&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;logout&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;There are stopped jobs.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里你可以通过 http:// 服务器公网 ip / 或者通过域名去查看部署的代码，举个栗子:&lt;/p&gt;
&lt;p&gt;我部署的博客空间: &lt;a href=&#34;http://honshen.xyz&#34;&gt;http://honshen.xyz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也可以通过公网 ip 访问: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzguMTMxLjYyLjQ4Lw==&#34;&gt;http://8.131.62.48/&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="HEXO搭建个人博客" scheme="https://honshen.xyz/categories/Hexo/" />
        <category term="Hexo" scheme="https://honshen.xyz/tags/Hexo/" />
        <category term="博客" scheme="https://honshen.xyz/tags/%E5%8D%9A%E5%AE%A2/" />
        <category term="服务器" scheme="https://honshen.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/" />
        <updated>2021-02-01T05:12:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/02/01/Docker/%E7%AC%AC1%E7%AB%A0-Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
        <title>第1章-Docker安装部署及阿里云加速服务的使用</title>
        <link rel="alternate" href="https://honshen.xyz/2021/02/01/Docker/%E7%AC%AC1%E7%AB%A0-Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;docker安装部署及阿里云加速服务的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker安装部署及阿里云加速服务的使用&#34;&gt;#&lt;/a&gt; Docker 安装部署及阿里云加速服务的使用&lt;/h1&gt;
&lt;h1 id=&#34;docker简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker简介&#34;&gt;#&lt;/a&gt; Docker 简介&lt;/h1&gt;
&lt;h2 id=&#34;docker官网-httpswwwdockercom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker官网-httpswwwdockercom&#34;&gt;#&lt;/a&gt; Docker 官网: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8=&#34;&gt;https://www.docker.com/&lt;/span&gt;&lt;/h2&gt;
&lt;h2 id=&#34;docker文档-httpsdocsdockercomget-startedoverview&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker文档-httpsdocsdockercomget-startedoverview&#34;&gt;#&lt;/a&gt; Docker 文档: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZ2V0LXN0YXJ0ZWQvb3ZlcnZpZXcv&#34;&gt;https://docs.docker.com/get-started/overview/&lt;/span&gt;&lt;/h2&gt;
&lt;h2 id=&#34;docker与虚拟机容器化技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker与虚拟机容器化技术&#34;&gt;#&lt;/a&gt; Docker 与虚拟机 (容器化技术)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机需要虚拟硬件，完整的操作系统，然后才能安装运行软件&lt;/li&gt;
&lt;li&gt;docker 容器内的应用直接运行在宿主机，应用 + 环境即可部署&lt;/li&gt;
&lt;li&gt;容器之间互相隔离互不影响，有独立的文件系统&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps (开发，运维): 更快的交付和部署 -- 更便捷的升级和扩容 -- 更简单的系统运维 -- 更高效的计算资源利用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker基本组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker基本组成&#34;&gt;#&lt;/a&gt; Docker 基本组成&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_19-43-37.png&#34; alt=&#34;docker基本组成&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像 (image)
&lt;ul&gt;
&lt;li&gt;类似模板，可以通过镜像创建多个容器服务 -- 最终项目运行在容器中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;容器 (container)
&lt;ul&gt;
&lt;li&gt;通过镜像创建，可以独立运行一个或一组应用，基本命令：启动，停止，删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仓库 (repository)
&lt;ul&gt;
&lt;li&gt;存放仓库的地方&lt;/li&gt;
&lt;li&gt;分为私有仓库和公有仓库，默认源为国外需要配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;docker安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker安装&#34;&gt;#&lt;/a&gt; Docker 安装&lt;/h1&gt;
&lt;h2 id=&#34;环境准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境准备&#34;&gt;#&lt;/a&gt; 环境准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux 服务器 CentOS7, 你可以使用命令 &lt;code&gt;cat /etc/os-release&lt;/code&gt;  来查看当前系统的版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XShell 进行远程连接，使用 &lt;code&gt;uname -r&lt;/code&gt;  查看系统内核，控制台输出 &lt;code&gt;3.10.0-514.26.2.el7.x86_64&lt;/code&gt; , 需要系统内核是 &lt;code&gt;3.10&lt;/code&gt;  及以上的环境&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;uname&lt;/span&gt; -r&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里放上一篇 Docker 在 linux 的安装官方文档: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv&#34;&gt;https://docs.docker.com/engine/install/&lt;/span&gt;, 你亦可在 docker 官网找到其他操作系统的安装，这里放上其他操作系统的安装文档: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZ2V0LWRvY2tlci8=&#34;&gt;https://docs.docker.com/get-docker/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装docker引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装docker引擎&#34;&gt;#&lt;/a&gt; 安装 Docker 引擎&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;移除本地的 docker&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum remove docker &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-client &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-client-latest &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-common &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-latest &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-latest-logrotate &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-logrotate &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           docker-engine&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线安装：命令 &lt;code&gt;yum -y intsall 包名&lt;/code&gt; ，-y 表示所有提示都选择确定，这里我们不使用官方推荐的镜像，我们选择阿里云镜像，这样的下载速度更快&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y yum-utils device-mapper-persistant-data lvm2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新：使用命令更新 yum 包索引&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum makecache fast&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装: docker 在线安装&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum -y &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; docker-ce docker-ce-cli containerd.io&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看：安装完成后，我们可以使用命令去查看 docker 是否安装成功，当控制台输出 docker 版本后表面安装成功&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动：使用命令启动 docker, 如果没有报错表启动成功&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl start docker&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试：运行 helloword, 执行以下命令 docker 会去官网上 pull 一个 helloworld, 当你在控制台看到 &lt;code&gt;Hello from Docker!&lt;/code&gt;  已经成功了&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker run hello-world&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_16-50-19.png&#34; alt=&#34;拉取hello-word&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;镜像：使用命令 &lt;code&gt;docker images&lt;/code&gt;  查看下载的 hello-word 镜像&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;docker images&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;控制台输出，其中有一个是项目是 hello-word, 它是 docker 从远程仓库 pull 来的:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@honshen ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# docker images&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;REPOSITORY    TAG       IMAGE ID       CREATED         SIZE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hello-world   latest    bf756fb1ae65   &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt; months ago   &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;.3kB&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卸载: (1) 卸载依赖 (2) 删除资源:  &lt;code&gt;/var/lib/docker&lt;/code&gt; docker 的默认工作路径&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1、卸载依赖&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum remove docker-ce docker-ce-cli containerd.io&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#2、删除资源&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; -rf /var/lib/docker&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;阿里云镜像加速&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿里云镜像加速&#34;&gt;#&lt;/a&gt; 阿里云镜像加速&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;阿里云: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8=&#34;&gt;https://www.aliyun.com/&lt;/span&gt;  需要先登录，然后进入到控制台，在产品与服务里选择容器镜像服务，如果你是第一次使用需要按照阿里云的引导设置一个登陆密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_17-01-08.png&#34; alt=&#34;镜像服务&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在阿里云的镜像中心找到镜像加速器，复制里面的加速器地址即可这是免费的，&lt;strong&gt; 注：每一个账号的加速地址都不一样！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_17-11-44.png&#34; alt=&#34;镜像加速地址&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_17-15-07.png&#34; alt=&#34;操作文档&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置使用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个 docker 的配置目录，&lt;strong&gt; 如果你加上 sudo 报错了且是 root 用户可以执行以下命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; -p /etc/docker&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tee&lt;/span&gt; /etc/docker/daemon.json &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;EOF&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#34;registry-mirrors&#34;&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;个人加速地址&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  EOF&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启服务&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl daemon-reload&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启 docker&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl restart docker&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此阿里云镜像已经配置完毕&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;docker底层原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker底层原理&#34;&gt;#&lt;/a&gt; Docker 底层原理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker 运行时流程图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_18-35-40.png&#34; alt=&#34;docker运行时流程图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker 是一个 client-server 结构的系统，docker 的守护进程运行在主机上，通过 Socket 从客户端访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dockerServer 接收 dockerClient 的指令并执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_18-43-17.png&#34; alt=&#34;docker运行时&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么 docker 比虚拟机快？&lt;/p&gt;
&lt;p&gt;下图可以说明:&lt;/p&gt;
&lt;p&gt;​	(1) docker 比虚拟机有更少的抽象层&lt;/p&gt;
&lt;p&gt;​	(2) docker 使用宿主机的内核&lt;/p&gt;
&lt;p&gt;当新建容器时，docker 不需要像虚拟机一样加载内核 CentOS (分钟), 直接利用宿主机的操作系统 (秒), 避免引导&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://ucc.alicdn.com/pic/developer-ecology/f70eb5d1e0594c9694080ab0a17a1e99.png&#34; alt=&#34;docker比虚拟快&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-02-01_19-26-37.png&#34; alt=&#34;docker比虚拟机快&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Docker基础及进阶" scheme="https://honshen.xyz/categories/Docker/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="docker" scheme="https://honshen.xyz/tags/docker/" />
        <updated>2021-02-01T04:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/01/31/Hexo/%E7%AC%AC3%E7%AB%A0-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8(%E5%9F%BA%E4%BA%8ECentOS7)/</id>
        <title>第3章-Linux服务器的使用(基于CentOS7)</title>
        <link rel="alternate" href="https://honshen.xyz/2021/01/31/Hexo/%E7%AC%AC3%E7%AB%A0-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8(%E5%9F%BA%E4%BA%8ECentOS7)/"/>
        <content type="html">&lt;h1 id=&#34;linux服务器的使用基于centos7-配合阿里云&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux服务器的使用基于centos7-配合阿里云&#34;&gt;#&lt;/a&gt; Linux 服务器的使用 (基于 centOS7)-- 配合阿里云&lt;/h1&gt;
&lt;h1 id=&#34;xshell和xftp的下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xshell和xftp的下载&#34;&gt;#&lt;/a&gt; XShell 和 Xftp 的下载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;XShell 官网下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94c2hlbGwuZW4uc29mdG9uaWMuY29tLw==&#34;&gt;https://xshell.en.softonic.com/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Xftp 官网下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS96aC94ZnRwLw==&#34;&gt;https://www.netsarang.com/zh/xftp/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;xshell登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xshell登录&#34;&gt;#&lt;/a&gt; XShell 登录&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建远程连接，点击右上角新建按钮&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-29-30.png&#34; alt=&#34;新建远程连接&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在弹出的新建窗口中，输入自已服务器的名称 (可以是任意名称), 然后选择协议，一般云服务器的协议是 SSH, 公网 IP 可以去阿里云找到服务器的实例查看这里以阿里云轻量服务器为例，填入服务器 ip 后可以点击连接，如果你没有服务器，可以在阿里云或者腾讯云，百度云选购一台，一般来说学生服务器大概在 100~200yuan 一年:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-51-25.png&#34; alt=&#34;寻找公网ip&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-34-56.png&#34; alt=&#34;新建会话&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接服务器，先修改服务器密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-58-56.png&#34; alt=&#34;修改密码&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回到 XShell 链接服务器，选择接受来自服务器的 ssh 秘钥&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-56-25.png&#34; alt=&#34;登录名为root&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_17-57-57.png&#34; alt=&#34;输入密码&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XShell 控制台输出如下表明连接成功&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Welcome to Alibaba Cloud Elastic Compute Service &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@iz2zeg6qs3stnlr0awniwwz ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;xftp使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xftp使用&#34;&gt;#&lt;/a&gt; xftp 使用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;点击 xshell 上方的图标进入 xftp, 或者直接进入 xftp, 打开后如下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_18-09-40.png&#34; alt=&#34;打开zftp&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_18-14-43.png&#34; alt=&#34;打开xftp&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;服务器文件信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务器文件信息&#34;&gt;#&lt;/a&gt; 服务器文件信息&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-29_12-48-03.png&#34; alt=&#34;服务器文件&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-29_13-00-34.png&#34; alt=&#34;绪&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;xshell命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xshell命令&#34;&gt;#&lt;/a&gt; XShell 命令&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;linux 中没有错误就代表操作成功&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;清屏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清屏&#34;&gt;#&lt;/a&gt; 清屏&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shelll&#34;&gt;clear
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;关机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关机&#34;&gt;#&lt;/a&gt; 关机&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sync&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 将数据由内存同步到硬盘中。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#关机指令，你可以 man shutdown 来看一下帮助文档。例如你可以运行如下命令关机:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt; -h &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#这个命令告诉大家，计算机将在 10 分钟后关机&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt; -h now &lt;span class=&#34;token comment&#34;&gt;#立马关机&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt; -h &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;:25 &lt;span class=&#34;token comment&#34;&gt;#系统会在今天 20:25 关机&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt; -h +10 &lt;span class=&#34;token comment&#34;&gt;# 十分钟后关机&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt; -r now &lt;span class=&#34;token comment&#34;&gt;#系统立马重启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;shutdown&lt;/span&gt; -r +10 &lt;span class=&#34;token comment&#34;&gt;# 系统十分钟后重启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;reboot&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#就是重启，等同于 shutdown -r now&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;halt&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#关闭系统，等同于 shutdown -h now 和 poweroff&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;文件列表查看&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件列表查看&#34;&gt;#&lt;/a&gt; 文件列表查看&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看当前目录下的文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -a 参数表示查看全部的文件，包含隐藏文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -l 参数列出全部的文件包含文件属性和权限，没有隐藏文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#Linux 命令可以组合使用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; / &lt;span class=&#34;token comment&#34;&gt;#查看根目录下的文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; -ll &lt;span class=&#34;token comment&#34;&gt;#列表查看当前目录下的文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; -al &lt;span class=&#34;token comment&#34;&gt;#列表查看全部文件 (含隐藏文件)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;文件属性，通过 ls -al 列出文件的属性&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-29_15-48-46.png&#34; alt=&#34;文件权限&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件类型&lt;/th&gt;
&lt;th&gt;属主权限&lt;/th&gt;
&lt;th&gt;属组权限&lt;/th&gt;
&lt;th&gt;其他用户权限&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;d: 目录文件&lt;/td&gt;
&lt;td&gt;r (读) w (写) x (执行)&lt;/td&gt;
&lt;td&gt;r (读) w (写) x (执行)&lt;/td&gt;
&lt;td&gt;r (读) w (写) x (执行)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l: 链接文件&lt;/td&gt;
&lt;td&gt;rwx (可读写执行)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-: 文件&lt;/td&gt;
&lt;td&gt;---(不可读写执行)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b: 随机存储设备&lt;/td&gt;
&lt;td&gt;r-x (可读执行)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c: 一次性读取装置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;修改文件属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改文件属性&#34;&gt;#&lt;/a&gt; 修改文件属性&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;chgrp&lt;/span&gt; -R 属组名 文件名/文件夹名 &lt;span class=&#34;token comment&#34;&gt;# chgrp -R root www 将 www 属组改为 root&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;chown&lt;/span&gt; -R 属主名 文件名/文件夹名 &lt;span class=&#34;token comment&#34;&gt;# chown -R root www 将 www 属主改为 root&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; -R xyz 文件/文件名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r:4 w:2 x:1 -:0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;属主: &lt;span class=&#34;token assign-left variable&#34;&gt;rwx&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;+2+1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;属组: &lt;span class=&#34;token assign-left variable&#34;&gt;rwx&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;其他用户 ---&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;777&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#将一个文件属性修改为可读可写可执行，对所有用户有效赋予最高权限&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;文件内容查看&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件内容查看&#34;&gt;#&lt;/a&gt; 文件内容查看&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#从第一行开始显示&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tac&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#从最后一行倒着显示&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;nl&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#显示时输出行号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;more&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#一页一页的显示，空格键翻页，enter 向下翻一行，q 键退出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;less&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#比 more 更好，能往前翻页，键盘的上下键代表翻页，enter 翻一行，到文件结束按下 q 键退出，输入字符 / 字符串查找 / 后的字符串在文件中的所有位置 (向下查询), 使用？字符串向下查找，例: /set (查找此页及后的所有 set) ?set (查找此页及前的 set 字符) n 表示查找下一个，N 表示查找上一个&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;head&lt;/span&gt; -n &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#只看头 20 行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tail&lt;/span&gt; -n &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#只看尾 20 行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;man&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;命令&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#man cp 查看 cp 的使用文档&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#cat /etc/passwd 账号密码信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#cat /etc/shadow 密码信息都是经过加密的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-29_19-06-20.png&#34; alt=&#34;密码&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;切换目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切换目录&#34;&gt;#&lt;/a&gt; 切换目录&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; 文件夹名 &lt;span class=&#34;token comment&#34;&gt;#进入文件夹:cd usr&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; 绝对路径 &lt;span class=&#34;token comment&#34;&gt;#切换到该路径:cd /usr/local/src, 其中:cd / 切换到根目录，cd ~ 切换到 /root&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; 相对路径 &lt;span class=&#34;token comment&#34;&gt;#切到该路径下的目录: cd ./usr/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#返回上一级&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;/&lt;span class=&#34;token comment&#34;&gt;#返回上一级目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;pwd&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 查看当前目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;删除文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除文件&#34;&gt;#&lt;/a&gt; 删除文件&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#删除文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-f 忽略不存在的文件,不会出现警告强制删除&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-r 递归删除目录&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; -rf / &lt;span class=&#34;token comment&#34;&gt;#删库跑路！&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; -rf 文件夹 &lt;span class=&#34;token comment&#34;&gt;#删除文件夹下的所有文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rmdir&lt;/span&gt; 文件夹 &lt;span class=&#34;token comment&#34;&gt;#删除为空的文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rmdir&lt;/span&gt; -p 文件夹 &lt;span class=&#34;token comment&#34;&gt;#删除文件夹包含里面的内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;创建文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建文件&#34;&gt;#&lt;/a&gt; 创建文件&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; 文件夹名 &lt;span class=&#34;token comment&#34;&gt;#创建文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; 文件夹1/文件夹2/文件夹3 &lt;span class=&#34;token comment&#34;&gt;#在当前目录下创建文件夹 1, 文件夹 1 下创建文件夹 2, 文件夹 2 下创建文件夹 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;复制文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复制文件&#34;&gt;#&lt;/a&gt; 复制文件&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; 文件路径1/文件名 文件路径2 &lt;span class=&#34;token comment&#34;&gt;#将文件从文件路径 1 拷贝到文件路径 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;移动文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移动文件&#34;&gt;#&lt;/a&gt; 移动文件&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mv&lt;/span&gt; 文件夹或文件名 文件路径 &lt;span class=&#34;token comment&#34;&gt;#将文件夹或文件移动到另一个文件路径下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mv&lt;/span&gt; 文件夹1或文件名1 文件夹2或文件名2 &lt;span class=&#34;token comment&#34;&gt;#将文件夹或文件名更名 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-f 强制移动&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-u 只替换更新的文件夹&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络&#34;&gt;#&lt;/a&gt; 网络&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#centOS7 中网络配置文件在 cd/etc/sysconfig/network-scripts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ifconfig&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看网络配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ping&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#ping 一个网址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;主机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主机&#34;&gt;#&lt;/a&gt; 主机&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看主句名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; 名称 &lt;span class=&#34;token comment&#34;&gt;#修改名称，重启后生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;修改环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改环境变量&#34;&gt;#&lt;/a&gt; 修改环境变量&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vi&lt;/span&gt; /etc/profile &lt;span class=&#34;token comment&#34;&gt;#修改全局环境变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:w &lt;span class=&#34;token comment&#34;&gt;#保存修改的环境变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:q &lt;span class=&#34;token comment&#34;&gt;#退出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:wq &lt;span class=&#34;token comment&#34;&gt;# 保存环境变量并退出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;硬链接和软链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬链接和软链接&#34;&gt;#&lt;/a&gt; 硬链接和软链接&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; 文件路径1 文件路径2 &lt;span class=&#34;token comment&#34;&gt;#创建软链接 (符号链接)-- 删除源文件链接失效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -s 文件路径1 文件路径2 &lt;span class=&#34;token comment&#34;&gt;#创建硬链接 -- 删除源文件链接依然有效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;touch&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#创建文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;字符串&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; 文件名 &lt;span class=&#34;token comment&#34;&gt;#向文件写入字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;vim编辑器简略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vim编辑器简略&#34;&gt;#&lt;/a&gt; vim 编辑器 (简略)&lt;/h2&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWFnZXMwLmNuYmxvZ3MuY29tL2Jsb2cyMDE1LzUxNTY4NC8yMDE1MDMvMjcxNzE1NTUwMDU2NzU2LmpwZw==&#34;&gt;https://images0.cnblogs.com/blog2015/515684/201503/271715550056756.jpg&lt;/span&gt;&amp;quot; alt=&amp;quot;vim&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; 文件名/路径下的文件 &lt;span class=&#34;token comment&#34;&gt;#如果文件不存在新建文件并编辑，如果存在则直接编辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#按下 i 进入编辑模式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#按下：进入底线命令模式，如果是在编辑模式下要先按 esc&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#编辑命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;数字&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;space&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输入数字后按下空格光标移动 n 个位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;数字&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;enter&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输入数字后按下回车光标移动 n 行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;或者home键 &lt;span class=&#34;token comment&#34;&gt;#回到文件开头&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$或者end键 &lt;span class=&#34;token comment&#34;&gt;#回到文件末尾&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;u &lt;span class=&#34;token comment&#34;&gt;#复原前一个动作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#底线命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:w &lt;span class=&#34;token comment&#34;&gt;#保存修改的文件变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:q &lt;span class=&#34;token comment&#34;&gt;#退出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:wq &lt;span class=&#34;token comment&#34;&gt;#保存文件并退出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:wq&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#强制保存并退出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:set nu &lt;span class=&#34;token comment&#34;&gt;#设置行号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:set nonu &lt;span class=&#34;token comment&#34;&gt;#取消设置行号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#ctrl+z 退出 vim&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;账号管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#账号管理&#34;&gt;#&lt;/a&gt; 账号管理&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;useradd&lt;/span&gt; -m 用户名 &lt;span class=&#34;token comment&#34;&gt;#自动创建该用户的主目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-c &lt;span class=&#34;token string&#34;&gt;&#34;描述&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#指定一段描述&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-d &lt;span class=&#34;token comment&#34;&gt;#指定用户主目录，如果主目录不存在需要使用 - m&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-g &lt;span class=&#34;token comment&#34;&gt;#指定用户组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-G &lt;span class=&#34;token comment&#34;&gt;#指定用户的附加组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-m &lt;span class=&#34;token comment&#34;&gt;#使用者目录不在则自动创建&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-s Shell文件 &lt;span class=&#34;token comment&#34;&gt;#指定用户登录的 shell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-u &lt;span class=&#34;token comment&#34;&gt;#指定用户的用户号如果有 - o 选项可以重复使用其他用户的标识号&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;userdel&lt;/span&gt; -r 用户名 &lt;span class=&#34;token comment&#34;&gt;#删除用户及其目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-r &lt;span class=&#34;token comment&#34;&gt;#清空目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;usermod&lt;/span&gt; 对应修改内容 用户名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;usermod&lt;/span&gt; -d /home/xu honshen &lt;span class=&#34;token comment&#34;&gt;#将 honshen 用户的目录 honshen 修改为 xu&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;su&lt;/span&gt; 用户名 &lt;span class=&#34;token comment&#34;&gt;#切换用户，su - 用户名 切换到用户且到用户目录下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;password 用户名 &lt;span class=&#34;token comment&#34;&gt;#通过 root 创建账户后修改账户密码，Linux 输入密码是不会显示的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;password &lt;span class=&#34;token comment&#34;&gt;#修改自己账户的密码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;password -l 用户名 &lt;span class=&#34;token comment&#34;&gt;#锁定一个用户不能登录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;password -u 用户名 &lt;span class=&#34;token comment&#34;&gt;#解锁一个用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;password -d 用户名 &lt;span class=&#34;token comment&#34;&gt;#清除密码，清除后不能登录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;用户组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户组&#34;&gt;#&lt;/a&gt; 用户组&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#用户组的增删改查是对 /etc/group 文件的更新&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;groupadd&lt;/span&gt; 用户组名 &lt;span class=&#34;token comment&#34;&gt;#添加一个用户组，id 从 1000 开始&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;groupadd&lt;/span&gt; -d  &lt;span class=&#34;token number&#34;&gt;1003&lt;/span&gt; 用户组名 &lt;span class=&#34;token comment&#34;&gt;#添加一个用户组，id 为 1003&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;groupdel&lt;/span&gt; 用户组名 &lt;span class=&#34;token comment&#34;&gt;#删除一个用户组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;groupmod&lt;/span&gt; -g id名 -n 新用户组名 用户组 &lt;span class=&#34;token comment&#34;&gt;#给一个用户组更名更 id&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ newgrp root &lt;span class=&#34;token comment&#34;&gt;#登录当前用户切换到 root 组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;磁盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘&#34;&gt;#&lt;/a&gt; 磁盘&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#列出文件整体使用量 (以字节为单位)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;df&lt;/span&gt; -h &lt;span class=&#34;token comment&#34;&gt;#列出文件整体使用量 (以 M 为单位)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;du&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#检查磁盘空间使用量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;du&lt;/span&gt; -a &lt;span class=&#34;token comment&#34;&gt;#检查磁盘及子文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;du&lt;/span&gt; -sm  /* &lt;span class=&#34;token comment&#34;&gt;#检查根目录下的文件占用的容量，一般 /usr 占用资源最大&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;外部设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部设备&#34;&gt;#&lt;/a&gt; 外部设备&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt; /dev/xu /mnt/xu &lt;span class=&#34;token comment&#34;&gt;#将名为 xu 的 u 盘挂载到 mnt 目录下，来实现访问 u 盘&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;umount&lt;/span&gt; -f 挂载位置&lt;span class=&#34;token comment&#34;&gt;#强制卸载 u 盘&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程&#34;&gt;#&lt;/a&gt; 进程&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看当前系统进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -help &lt;span class=&#34;token comment&#34;&gt;#查看命令的帮助&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-a &lt;span class=&#34;token comment&#34;&gt;#显示所有进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-u &lt;span class=&#34;token comment&#34;&gt;#i&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-x &lt;span class=&#34;token comment&#34;&gt;#显示后台进程的参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查找文件中符合条件的字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# | 是管道符 A|B 将 A 的结果拿给 B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -aux&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; nodejs &lt;span class=&#34;token comment&#34;&gt;#查看所有 nodejs 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -ef&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; mysql &lt;span class=&#34;token comment&#34;&gt;#查看 mysql 的父进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pstree -pu &lt;span class=&#34;token comment&#34;&gt;#以目录结构查看进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -ef &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token environment constant&#34;&gt;$USER&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看用户进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -aux&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; 进程&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;print &lt;span class=&#34;token variable&#34;&gt;$2&lt;/span&gt;&amp;#125;&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看进程号，如:ps -aux|grep nodejs|awk &#39;&amp;#123;print $2&amp;#125;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;kill&lt;/span&gt; -9 &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -aux&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; 进程&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;print &lt;span class=&#34;token variable&#34;&gt;$2&lt;/span&gt;&amp;#125;&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#杀掉指定进程如: kill -9 `ps -aux|grep hexo|awk &#39;&amp;#123;print $2&amp;#125;&#39;`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-p -u &lt;span class=&#34;token comment&#34;&gt;#-p 显示父 id -u 显示用户组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;kill&lt;/span&gt; -9 进程id &lt;span class=&#34;token comment&#34;&gt;#强制结束进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防火墙&#34;&gt;#&lt;/a&gt; 防火墙&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#查看 firewall 服务状态 systemctl status firewalld&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#开启、重启、关闭、firewalld.service 服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;service&lt;/span&gt; firewalld start&lt;span class=&#34;token comment&#34;&gt;#开启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;service&lt;/span&gt; firewalld restart&lt;span class=&#34;token comment&#34;&gt;#重启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;service&lt;/span&gt; firewalld stop&lt;span class=&#34;token comment&#34;&gt;#关闭&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查看防火墙规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;firewall-cmd --list-all&lt;span class=&#34;token comment&#34;&gt;#查看全部信息 firewall-cmd --list-ports# 只看端口信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#开启端口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;开端口命令:firewall-cmd --zone&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;public --add-port&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;/tcp --permanent&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;重启防火墙:systemctl restart firewalld.service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;命令含义:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--zone &lt;span class=&#34;token comment&#34;&gt;#作用域&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--add-port&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;/tcp &lt;span class=&#34;token comment&#34;&gt;#添加端口，格式为：端口 / 通讯协议&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--permanent&lt;span class=&#34;token comment&#34;&gt;#永久生效，没有此参数重启后失效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;nohup挂载后台进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nohup挂载后台进程&#34;&gt;#&lt;/a&gt; nohup 挂载后台进程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用命令 &lt;code&gt;onhup command [args...] &amp;amp;&lt;/code&gt;  挂载后台进程，接着使用 exit 断开与服务器的连接，终端会忽略收到 HUP（hangup）信号从而不关闭其所有子进程～如下:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;onhup hexo s -p &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;jobs -l&lt;/code&gt;  或 &lt;code&gt;ps -ef&lt;/code&gt;  查看后台进程，例如我们查看 nojs 进程并输出其进程 Id&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; -aux&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; nodejs&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;print &lt;span class=&#34;token variable&#34;&gt;$2&lt;/span&gt;&amp;#125;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拿到进程号以后，我们使用 &lt;code&gt;fg jubNumber&lt;/code&gt;  将该进程调至前台，并可以直接终结该进程&lt;/p&gt;
&lt;p&gt;我们也可以使用 &lt;code&gt;Ctrl+z&lt;/code&gt;  来将一个前台命令放到后台并暂停执行&lt;/p&gt;
&lt;p&gt;接着我们使用 &lt;code&gt;bg jobNumber&lt;/code&gt;  来将一个后台暂停的命令继续&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# nohup hexo s -p 80 &amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3032&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# nohup: ignoring input and appending output to ‘nohup.out’&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# jobs&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;+  Running                 &lt;span class=&#34;token function&#34;&gt;nohup&lt;/span&gt; hexo s -p &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# fg 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;nohup&lt;/span&gt; hexo s -p &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;^Z&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;+  Stopped                 &lt;span class=&#34;token function&#34;&gt;nohup&lt;/span&gt; hexo s -p &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# bg 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;+ &lt;span class=&#34;token function&#34;&gt;nohup&lt;/span&gt; hexo s -p &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@iz2zeg6qs3stnlr0awniwwz hongsheng-xu&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果后台进程挂载失败，使用 &lt;code&gt;lsof -i:端口号&lt;/code&gt; 去查看端口的进程，使用 &lt;code&gt;nestat&lt;/code&gt;  去查看其占用的端口&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;losf -i:80&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;netstat&lt;/span&gt; -ap&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接着使用 &lt;code&gt;kill -9 进程号&lt;/code&gt; 去终结该进程的运行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="HEXO搭建个人博客" scheme="https://honshen.xyz/categories/Hexo/" />
        <category term="linux" scheme="https://honshen.xyz/tags/linux/" />
        <category term="服务器" scheme="https://honshen.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/" />
        <updated>2021-01-31T05:12:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/01/31/Hexo/%E7%AC%AC2%E7%AB%A0-%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96Hexo%E4%B8%BB%E9%A2%98shkoa%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
        <title>第2章-博客的美化Hexo主题shkoa的配置</title>
        <link rel="alternate" href="https://honshen.xyz/2021/01/31/Hexo/%E7%AC%AC2%E7%AB%A0-%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96Hexo%E4%B8%BB%E9%A2%98shkoa%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
        <content type="html">&lt;h1 id=&#34;第2章-博客的美化Hexo主题shoka的配置&#34;&gt;&lt;a href=&#34;#第2章-博客的美化Hexo主题shoka的配置&#34; class=&#34;headerlink&#34; title=&#34;第2章-博客的美化Hexo主题shoka的配置&#34;&gt;&lt;/a&gt;第2章-博客的美化Hexo主题shoka的配置&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;引言: 我们已经初始化个人博客并将代码发布至github,如果不懂可以查阅: &lt;a href=&#34;/2020/12/13/Hexo/%E7%AC%AC1%E7%AB%A0-%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8BHEXO%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96/&#34;&gt;第1章-零基础使用HEXO搭建个人博客之HEXO及其初始化&lt;/a&gt;,接下来我们需要对个人博客进行美化~&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载依赖&#34;&gt;&lt;a href=&#34;#下载依赖&#34; class=&#34;headerlink&#34; title=&#34;下载依赖&#34;&gt;&lt;/a&gt;下载依赖&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;首先我们进入自己博客所在的文件夹里,在此处打开Git bash,然后使用npm下载依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_11-35-31.png&#34; alt=&#34;打开gitbash&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt; npm i hexo-renderer-multi-markdown-it --save
 npm i hexo-autoprefixer --save
 npm i  hexo-algolia --save
 npm i hexo-algoliasearch --save
 npm i hexo-symbols-count-time --save
 npm i hexo-feed --save&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 接着,我们在bash里去下载shoka这一款主题,由于代码存放于github所以下载主题的时间可能会很长,请耐心等待喔…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 下载成功后,我们可以看到多了一个shoka的文件夹&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_12-27-22.png&#34; alt=&#34;文件&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;修改配置文件&#34;&gt;&lt;a href=&#34;#修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;修改配置文件&#34;&gt;&lt;/a&gt;修改配置文件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这里推荐几篇shoka作者的博客&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本配置: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv&#34;&gt;https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;页面配置: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==&#34;&gt;https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;依赖插件: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kZXBlbmRlbnRzLw==&#34;&gt;https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/dependents/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们打开shoka文件夹,找到里面_config.yml文件,这个文件是主题配置文件,使用vscode打开编辑配置如图,vscode下载地址: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v&#34;&gt;https://code.visualstudio.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_13-46-23.png&#34; alt=&#34;主题配置文件&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_14-27-20.png&#34; alt=&#34;配置2&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_14-48-59.png&#34; alt=&#34;配置3&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==&#34;&gt;点击此处了解如何获取AppID和Appkey&lt;/span&gt;&lt;br&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-06-43.png&#34; alt=&#34;配置4&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;接下来我们修改全局配置文件_config.yml&lt;strong&gt;注意这个文件名和主题的文件名是一样的别修改错文件了&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-27-23.png&#34; alt=&#34;全局配置1&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-39-09.png&#34; alt=&#34;全局配置2&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-41-43.png&#34; alt=&#34;全局配置3&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这些代码直接复制粘贴到全局配置文件即可这里会使用到搜索功能因此需要appId和apikey,这里有一篇博客能够帮助大家获取到appId和apikey: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDc5NDY4L2FydGljbGUvZGV0YWlscy8xMDczMzU2NjM=&#34;&gt;为Hexo增加algolia搜索功能&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;# edit for Theme.shoka
autoprefixer:
  exclude:
    - &amp;#39;*.min.css&amp;#39;

markdown:
  render: # 渲染器设置
    html: false # 过滤 HTML 标签
    xhtmlOut: true # 使用 &amp;#39;/&amp;#39; 来闭合单标签 （比如 &amp;lt;br /&amp;gt;）。
    breaks: true # 转换段落里的 &amp;#39;\n&amp;#39; 到 &amp;lt;br&amp;gt;。
    linkify: true # 将类似 URL 的文本自动转换为链接。
    typographer:
    quotes: &amp;#39;“”‘’&amp;#39;
  plugins: # markdown-it插件设置
    - plugin:
        name: markdown-it-toc-and-anchor
        enable: true
        options: # 文章目录以及锚点应用的class名称，shoka主题必须设置成这样
          tocClassName: &amp;#39;toc&amp;#39;
          anchorClassName: &amp;#39;anchor&amp;#39;
    - plugin:
        name: markdown-it-multimd-table
        enable: true
        options:
          multiline: true
          rowspan: true
          headerless: true
    - plugin:
        name: ./markdown-it-furigana
        enable: true
        options:
          fallbackParens: &amp;quot;()&amp;quot;
    - plugin:
        name: ./markdown-it-spoiler
        enable: true
        options:
          title: &amp;quot;你知道得太多了&amp;quot;

minify:
  html:
    enable: true
    stamp: false
    exclude:
      - &amp;#39;**/json.ejs&amp;#39;
      - &amp;#39;**/atom.ejs&amp;#39;
      - &amp;#39;**/rss.ejs&amp;#39;
  css:
    enable: true
    stamp: false
    exclude:
      - &amp;#39;**/*.min.css&amp;#39;
  js:
    enable: true
    stamp: false
    mangle:
      toplevel: true
    output:
    compress:
    exclude:
      - &amp;#39;**/*.min.js&amp;#39;

algolia:
  appId: #这里填上你的appId
  apiKey: #这里填上你的apiKey
  adminApiKey:  #这里填上你的adminApiKey
  chunkSize: 5000
  indexName: #填入自己的index name
  fields:
    - title: #必须配置
    - path:  #必须配置
    - categories: #推荐配置
    - content:
        strip: truncate,0,4000
    - gallery:
    - photos:
    - tags:

feed:
    limit: 20
    order_by: &amp;quot;-date&amp;quot;
    tag_dir: false
    category_dir: false
    rss:
        enable: true
        template: &amp;quot;themes/shoka/layout/_alternate/rss.ejs&amp;quot;
        output: &amp;quot;rss.xml&amp;quot;
    atom:
        enable: true
        template: &amp;quot;themes/shoka/layout/_alternate/atom.ejs&amp;quot;
        output: &amp;quot;atom.xml&amp;quot;
    jsonFeed:
        enable: true
        template: &amp;quot;themes/shoka/layout/_alternate/json.ejs&amp;quot;
        output: &amp;quot;feed.json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;另外需要注意的是你的每一篇博客都需要开头加入下述代码,这样表面这是一篇博客:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;Markdown&#34;&gt;---
title: 文章的标题
date: 文章发布是年/月/日 时/分/秒
categories:
- [博客的分类]
tags:
---
# 这里开始使用Markdown书写博客正文&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;举个栗子:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;Markdown&#34;&gt;---
title: Markdown使用指南
date: 2020/12/24 12:10:45
categories:
- [Markdown使用指南]
tags:
---
# MarkdownNote

common grammar--MarkdownNote

推荐markdown软件[Typora](https://www.typora.io/)
后文略...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;tips:这里只列出了大致需要修改的地方,其他地方你可以阅读主题作者的博客获得更多配置信息&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;修改图片&#34;&gt;&lt;a href=&#34;#修改图片&#34; class=&#34;headerlink&#34; title=&#34;修改图片&#34;&gt;&lt;/a&gt;修改图片&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;进入到shoka文件夹里的source文件夹,再进入images文件夹在这里你可以更改为自己喜欢的图片,&lt;strong&gt;注意图片要和原来的文件名字一模一样否则会加载出错&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_15-19-09.png&#34; alt=&#34;修改图片&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="HEXO搭建个人博客" scheme="https://honshen.xyz/categories/Hexo/" />
        <category term="Hexo" scheme="https://honshen.xyz/tags/Hexo/" />
        <category term="博客" scheme="https://honshen.xyz/tags/%E5%8D%9A%E5%AE%A2/" />
        <category term="主题" scheme="https://honshen.xyz/tags/%E4%B8%BB%E9%A2%98/" />
        <updated>2021-01-31T04:12:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/01/30/CCode/CProgrammaCode%E7%AE%97%E6%B3%95%E9%9B%86%E5%90%88/</id>
        <title>CProgrammaCode算法集合</title>
        <link rel="alternate" href="https://honshen.xyz/2021/01/30/CCode/CProgrammaCode%E7%AE%97%E6%B3%95%E9%9B%86%E5%90%88/"/>
        <content type="html">&lt;h1 id=&#34;cprogrammacode算法集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cprogrammacode算法集合&#34;&gt;#&lt;/a&gt; CProgrammaCode 算法集合&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;C/C++&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;最短路径算法详见short_path_link_gpcpp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最短路径算法详见short_path_link_gpcpp&#34;&gt;#&lt;/a&gt; 最短路径算法 (详见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hvbmdzaGVuZy14dS9DUHJvZ3JhbW1hQ29kZS9ibG9iL21haW4vc2hvcnRfcGF0aF9saW5rX0dQLmNwcA==&#34;&gt; short_path_link_GP.cpp&lt;/span&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;图邻接表 (GP)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;纵向优先搜索遍历 (DFS)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分块查找算法详见blocking_searchcpp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分块查找算法详见blocking_searchcpp&#34;&gt;#&lt;/a&gt; 分块查找算法 (详见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hvbmdzaGVuZy14dS9DUHJvZ3JhbW1hQ29kZS9ibG9iL21haW4vYmxvY2tpbmdfc2VhcmNoLmNwcA==&#34;&gt; blocking_search.cpp&lt;/span&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;按位段分块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;映射查找&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;排序算法详见array_sort&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排序算法详见array_sort&#34;&gt;#&lt;/a&gt; 排序算法 (详见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hvbmdzaGVuZy14dS9DUHJvZ3JhbW1hQ29kZS9ibG9iL21haW4vYXJyYXlfc29ydC5jcHA=&#34;&gt; array_sort&lt;/span&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;直接插入排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;选择排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;快速排序&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="C&amp;C++算法设计" scheme="https://honshen.xyz/categories/CCode/" />
        <category term="算法" scheme="https://honshen.xyz/tags/%E7%AE%97%E6%B3%95/" />
        <category term="c" scheme="https://honshen.xyz/tags/c/" />
        <category term="c++" scheme="https://honshen.xyz/tags/c/" />
        <updated>2021-01-30T04:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/01/28/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%9D%A2%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(Java%E6%A0%B8%E5%BF%83)/</id>
        <title>第4章-面对象编程(Java核心)</title>
        <link rel="alternate" href="https://honshen.xyz/2021/01/28/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%9D%A2%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B(Java%E6%A0%B8%E5%BF%83)/"/>
        <content type="html">&lt;h1 id=&#34;Java笔记–第4章面对象编程-Java核心&#34;&gt;&lt;a href=&#34;#Java笔记–第4章面对象编程-Java核心&#34; class=&#34;headerlink&#34; title=&#34;Java笔记–第4章面对象编程(Java核心)&#34;&gt;&lt;/a&gt;Java笔记–第4章面对象编程(Java核心)&lt;/h1&gt;&lt;h1 id=&#34;面向过程-amp-面向对象-OOP&#34;&gt;&lt;a href=&#34;#面向过程-amp-面向对象-OOP&#34; class=&#34;headerlink&#34; title=&#34;面向过程&amp;amp;面向对象(OOP)&#34;&gt;&lt;/a&gt;面向过程&amp;amp;面向对象(OOP)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;面向过程思想&lt;ul&gt;
&lt;li&gt;步骤简单,第一步做什么,第二步做什么……&lt;/li&gt;
&lt;li&gt;面对过程适合处理一些较为简单的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象思想&lt;ul&gt;
&lt;li&gt;物理类聚,分类的思维模式,首先解决问题需要哪些分类,然后对这些分类进行单独思考,最后对分类下的细节进行面向过程的思索&lt;/li&gt;
&lt;li&gt;面向对象审核处理复杂问题,审核处理多人协作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象编程的本质: 以类的方式组织代码,以对象的组织(封装)数据&lt;/li&gt;
&lt;li&gt;三大特性: 封装、继承、多态&lt;/li&gt;
&lt;li&gt;类和对象的关系&lt;ul&gt;
&lt;li&gt;类是一种抽象的数据类型,它是对某一类事物整体描述/定义,但不能代表某一个具体的事物&lt;/li&gt;
&lt;li&gt;对象是抽象概念的具体实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;方法详解&#34;&gt;&lt;a href=&#34;#方法详解&#34; class=&#34;headerlink&#34; title=&#34;方法详解&#34;&gt;&lt;/a&gt;方法详解&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态方法和非静态方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态方法的修饰符static,非静态方法不加static&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//静态方法
//demo1
public class Demo1&amp;#123;
    //可以直接调用add()
    //其他类调用Demo1.add();
    public static int add()&amp;#123;
        //执行语句
    &amp;#125;
&amp;#125;
//demo2
public class Demo2&amp;#123;
    Demo1.add();
&amp;#125;
//非静态方法
//demo1
public class Demo1&amp;#123;
    //方法里除static修饰的方法都可以直接调用add()
    public int add()&amp;#123;
       //执行语句
    &amp;#125;
&amp;#125;
//demo2
public class Demo2&amp;#123;
    //首先实例化对象
    //对象类型 对象名 = 对象值
    Demo1 demo1 = new Demo1();
    demo1.add();
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo&amp;#123;
    /*
    a,b方法中可以互相调用对方
    public void a()&amp;#123;&amp;#125;
    public void b()&amp;#123;&amp;#125;
    */
    /*
    a不能直接调用b,但是b可以调用a
    原因: static是和类一起加载,不加static则是实例化后方法才存在
    public static void a()&amp;#123;&amp;#125;
    public void b()&amp;#123;&amp;#125;
    */
    //可以互相调用
    public static void a()&amp;#123;
        //也可以Demo.b()
        b();
    &amp;#125;
    public static void b()&amp;#123;
        //也可以Demo.a()
        a();
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;this关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this()调用自己的构造器&lt;/li&gt;
&lt;li&gt;总是指向对象本身&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;创建与初始化对象&#34;&gt;&lt;a href=&#34;#创建与初始化对象&#34; class=&#34;headerlink&#34; title=&#34;创建与初始化对象&#34;&gt;&lt;/a&gt;创建与初始化对象&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用new关键字创建对象,会分配内存空间,对对象进行默认的初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类的构造器也称为构造方法是在进行创建对象的时候必须调用的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;必须和类的名字相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必须没有返回值且不能写void&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student&amp;#123;
    //属性: 字段
    String name;
    int age;
    //方法
    public void study&amp;#123;
        //this代表当前类
        System.out.println(this.name);
    &amp;#125;
&amp;#125;
//================
package xyz.honshen;
public class Application &amp;#123;
    public static void main(String[] args) &amp;#123;
        //类的实例化: stu1和stu2为两个不同实例
        Student stu1 = new Student(); //对对象默认初始化
        Student stu2 = new Student();
        stu1.sayName(); //null
        stu1.changeName(&amp;quot;abc&amp;quot;);
        stu1.sayName(); //abc
        stu2.sayName(); //null
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//构造器
定义一个Student类
public class Student &amp;#123;
    /*
    public Student()&amp;#123;&amp;#125;
    */
&amp;#125;
//====================
public class Application &amp;#123;
    public static void main(String[] args) &amp;#123;
        //Student类中默认包含一个构造方法
        Student stu = new Student();
    &amp;#125;
&amp;#125;
//=====================
public class Student &amp;#123;
    String name;
    //无参构造
    public Student()&amp;#123;
        //实例化会调用构造方法,一般用来初始化值
        //使用new关键字本质调用构造器
        this.name = &amp;quot;abcd&amp;quot;;
    &amp;#125;
    /*
    Alt+insert快捷生成构造器
    一旦定义有参构造,无参构造必须显示定义
    public Student()&amp;#123;&amp;#125;
    public Student(String name)&amp;#123;
    //执行代码
    &amp;#125;
    */
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内存分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;new出的对象实例存在堆中,变量名存在栈里是引用类型&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-27_16-34-45.png&#34; alt=&#34;内存分析&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;三大特性&#34;&gt;&lt;a href=&#34;#三大特性&#34; class=&#34;headerlink&#34; title=&#34;三大特性&#34;&gt;&lt;/a&gt;三大特性&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&#34;封装&#34;&gt;&lt;a href=&#34;#封装&#34; class=&#34;headerlink&#34; title=&#34;封装&#34;&gt;&lt;/a&gt;封装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通常应禁止直接访问一个对象中主句的实际表示,而应通过操作接口来访问,这称为信息隐藏,隐藏代码的实现细节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属性私有 get/set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高内聚,低耦合:类的内部数据操作自己完成不允许外部干涉,仅暴露少量方法给外部&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student &amp;#123;
    //不能通过实例操作name
    private String name;
    //可以通过实例.age操作age
    int age; //相当于public int age;
    //提供方法去操作数据,而不是直接用.去访问
    public void setName(String name)&amp;#123;
        this.name = name;
    &amp;#125;
    public String getName()&amp;#123;
        return this.name;
    &amp;#125;
&amp;#125;
//idea中使用快捷键Alt+insert可以直接添加get和set方法继承&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;继承&#34;&gt;&lt;a href=&#34;#继承&#34; class=&#34;headerlink&#34; title=&#34;继承&#34;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;类和类之间的一种关系,对一批类的抽象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;父类和子类,子类是父类的扩展,也叫派生类,用extends来表示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子类可以继承父类的public方法和public属性,final不能继承&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//java中所有的类都默认直接或间接继承于object
//java只有单继承没有多继承
//父类,继承于object类
public class Person &amp;#123;
    public void say()&amp;#123;
        System.out.println(&amp;quot;nice!&amp;quot;);
    &amp;#125;
    private void set()&amp;#123;
        System.out.println(&amp;quot;cant use&amp;quot;);
    &amp;#125;
&amp;#125;
//子类
public class Student extends Person&amp;#123;
    //extends先执行父类构造器,在执行子类构造器
    /*
    public Student()&amp;#123;
    //调用父类的构造器必须要在第一行
        super();//super(参数)调用有参构造,不写默认调用
        //子类的其他语句
    &amp;#125;
    */
&amp;#125;
//Application
public class Application &amp;#123;
    public static void main(String[] args) &amp;#123;
        Student stu = new Student();
        //只能使用public的方法,private方法不能使用
        stu.say();
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;super关键字&lt;ul&gt;
&lt;li&gt;super调用父类构造方法必须在构造方法第一个&lt;/li&gt;
&lt;li&gt;super必须只能出现在子类方法或构造方法中&lt;/li&gt;
&lt;li&gt;super和this不能同时调用构造方法&lt;/li&gt;
&lt;li&gt;this本身调用者,super父类对象的引用&lt;/li&gt;
&lt;li&gt;this没有继承也能使用,super在继承下使用&lt;/li&gt;
&lt;li&gt;this()本类方法的构造,super()父类关键字的构造&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//父类
public class Person &amp;#123;
    protected String name;
    public void say()&amp;#123;
        System.out.println(&amp;quot;nice!&amp;quot;);
    &amp;#125;
&amp;#125;
//子类
public class Student extends Person&amp;#123;
    public void sayName()&amp;#123;
        //关键字super,调用父类的属性但不能调用私有属性和方法
        System.out.println(super.name);
        this.say();//子类的say();
        super.say();//父类的say();
    &amp;#125;
    public void say()&amp;#123;&amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;多态&#34;&gt;&lt;a href=&#34;#多态&#34; class=&#34;headerlink&#34; title=&#34;多态&#34;&gt;&lt;/a&gt;多态&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多态存在的条件:有继承关系,子类重写父类方法,父类引用指向子类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;classCastException–父类子类转换异常&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//对象能执行那些方法看左边!
public class Application &amp;#123;
    public static void main(String[] args) &amp;#123;
        Son son=new Son();
        //子类能够调用的方法来自父类和子类本身
        son.test1(); //Son.test1()
        //父类的引用指向子类,向上转型,调用方法来自本身,但不能调用子类方法
        Father father=new Son();
        father.test1(); //Father.test1()
        //高转低,强制转换调用子类的放阿飞
        ((Son)father).test2(); //Son.test2()
    &amp;#125;
&amp;#125;
//父类
public class Father &amp;#123;
    public void test1()&amp;#123;
        System.out.println(&amp;quot;Father.test()1&amp;quot;);
    &amp;#125;
&amp;#125;
//子类
public class Son extends Father&amp;#123;
    public  void test1()&amp;#123;
        System.out.println(&amp;quot;Son.test1&amp;quot;);
    &amp;#125;
    public void test2()&amp;#123;
        System.out.println(&amp;quot;Son.test2&amp;quot;);
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;方法的重写&#34;&gt;&lt;a href=&#34;#方法的重写&#34; class=&#34;headerlink&#34; title=&#34;方法的重写&#34;&gt;&lt;/a&gt;方法的重写&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;需要有继承关系,方法名必须相同,参数列表需要相同&lt;/li&gt;
&lt;li&gt;重写的修饰符范围可以扩大但是不能缩小&lt;/li&gt;
&lt;li&gt;重写抛出的异常范围可以缩小但是不能扩大&lt;/li&gt;
&lt;li&gt;不能重写的方法&lt;ul&gt;
&lt;li&gt;static静态&lt;/li&gt;
&lt;li&gt;final常量池,final类不能继承&lt;/li&gt;
&lt;li&gt;private私有&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//主程序
public class Application &amp;#123;
    public static void main(String[] args) &amp;#123;
        Son son=new Son();
        son.test(); //Son.test()
        //父类的引用指向子类,向上转型
        Father father=new Son();
        father.test(); //Father.test()
    &amp;#125;
&amp;#125;
//父类
public class Father &amp;#123;
    public void test()&amp;#123;
        System.out.println(&amp;quot;Father.test()&amp;quot;);
    &amp;#125;
&amp;#125;
//子类
public class Son extends Father&amp;#123;
    //Father father=new Son();
    //非静态的方法才可以被重写,子类重写了父类的方法
    @Override //override重新这是注解
    public void test() &amp;#123;
        super.test();
    &amp;#125;
    /*
    这是原本子类的方法被重写后变成了上面的方法
    public  void test()&amp;#123;
        System.out.println(&amp;quot;Son.test()&amp;quot;);
    &amp;#125;
    * */
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;instanceof关键字&#34;&gt;&lt;a href=&#34;#instanceof关键字&#34; class=&#34;headerlink&#34; title=&#34;instanceof关键字&#34;&gt;&lt;/a&gt;instanceof关键字&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;判断两个类之间是否有关系&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//Object &amp;gt; Person &amp;gt; Student
//Object &amp;gt; String
Object object = new Student();
if (object instanceof Student)&amp;#123; //true
    //执行语句
&amp;#125;
//通过判断是否有关系就可以强制转换
object instanceof Student;//true
object instanceof Object; //true
object instanceof Person; //true
object instanceof String; //false
//父类的引用指向子类的对象
Person person = new Student();
person instanceof Student;//true
person instanceof Object; //true
person instanceof Person; //true
person instanceof String; //编译报错

//转换低(子类)-&amp;gt;高(父类)自动
//转换高(父类)-&amp;gt;低(子类)强制
Father father=new Son();//被自动强制转换为了父类
((Son)father).test2();//强制转换为子类调用子类的方法
//子类转父类,向上转型
//父类转子类,向下转型,强制转换,可能丢失方法&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;static关键字&#34;&gt;&lt;a href=&#34;#static关键字&#34; class=&#34;headerlink&#34; title=&#34;static关键字&#34;&gt;&lt;/a&gt;static关键字&lt;/h1&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Father &amp;#123;
    static &amp;#123;
        //静态代码块,用于初始化
        //和类一起加载并执行一次,且只执行一次
    &amp;#125;
    &amp;#123;
        //匿名代码块,用于赋初始值,在每次生成实例对象时都会调用
    &amp;#125;
    //加了static的属性称为类变量,或静态变量
    //静态变量是所有实例共享的变量
    private static int age;
    //非静态变量
    private double height;

    public void test()&amp;#123;
        Father.age;//类变量可以直接调用
        Father father = new Father();
        //非静态变量需要实例化才能使用属性
        father.height;
        father.age;
    &amp;#125;
&amp;#125;
//静态导入包
import static java.lang.Math.random;
import static java.lang.PI;   
random();//可以之间调用Math.random();
PI;//Math.PI;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;抽象类&#34;&gt;&lt;a href=&#34;#抽象类&#34; class=&#34;headerlink&#34; title=&#34;抽象类&#34;&gt;&lt;/a&gt;抽象类&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_11-03-00.png&#34; alt=&#34;抽象类&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//abstract 抽象类,不能被实例化
public abstract class Father &amp;#123;
    //修饰方法: 抽象方法只有方法名字,没有方法实现
    //继承抽象类的子类必须重写抽象类的所有方法
    //如果子类也是抽象类,则子子类去重写所有方法
    public abstract void say();
    //一旦方法使用abstract,该类必须是抽象类
&amp;#125;
//子类
public class Son extends Father&amp;#123;
    @Override
    //必须重写父类的方法
    public void say() &amp;#123;

    &amp;#125;
&amp;#125;
//子类,除非子类也是抽象类
public abstract class Son extends Father&amp;#123;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;接口&#34;&gt;&lt;a href=&#34;#接口&#34; class=&#34;headerlink&#34; title=&#34;接口&#34;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;普通类: 只有具体实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象类: 具体实现和规范(抽象方法)都有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口: 只有规范&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//接口1
public interface UserServer &amp;#123;
    //接口中不能写方法的实现,方法都是public abstract
    void run(String name);
    //private void test();//报错
    //接口中定义均为public static final
    int age=10; //public static final int age=10
&amp;#125;
//接口2
public interface TimeServer &amp;#123;
    void time();
&amp;#125;

//类可以实现接口,重写接口中的所有方法
//接口可以多继承
//实现: 与接口同名+Impl
public class UserSeverImpl implements UserServer,TimeServer&amp;#123;

    @Override
    public void run(String name) &amp;#123;

    &amp;#125;

    @Override
    public void time() &amp;#123;

    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;内部类&#34;&gt;&lt;a href=&#34;#内部类&#34; class=&#34;headerlink&#34; title=&#34;内部类&#34;&gt;&lt;/a&gt;内部类&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&#34;成员内部类&#34;&gt;&lt;a href=&#34;#成员内部类&#34; class=&#34;headerlink&#34; title=&#34;成员内部类&#34;&gt;&lt;/a&gt;成员内部类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在A类中定义一个内部类,B对A来说就是内部类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//外部类
public class Outer &amp;#123;
    private int id;
    public void out()&amp;#123;
        System.out.println(&amp;quot;Outer&amp;quot;);
    &amp;#125;
    //内部类
    public class Inner&amp;#123;
        public void in()&amp;#123;
            System.out.println(&amp;quot;In&amp;quot;);
        &amp;#125;
        //内部类可以访问外部内的私有属性
        public int getId()&amp;#123;
            return id;
        &amp;#125;
    &amp;#125;
&amp;#125;
//Application
public class Application &amp;#123;
    public static void main(String[] args) &amp;#123;
       Outer outer = new Outer();
       //通过外部类来实例化内部类
        Outer.Inner inner = outer.new Inner();
        inner.in();//In
        System.out.println(inner.getId());//0
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;静态类&#34;&gt;&lt;a href=&#34;#静态类&#34; class=&#34;headerlink&#34; title=&#34;静态类&#34;&gt;&lt;/a&gt;静态类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过static修饰的内部类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//外部类
public class Outer &amp;#123;
    private int id;
    public void out()&amp;#123;
        System.out.println(&amp;quot;Outer&amp;quot;);
    &amp;#125;
    //静态类
    public static class Inner&amp;#123;
        public void in()&amp;#123;
            System.out.println(&amp;quot;In&amp;quot;);
        &amp;#125;
        //内部类可以访问外部内的私有属性
        public int getId()&amp;#123;
            //return id;此时不能访问id
        &amp;#125;
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;局部内部类&#34;&gt;&lt;a href=&#34;#局部内部类&#34; class=&#34;headerlink&#34; title=&#34;局部内部类&#34;&gt;&lt;/a&gt;局部内部类&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//外部类
public class Outer &amp;#123;
    private int id;
    //局部内部类
    public void in()&amp;#123;
        class Inner&amp;#123;
            public int i;
        &amp;#125;
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;匿名内部类&#34;&gt;&lt;a href=&#34;#匿名内部类&#34; class=&#34;headerlink&#34; title=&#34;匿名内部类&#34;&gt;&lt;/a&gt;匿名内部类&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Main&amp;#123;
    public static void main(String[] args) &amp;#123;
        //匿名内部类,不赋值,也可以直接调用方法
        //不用将实例保存于变量
       new Apple().eat();
    &amp;#125;
&amp;#125;
class Apple&amp;#123;
    public void eat()&amp;#123;&amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;异常机制&#34;&gt;&lt;a href=&#34;#异常机制&#34; class=&#34;headerlink&#34; title=&#34;异常机制&#34;&gt;&lt;/a&gt;异常机制&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;java把异常当做对象处理,定义了一个基类java.lang.Throwable作为所有类的超类&lt;/p&gt;
&lt;p&gt;异常类分为:错误(ERROR)和异常(Exception)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_13-26-25.png&#34; alt=&#34;异常机制&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_13-31-43.png&#34; alt=&#34;错误&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_13-31-56.png&#34; alt=&#34;异常&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;异常处理常用五个关键字-try-catch-finally-throw-thorws&#34;&gt;&lt;a href=&#34;#异常处理常用五个关键字-try-catch-finally-throw-thorws&#34; class=&#34;headerlink&#34; title=&#34;异常处理常用五个关键字(try,catch,finally,throw,thorws)&#34;&gt;&lt;/a&gt;异常处理常用五个关键字(try,catch,finally,throw,thorws)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;异常类型,catch参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_13-42-57.png&#34; alt=&#34;异常类型&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
       int a=10;
       int b=0;
       try&amp;#123;//监控异常
           System.out.println(a/b);
       &amp;#125;catch(ArithmeticException e)&amp;#123;
           //catch中的参数是想要捕获的异常类型
           //最高类型Throwable
           //捕获异常
           System.out.println(e);//java.lang.ArithmeticException: / by zero
        &amp;#125;finally &amp;#123;
           //程序无论是否出现异常都会执行的代码块
       &amp;#125;
&amp;#125;
//java支持依次捕获异常
try&amp;#123;
    2/0;//Exception异常
&amp;#125;catch(Error e)&amp;#123;
&amp;#125;catch(Exception e)&amp;#123;
    //此处将捕获到2/0异常
&amp;#125;catch(Throwable e)&amp;#123;
    //按照异常类型从小到大写
&amp;#125;
//主动抛出异常
public class Application &amp;#123;
    public static void main(String[] args) &amp;#123;
       int a=10;
       int b=0;
       Application.divide1(a,b);
       Application.divide2(a,b);
    &amp;#125;
    public static int divide1(int a,int b)&amp;#123;
        if (b==0)&amp;#123;
            //一般在方法中主动抛出异常
            throw new ArithmeticException();
        &amp;#125;
        return a/b;
    &amp;#125;
    //使用throws在方法上抛出异常
    public  static int divide2 (int a, int b) throws ArithmeticException&amp;#123;
        return a/b;
    &amp;#125;
&amp;#125;
//idea快捷键,选中要生成try-catch的代码块
//Ctrl + Alt + T 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;自定义异常&#34;&gt;&lt;a href=&#34;#自定义异常&#34; class=&#34;headerlink&#34; title=&#34;自定义异常&#34;&gt;&lt;/a&gt;自定义异常&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-28_14-07-25.png&#34; alt=&#34;自定义异常&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//自定义异常
public class MyException extends Exception&amp;#123;
    private int index;
    public MyException(int index) &amp;#123;
        this.index = index;
    &amp;#125;
    //打印异常信息
    public String toString()&amp;#123;
        return &amp;quot;MyException &amp;#123;&amp;quot; +
                &amp;quot;ArrayIndexOutOfBounds: &amp;quot;+index+
                &amp;quot;&amp;#125;&amp;quot;;
    &amp;#125;
&amp;#125;
//抛出异常
public class Application &amp;#123;
    public static void main(String[] args) throws MyException &amp;#123;
        int index = 11;
        if(index&amp;gt;10)&amp;#123;
            throw new MyException(index);//Exception in thread &amp;quot;main&amp;quot; MyException &amp;#123;ArrayIndexOutOfBounds: 11&amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
//出现异常安装alt + enter键出现提示选项修复
//尽量添加Finally语句释放占用的资源&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Java笔记" scheme="https://honshen.xyz/categories/Java/" />
        <category term="java" scheme="https://honshen.xyz/tags/java/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="算法" scheme="https://honshen.xyz/tags/%E7%AE%97%E6%B3%95/" />
        <updated>2021-01-28T03:28:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/01/27/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%95%B0%E7%BB%84/</id>
        <title>第3章-方法详解及数组</title>
        <link rel="alternate" href="https://honshen.xyz/2021/01/27/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%95%B0%E7%BB%84/"/>
        <content type="html">&lt;h1 id=&#34;Java笔记–第3章方法详解及数组&#34;&gt;&lt;a href=&#34;#Java笔记–第3章方法详解及数组&#34; class=&#34;headerlink&#34; title=&#34;Java笔记–第3章方法详解及数组&#34;&gt;&lt;/a&gt;Java笔记–第3章方法详解及数组&lt;/h1&gt;&lt;h1 id=&#34;方法的定义&#34;&gt;&lt;a href=&#34;#方法的定义&#34; class=&#34;headerlink&#34; title=&#34;方法的定义&#34;&gt;&lt;/a&gt;方法的定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java方法是语句的集合,它们在一起执行一个功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法是解决一类问题的步骤的有序组合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法包含于类或对象中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法在程序中被创建,在其他地方被引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法的原子性: 一个方法只完成一个工能,这样利于后期的扩展&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//System.out.println();其中System为系统类,out为输出对象,println为方法
//方法的命名规则:首字母小写,驼峰命名
//main方法
public static void main(String[] args) &amp;#123;
&amp;#125;
//static将变量提升为类变量,可以直接在该类的其他地方调用&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法包含一个方法头和一个方法体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修饰符: 可选,告诉编译器如何调用该方法,定义了方法的访问类型&lt;/li&gt;
&lt;li&gt;返回值类型: 方法可能有返回值–returnValueType是返回值类型;方法没有返回值,则returnValueType为void&lt;/li&gt;
&lt;li&gt;方法名: 方法名和参数表共同构成方法签名&lt;/li&gt;
&lt;li&gt;参数类型: 方法被调用时传递值给参数,这个值称为实参或者变量,参数列表是指参数类型、顺序和参数个数,参数是可选的可以不包含任何参数&lt;/li&gt;
&lt;li&gt;方法体: 方法包含的具体语句,定义该方法的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;修饰符有: public protected default private
修饰符 返回值 方法名 (参数类型 参数名)&amp;#123;
    //方法体
&amp;#125;
add(1,2);//1,2是实际参数
public static int add(int a, int b)&amp;#123;
    //a,b为形式参数
    return a+b;//return终止方法的进行,遇到return直接返回
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;值传递和引用传递&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java基本类型都是值传递&lt;/li&gt;
&lt;li&gt;java引用类型:类,接口类型,数组为引用传递&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;方法的重载&#34;&gt;&lt;a href=&#34;#方法的重载&#34; class=&#34;headerlink&#34; title=&#34;方法的重载&#34;&gt;&lt;/a&gt;方法的重载&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在一个类中,有相同的函数名称,但形参不同的函数&lt;/p&gt;
&lt;p&gt;重载的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法名称相同&lt;/li&gt;
&lt;li&gt;参数列表必须不同(个数、参数排列顺序或类型不同)&lt;/li&gt;
&lt;li&gt;返回类型不同不能做为方法重载,重载的方法返回类型可以相同或不同&lt;/li&gt;
&lt;li&gt;方法名称相同时,编译器会根据参数的个数、参数的类型匹配对应的方法，匹配失败编译器报错&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;double m=max(1,2); //会调用第二个方法返回2.0
int m=max(1,2);//会调用第一个方法返回2,但是注意返回值不同并不能构成方法的重载
public static int max(int a, int b)&amp;#123;
    return a&amp;gt;b?a:b;
&amp;#125;
public static double max(double a, double b)&amp;#123;
    return a&amp;gt;b?a:b;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;命令行传参&#34;&gt;&lt;a href=&#34;#命令行传参&#34; class=&#34;headerlink&#34; title=&#34;命令行传参&#34;&gt;&lt;/a&gt;命令行传参&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新建一个java文件如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    public static void main(String[] args) &amp;#123;
        for (String val: args)
            System.out.println(val);
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在该文件路径下打开cmd,使用javac Demo.java编译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回退到包的src路径下使用 java 包名.Demo才能运行如: java xyz.honshen.Demo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在命令后加入参数 结果如下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_17-28-06.png&#34; alt=&#34;命令行参数&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在main函数中将命令行参数输出到了控制台&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;可变参数&#34;&gt;&lt;a href=&#34;#可变参数&#34; class=&#34;headerlink&#34; title=&#34;可变参数&#34;&gt;&lt;/a&gt;可变参数&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_17-58-29.png&#34; alt=&#34;可变参数&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
   System.out.println(sum(1,2,3,4)); //10
   System.out.println(sum(1,2,3,4,5)); //15
   &amp;#125;
//可变参数
public static int sum (int... num)&amp;#123;
       int sum = 0;
       for(int val : num)
           sum+=val;
       return sum;
   &amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;递归&#34;&gt;&lt;a href=&#34;#递归&#34; class=&#34;headerlink&#34; title=&#34;递归&#34;&gt;&lt;/a&gt;递归&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;递归结构包括两个部分:&lt;ul&gt;
&lt;li&gt;递归头:什么时候不调用自身方法。如果没有头，将陷入死循环。递归体:什么时候需要调用自身方法。&lt;/li&gt;
&lt;li&gt;递归体: 什么时候需要调用自身方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数组&#34;&gt;&lt;a href=&#34;#数组&#34; class=&#34;headerlink&#34; title=&#34;数组&#34;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;数组的创建&#34;&gt;&lt;a href=&#34;#数组的创建&#34; class=&#34;headerlink&#34; title=&#34;数组的创建&#34;&gt;&lt;/a&gt;数组的创建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组是相同类型的数据集合&lt;/li&gt;
&lt;li&gt;下标从0到arr.length-1,索引从0开始&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//数组初始化不赋值默认为0
dataType[] arr; //首选
dataType arr[]; //效果相同但不是首选
dataType[] arr = new dataType[arraySize]; //使用new操作符创建数组
arr.length;//获取数组的长度&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;数组使用&#34;&gt;&lt;a href=&#34;#数组使用&#34; class=&#34;headerlink&#34; title=&#34;数组使用&#34;&gt;&lt;/a&gt;数组使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组变量属于引用类型,数组本身是对象,数组对象本身存在于堆中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[] arr = new int[5];
//遍历
for (int i=0;i&amp;lt;arr.length;i++)&amp;#123;
    //执行语句
&amp;#125;
for (int val : arr)&amp;#123;
    //执行语句
&amp;#125;
//入参和返回值
public static int[] reverse(int[] arr)&amp;#123;
   //执行语句
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;多维-常用的二维-数组&#34;&gt;&lt;a href=&#34;#多维-常用的二维-数组&#34; class=&#34;headerlink&#34; title=&#34;多维(常用的二维)数组&#34;&gt;&lt;/a&gt;多维(常用的二维)数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二维数组是一个特殊的一位数组,其中每一个元素都是一个一维数组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[][] arr = new int[2][5];
int[][] arr = &amp;#123;&amp;#123;1,2,3,4,5&amp;#125;,&amp;#123;6,7,8,9,0&amp;#125;&amp;#125;
arr[0][3];//4
//二维数组遍历
for(int i=0;i&amp;lt; arr.length;i++)&amp;#123;
    for(int j=0;j&amp;lt;arr[i].length;j++)&amp;#123;
         //执行语句
&amp;#125;
for (int[] ins : arr)&amp;#123;
    for (int val : arr)&amp;#123;
        //执行语句
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;三维以上此次类推&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;Array类&#34;&gt;&lt;a href=&#34;#Array类&#34; class=&#34;headerlink&#34; title=&#34;Array类&#34;&gt;&lt;/a&gt;Array类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;java的工具类: java.util.Arrays&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
int[] arr=&amp;#123;1,4,3,2&amp;#125;;
Arrays.toString(arr);//[1, 4, 3, 2]
Arrays.sort(arr); //[1,2,3,4]
Arrays.fill(arr,0);//当arr部分为空时,那部分会被0填充
Arrays.fill(arr,2,4,1); //第2到4之间的元素会被1填充
//冒泡排序,八大排序算法之一
public static void bubbleSort(int[] arr)&amp;#123;
    int temp;
      for (int i=0;i&amp;lt;arr.length-1;i++)&amp;#123;
        for(int j=0;j&amp;lt;arr.length-i-1;j++)&amp;#123;
            if(arr[j+1]&amp;gt;arr[j])&amp;#123;
                temp = arr[j+1];
                arr[j+1]= arr[j];
                arr[j] = arr[j+1];
            &amp;#125;
        &amp;#125;
    &amp;#125;  
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;稀疏数组&#34;&gt;&lt;a href=&#34;#稀疏数组&#34; class=&#34;headerlink&#34; title=&#34;稀疏数组&#34;&gt;&lt;/a&gt;稀疏数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二维数组存储数据初始化很多没有意义的数据0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一种数据结构,把不同元素的行和列记录在一个小规模的数组中,其本身也是一个二维数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;稀疏矩阵解读&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行表明二维数组矩阵的row和col,以及二维数组所含有效数据个数8&lt;/li&gt;
&lt;li&gt;接下来第二行至第八行分别表示二维矩阵的有效数字所在位置的行(0&lt;del&gt;5),列(0&lt;/del&gt;6)和其值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-27_12-44-46.png&#34; alt=&#34;稀疏数组&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;java内存&#34;&gt;&lt;a href=&#34;#java内存&#34; class=&#34;headerlink&#34; title=&#34;java内存&#34;&gt;&lt;/a&gt;java内存&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_19-16-05.png&#34; alt=&#34;java内存&#34;&gt;&lt;/p&gt;
</content>
        <category term="Java笔记" scheme="https://honshen.xyz/categories/Java/" />
        <category term="java" scheme="https://honshen.xyz/tags/java/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="算法" scheme="https://honshen.xyz/tags/%E7%AE%97%E6%B3%95/" />
        <updated>2021-01-27T03:28:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/01/26/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</id>
        <title>第2章-包机制、流程控制及循环结构</title>
        <link rel="alternate" href="https://honshen.xyz/2021/01/26/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%8C%85%E6%9C%BA%E5%88%B6%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%8F%8A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
        <content type="html">&lt;h1 id=&#34;Java笔记–第2章包机制、流程控制及循环结构&#34;&gt;&lt;a href=&#34;#Java笔记–第2章包机制、流程控制及循环结构&#34; class=&#34;headerlink&#34; title=&#34;Java笔记–第2章包机制、流程控制及循环结构&#34;&gt;&lt;/a&gt;Java笔记–第2章包机制、流程控制及循环结构&lt;/h1&gt;&lt;h1 id=&#34;包机制&#34;&gt;&lt;a href=&#34;#包机制&#34; class=&#34;headerlink&#34; title=&#34;包机制&#34;&gt;&lt;/a&gt;包机制&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;包的本质是文件夹,用于区别类名的命名空间&lt;/p&gt;
&lt;p&gt;一般使用公司域名倒置做为包名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//www.baidu.com其包名为com.baidu.www
//项目文件右上角设置里取消勾选Compact Middle Package
package com.baidu.www; //在最上面
import java.util.Date; //导入包,语句必须在package下面
import com.baidu.*;//导入所有类&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_13-27-13.png&#34; alt=&#34;包机制&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;javaDoc&#34;&gt;&lt;a href=&#34;#javaDoc&#34; class=&#34;headerlink&#34; title=&#34;javaDoc&#34;&gt;&lt;/a&gt;javaDoc&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_13-30-07.png&#34; alt=&#34;javaDoc&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package xyz.honshen;
/**
 * @author honshen
 * @version 1.1
 * @since 1.8 开发java的版本jdk1.8
 */
public class HelloWord &amp;#123;
    String name;
    public static void main(String[] args) &amp;#123;
    &amp;#125;
    /**
     * 
     * @param name
     * @return
     * @throws Exception
     */
    public String test(String name) throws Exception&amp;#123;
        return  name;
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;java的Scanner对象–与用户交互&#34;&gt;&lt;a href=&#34;#java的Scanner对象–与用户交互&#34; class=&#34;headerlink&#34; title=&#34;java的Scanner对象–与用户交互&#34;&gt;&lt;/a&gt;java的Scanner对象–与用户交互&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&#34;Scanner基本语法&#34;&gt;&lt;a href=&#34;#Scanner基本语法&#34; class=&#34;headerlink&#34; title=&#34;Scanner基本语法:&#34;&gt;&lt;/a&gt;Scanner基本语法:&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;Scanner s= new Scanner(System.in);
//通过Scanner类的next()与nextLine()方法获取输入的字符串,在读取输入数据以前需要使用hasNext()或hasNextLine()判断是否还有输入的数据&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package xyz.honshen;
import java.util.Scanner;
public class HelloWord &amp;#123;
    public static void main(String[] args) &amp;#123;
        Scanner s = new Scanner(System.in);
        System.out.println(&amp;quot;next接收输入: &amp;quot;);
        //判断用户是否输入
        if (s.hasNext()) &amp;#123;
            String str = s.next();  //next方式接收,只能到空格结束
            //println会换行,print不会换行
            System.out.println(&amp;quot;输入内容为: &amp;quot; + str);    //输出输入内容
        &amp;#125;
        System.out.println(&amp;quot;nextline接收输入: &amp;quot;);
        if (s.hasNextLine())&amp;#123;
            String str = s.nextLine(); //nextLine方式接收,接收一行到\n结束
            System.out.println(&amp;quot;输入内容为: &amp;quot;+ str); //输出输入内容
        &amp;#125;
        s.close(); //关闭Scanner io流必须关闭否则会占用资源
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_14-25-19.png&#34; alt=&#34;next和nextline区别&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;Scanner进阶&#34;&gt;&lt;a href=&#34;#Scanner进阶&#34; class=&#34;headerlink&#34; title=&#34;Scanner进阶&#34;&gt;&lt;/a&gt;Scanner进阶&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;Scanner s= new Scanner(System.in);
int a;
float b;
//接收小数和整数,判断输入是否为整数或小数
if (s.hasNextInt())&amp;#123;
     a=s.nextInt();
     System.out.println(&amp;quot;a: &amp;quot;+a);
&amp;#125;
else if (s.hasNextFloat())&amp;#123;
      b=s.nextFloat();
      System.out.println(&amp;quot;b: &amp;quot;+b);
&amp;#125;
 s.close();
//同理还有nextDouble等&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;java程序之顺序–选择–循环结构-break-continue&#34;&gt;&lt;a href=&#34;#java程序之顺序–选择–循环结构-break-continue&#34; class=&#34;headerlink&#34; title=&#34;java程序之顺序–选择–循环结构(break,continue)&#34;&gt;&lt;/a&gt;java程序之顺序–选择–循环结构(break,continue)&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&#34;顺序结构&#34;&gt;&lt;a href=&#34;#顺序结构&#34; class=&#34;headerlink&#34; title=&#34;顺序结构&#34;&gt;&lt;/a&gt;顺序结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一句一句执行,从上往下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//从上到下输出1 2 3
public static void main(String[] args) &amp;#123;
        System.out.println(&amp;quot;1&amp;quot;);
        System.out.println(&amp;quot;2&amp;quot;);
        System.out.println(&amp;quot;3&amp;quot;);
    &amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;选择结构&#34;&gt;&lt;a href=&#34;#选择结构&#34; class=&#34;headerlink&#34; title=&#34;选择结构&#34;&gt;&lt;/a&gt;选择结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if选择结构&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;String s = &amp;quot;abc&amp;quot;
//string.equals(&amp;quot;str&amp;quot;)判断字符串是否一致
//if语句的嵌套
if(s.equals(&amp;quot;abc&amp;quot;))&amp;#123;
    //执行语句
    if(a&amp;lt;b)&amp;#123;
        //执行语句
    &amp;#125;
&amp;#125;
//多个判断
if(a&amp;lt;b)&amp;#123;
    //执行语句1
&amp;#125;else if(a&amp;lt;c)&amp;#123;
    //执行语句2
&amp;#125;else if(a&amp;lt;d)&amp;#123;
    //执行语句3
&amp;#125;else&amp;#123;
    //执行语句4
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;switch选择结构&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//从javase7开始支持比较字符串,本质是比较数字(hash数字)
switch(表达式)&amp;#123;
    //本质是hashcode编码
    /*
    在文件路径下输入cmd+空格然后回车可直接进入cmd
    将编译的class文件用idea直接打开获得反编译文件反编译后结果,如下
    String name = &amp;quot;abc&amp;quot;;
    switch(name.hashCode())&amp;#123;
        case 9987: 
            //语句
            break;
    &amp;#125;
    */
    case &amp;quot;中国&amp;quot;:
        //语句
        break;
    //不加break,则case穿透会一直执行到break
    case value: 
        //语句
        break;
    default value://可选
        //语句
        break;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;循环结构&#34;&gt;&lt;a href=&#34;#循环结构&#34; class=&#34;headerlink&#34; title=&#34;循环结构&#34;&gt;&lt;/a&gt;循环结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;while&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;while(布尔表达式)&amp;#123;
    //执行语句
&amp;#125;
while(true)&amp;#123;
    //无限循环,常用于服务器监听
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;do-while&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;do&amp;#123;
    //执行语句,至少执行一次
&amp;#125;while(布尔表达式)&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;for(初始化;布尔表达式;更新)&amp;#123;
    //执行语句
&amp;#125;
//例如:
for(int i=0;i&amp;lt;100;i++)&amp;#123;
    //执行语句
    //在idea输入100.for可以直接获得100次的for循环结构
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增强型for循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//jdk5引入的特性,主要遍历数组和集合
for(声明语句:表达式)&amp;#123;
    //执行语句
&amp;#125;
//例如数组遍历: 
int[] numbers = &amp;#123;10,20,30&amp;#125;; //定义一个数组
for (int i=0; i&amp;lt;3; i++)&amp;#123;
    numbers[i]; //每次循环numbers[i]为: 10,20,30
&amp;#125;
for (int val : numbers)&amp;#123;
    val;//每次循环val为: 10, 20, 30
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;break和continue-组合成类似goto语句&#34;&gt;&lt;a href=&#34;#break和continue-组合成类似goto语句&#34; class=&#34;headerlink&#34; title=&#34;break和continue  组合成类似goto语句&#34;&gt;&lt;/a&gt;break和continue  组合成类似goto语句&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;break用于循环和switch,强制退出循环或语句块&lt;/li&gt;
&lt;li&gt;continue只用于循环,跳过本次循环,进入下一次循环&lt;/li&gt;
&lt;li&gt;goto语句:java中保留字含有goto,但并未得到使用,给语句加上label,通过break和continue实现(不建议使用了解即可)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;while(true)&amp;#123;
    if(布尔表达式)
        break;//结束循环
    if(布尔表达式)
        continue;//进入下一次循环
    //执行语句
&amp;#125;
//利用label求质数
outer: for (int i=1;i&amp;lt;100;i++)&amp;#123;
            for(int j=2;j&amp;lt;i/2;j++)&amp;#123;
                if (i%j==0) &amp;#123;//有其他因数,则不是质数
                    continue outer;
                &amp;#125;
            &amp;#125;
            System.out.println(i);
        &amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</content>
        <category term="Java笔记" scheme="https://honshen.xyz/categories/Java/" />
        <category term="java" scheme="https://honshen.xyz/tags/java/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="算法" scheme="https://honshen.xyz/tags/%E7%AE%97%E6%B3%95/" />
        <updated>2021-01-26T04:28:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2021/01/25/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%B8%80%E7%AB%A0HelloWord/</id>
        <title>第1章-HelloWord基础</title>
        <link rel="alternate" href="https://honshen.xyz/2021/01/25/Java/Java%E7%AC%94%E8%AE%B0--%E7%AC%AC%E4%B8%80%E7%AB%A0HelloWord/"/>
        <content type="html">&lt;h1 id=&#34;Java笔记–第1章HelloWord基础&#34;&gt;&lt;a href=&#34;#Java笔记–第1章HelloWord基础&#34; class=&#34;headerlink&#34; title=&#34;Java笔记–第1章HelloWord基础&#34;&gt;&lt;/a&gt;Java笔记–第1章HelloWord基础&lt;/h1&gt;&lt;h1 id=&#34;第一个java程序&#34;&gt;&lt;a href=&#34;#第一个java程序&#34; class=&#34;headerlink&#34; title=&#34;第一个java程序&#34;&gt;&lt;/a&gt;第一个java程序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Tips: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;文件名与类名一致(&lt;em&gt;类名大写,这是规范&lt;/em&gt;),且在该文件的目录下执行java命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大小写敏感&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javac 文件名.java – &lt;strong&gt;javac生成的是文件名.class文件&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;java 文件名 – &lt;strong&gt;java执行的是文件名.class文件,执行java命令文件名不用带后缀class&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//demo类需要与文件名一致
public class HelloWord&amp;#123;
    //idea输入psvm可以直接获得public static void main (String[] args) &amp;#123;&amp;#125;
    public static void main (String[] args) &amp;#123; //参数不能写错
        //idea输入sout能够直接获得ystem.out.print(&amp;quot;&amp;quot;);
        System.out.print(&amp;quot;Hello Word!&amp;quot;); //大小写敏感
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;java程序运行机制&#34;&gt;&lt;a href=&#34;#java程序运行机制&#34; class=&#34;headerlink&#34; title=&#34;java程序运行机制&#34;&gt;&lt;/a&gt;java程序运行机制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编译型(一次性全部编译,执行速度快)&lt;/li&gt;
&lt;li&gt;解释型(即时编译,边执行边编译)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;java入门语法&#34;&gt;&lt;a href=&#34;#java入门语法&#34; class=&#34;headerlink&#34; title=&#34;java入门语法&#34;&gt;&lt;/a&gt;java入门语法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;注释(3种): &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//单行注释

/*
多行
注释
*/

/**
*javaDoc文档注释
*@author 解释
*这是有功能的注释
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;java关键字及标识符&#34;&gt;&lt;a href=&#34;#java关键字及标识符&#34; class=&#34;headerlink&#34; title=&#34;java关键字及标识符&#34;&gt;&lt;/a&gt;java关键字及标识符&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-25_19-46-59.png&#34; alt=&#34;java标识符&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标识符以  字母  $  _   开头,首字母之后可以是 字母 $  _  数字  的任何组合&lt;/p&gt;
&lt;p&gt;不能使用关键字,且大小写敏感也可以中文命名\&lt;/p&gt;
&lt;p&gt;java是强类型语言,所有变量必须先定义后使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;java数据类型&#34;&gt;&lt;a href=&#34;#java数据类型&#34; class=&#34;headerlink&#34; title=&#34;java数据类型&#34;&gt;&lt;/a&gt;java数据类型&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-25_20-08-07.png&#34; alt=&#34;java数据类型&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常用数据类型:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//整数
int num1 = 10;

byte num2 = 10;

short num3 = 10;

long num4 = 10L; //long类型需要数字后加L以区分

//小数

float num5 = 10.0F;//浮点类型需要数字后加F区分double

double num6= 10.0;

//字符
char ch = &amp;#39;a&amp;#39;;

//字符串
String str = &amp;quot;abc&amp;quot;; //String不是关键字而是一个类

//布尔值
boolean flag = false;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;整数扩展&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int num1 = 10; //十进制
int num2 = 010;//0开头表示八进制,结果为8(十进制)
int num3 = 0x10;//0x开头表示十六进制,结果为16(十进制)
int num4 = 0b10;//0b开头表示二进制,结果为2(十进制)
int num5 = 100_0000_0000; //数字之间可以使用下划线分开
//浮点数 有限 离散 舍入误差 大约 接近但不等于
//不要使用浮点数比较使用类BigDecimal
//所有的字符本质是数字可以强制转换
char c1 = &amp;#39;a&amp;#39;;
char c2 = &amp;#39;中&amp;#39;;
int num6 = (int)c1; //97
int num7 = (int)c2; //20013
//unicode编码U0000-UFFFF
char ch1 = &amp;#39;\u0061&amp;#39;; //十六进制转义字符表示字符&amp;#39;a&amp;#39;
//转义字符: 水平制表符: \t 垂直制表符: \r 换行: \n 退格: \b \: \\ &amp;quot;: \&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-25_20-55-23.png&#34; alt=&#34;类型转换&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int i = 128;
byte b = (byte)i; //内存溢出--强制转换(高--&amp;gt;低)
double c = i; //自动转换(低--&amp;gt;高)
//不能对boolean转换
//不能把对象类型转换为不相干类型
//把高容量向低容量需要强制转换
//进行转换可能会出现精度损失和内存溢出
//注意计算溢出
int money = 10_0000_0000;
int years = 20;
int total1= money*years;//溢出,结果为负数
long total2= money*years;//计算结果已经溢出在将溢出结果进行转换,结果为负数
//建议: long total3=money*((long)years);先将其中一个强制另一个自动转换&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;java是强类型语言,每个变量都必须声明其类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个变量都有类型,类型可以是基本类型也可以是引用类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变量名必须是合法的标识符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变量声明是一条完整的语句,每一个声明以分号结束&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//数据类型 变量名 = 值;
type varName [=value] [&amp;#123;,varName=[value]&amp;#125;];
//可以使用逗号隔开以申明多个变量
int a=1,b=2,c=3;
//也可以
int a=1;
int b=2;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;变量作用域&#34;&gt;&lt;a href=&#34;#变量作用域&#34; class=&#34;headerlink&#34; title=&#34;变量作用域&#34;&gt;&lt;/a&gt;变量作用域&lt;/h2&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Varlue &amp;#123;
    static int num = 100; //类变量
    String ch = &amp;#39;abc&amp;#39;; //实例变量,方法外面,类的里面,从属于对象,如果不初始化会赋予一个默认值
    //默认情况: 布尔值:false 字符串: U0000 整形: 0 浮点:0.0 除了基本类型其余为null
    public void method()&amp;#123;
        int i = 0; //局部变量,只在方法内method&amp;#123;&amp;#125;能够使用
        Varlue demo = new Varlue;
        demo.ch;//abc
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;常量&#34;&gt;&lt;a href=&#34;#常量&#34; class=&#34;headerlink&#34; title=&#34;常量&#34;&gt;&lt;/a&gt;常量&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;初始化后不能改变的值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//常量名一般使用大写字符
final double PI = 3.1415;
//修饰符不区分前后
public class Var &amp;#123;
    //不区分前后
    static final double PI = 3.14;
    final static double PI = 3.14;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;变量命名规范&#34;&gt;&lt;a href=&#34;#变量命名规范&#34; class=&#34;headerlink&#34; title=&#34;变量命名规范&#34;&gt;&lt;/a&gt;变量命名规范&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-25_22-52-09.png&#34; alt=&#34;变量命名&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;运算符&#34;&gt;&lt;a href=&#34;#运算符&#34; class=&#34;headerlink&#34; title=&#34;运算符&#34;&gt;&lt;/a&gt;运算符&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-26_12-27-39.png&#34; alt=&#34;运算符&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//如果操作数其中一个为long类型其结果为long类型
//如果操作数其中一个为double其类型为double
long a=10;
int b=10;
double c=10.0;
a+b;//结果为long类型
a+c;//结果为double类型
//如果操作数为short,byte其结果也为long
short c=10;
byte d = 10;
c+d;//结果为int类型
//自增,自减运算符,一元运算符
a++;
b--;
++c;
--d;
//幂运算使用工具类
double pow = Math.pow(2,3); //2^3=8
//短路运算: &amp;amp;&amp;amp;左边为假时不执行右边的算法
boolean a=false;
boolean b=true;
a&amp;amp;&amp;amp;b;//不会执行b语句
//位运算: &amp;amp; | ^ ~
/*
A = 0011 1100
B = 0000 1101
A&amp;amp;B = 0000 1100
A|B = 0011 1101 //一个为1即为1
A^B = 0011 0001 //相同为0不同为1
~B = 1111 0010
2*8怎么运算最快?
2&amp;lt;&amp;lt;3
左移: &amp;lt;&amp;lt; 相当于 *2
右移: &amp;gt;&amp;gt; 相当于 /2
位运算效率极高!
*/
//扩展运算符
a+=5; //a=a+5;
b-=5;
c*=5;
d/=5;
//字符串连接符 +
int a=10;
int b=20;
&amp;quot;&amp;quot;+a+b;//1020 将字符串拼接
a+b+&amp;quot;&amp;quot;;//30 先运算a+b为int再进行拼接
//三元运算符
x?y:z; //如果x语句为真执行y否则执行z&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Java笔记" scheme="https://honshen.xyz/categories/Java/" />
        <category term="java" scheme="https://honshen.xyz/tags/java/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="算法" scheme="https://honshen.xyz/tags/%E7%AE%97%E6%B3%95/" />
        <updated>2021-01-25T04:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2020/12/24/MarkDown/Markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
        <title>Markdown使用指南</title>
        <link rel="alternate" href="https://honshen.xyz/2020/12/24/MarkDown/Markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
        <content type="html">&lt;h1 id=&#34;MarkdownNote&#34;&gt;&lt;a href=&#34;#MarkdownNote&#34; class=&#34;headerlink&#34; title=&#34;MarkdownNote&#34;&gt;&lt;/a&gt;MarkdownNote&lt;/h1&gt;&lt;p&gt;common grammar–MarkdownNote&lt;/p&gt;
&lt;p&gt;推荐markdown软件&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHlwb3JhLmlvLw==&#34;&gt;Typora&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;标题&#34;&gt;&lt;a href=&#34;#标题&#34; class=&#34;headerlink&#34; title=&#34;标题&#34;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用技巧:  “#” + 空格 + 文本&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;###### 六级标题
### 三级标题
## 二级标题
# 一级标题&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;六级标题&#34;&gt;&lt;a href=&#34;#六级标题&#34; class=&#34;headerlink&#34; title=&#34;六级标题&#34;&gt;&lt;/a&gt;六级标题&lt;/h6&gt;&lt;h3 id=&#34;三级标题&#34;&gt;&lt;a href=&#34;#三级标题&#34; class=&#34;headerlink&#34; title=&#34;三级标题&#34;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;&lt;h2 id=&#34;二级标题&#34;&gt;&lt;a href=&#34;#二级标题&#34; class=&#34;headerlink&#34; title=&#34;二级标题&#34;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h1 id=&#34;一级标题&#34;&gt;&lt;a href=&#34;#一级标题&#34; class=&#34;headerlink&#34; title=&#34;一级标题&#34;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;title&#34;&gt;&lt;a href=&#34;#title&#34; class=&#34;headerlink&#34; title=&#34;title&#34;&gt;&lt;/a&gt;title&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用技巧: title下方  + ‘’  = “ 或 “ - “&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;Second Title(-的数量随意)
------

First Title(=的数量随意)
===&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;Second-Title-的数量随意&#34;&gt;&lt;a href=&#34;#Second-Title-的数量随意&#34; class=&#34;headerlink&#34; title=&#34;Second Title(-的数量随意)&#34;&gt;&lt;/a&gt;Second Title(-的数量随意)&lt;/h2&gt;&lt;h1 id=&#34;First-Title-的数量随意&#34;&gt;&lt;a href=&#34;#First-Title-的数量随意&#34; class=&#34;headerlink&#34; title=&#34;First Title(=的数量随意)&#34;&gt;&lt;/a&gt;First Title(=的数量随意)&lt;/h1&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;字体样式&#34;&gt;&lt;a href=&#34;#字体样式&#34; class=&#34;headerlink&#34; title=&#34;字体样式&#34;&gt;&lt;/a&gt;字体样式&lt;/h1&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;加粗使用技巧: “**“ +文本+ “**“&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;**这是加粗文本**&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这是加粗文本&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;斜体使用技巧: “*“+文本+”*“&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;*这是斜体*&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这是斜体&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;粗斜体使用技巧:  “***“+ 文本+”***“&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;***这是粗斜体***&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;这是粗斜体&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;分割线&#34;&gt;&lt;a href=&#34;#分割线&#34; class=&#34;headerlink&#34; title=&#34;分割线&#34;&gt;&lt;/a&gt;分割线&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;分割线使用技巧: 文本下方 + 3个”_”&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;下划线在文本下方(_3个)
___&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下划线在文本下方(_3个)&lt;/p&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;删除线&#34;&gt;&lt;a href=&#34;#删除线&#34; class=&#34;headerlink&#34; title=&#34;删除线&#34;&gt;&lt;/a&gt;删除线&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;删除线使用技巧: “~~“ + 文本 + ‘’~~“&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;~~我不会markdown~~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我不会markdown&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;代码插入&#34;&gt;&lt;a href=&#34;#代码插入&#34; class=&#34;headerlink&#34; title=&#34;代码插入&#34;&gt;&lt;/a&gt;代码插入&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;小块代码使用技巧: “&amp;#96;” + 代码语句 +  “ ` “&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;`npm install hexo-cli --save`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install hexo-cli --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区域代码块使用技巧: “ ```语言类型 “+ {代码块} +”```”&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;​```java
public class demo &amp;#123;
    //代码块
&amp;#125;
​```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class demo &amp;#123;
    //代码块
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;tips: 常用语言类型有c、c++、java、javascript、html、css、nodejs、bash、cmd、markdown等&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;对齐&#34;&gt;&lt;a href=&#34;#对齐&#34; class=&#34;headerlink&#34; title=&#34;对齐&#34;&gt;&lt;/a&gt;对齐&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用技巧: “&amp;gt;”+空格&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;&amp;gt; 第一列
&amp;gt; &amp;gt; 第二列
&amp;gt; &amp;gt; &amp;gt; 第三列&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一列&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二列&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第三列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;链接&#34;&gt;&lt;a href=&#34;#链接&#34; class=&#34;headerlink&#34; title=&#34;链接&#34;&gt;&lt;/a&gt;链接&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用技巧: “[“+文本+”]”+”(“+地址+”)”&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;[百度一下,点击前往百度](https://baidu.com)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlkdS5jb20v&#34;&gt;百度一下,点击前往百度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tips: 中括号中的内容是显示的链接文字,地址可以是网路地址也可以是本机文件的绝对地址&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;图像&#34;&gt;&lt;a href=&#34;#图像&#34; class=&#34;headerlink&#34; title=&#34;图像&#34;&gt;&lt;/a&gt;图像&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用技巧: “!”+”[“+文本+”]”+”(“+地址+”)”&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;![profile](https://avatars0.githubusercontent.com/u/61302414?s=120&amp;amp;v=4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://avatars0.githubusercontent.com/u/61302414?s=120&amp;v=4&#34; alt=&#34;profile&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tips: 中括号中的文本是对图像的一段描述,如果图像加载失败将会显示中括号中的文本,地址可以是网络地址也可以是本机图像文件的绝对地址&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;待解释&#34;&gt;&lt;a href=&#34;#待解释&#34; class=&#34;headerlink&#34; title=&#34;待解释&#34;&gt;&lt;/a&gt;待解释&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用技巧: “[“+”^”+文本+”]”&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;GitHub[^ex]
[^ex]: Build software better, together&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GitHub[^ex]&lt;/p&gt;
&lt;p&gt;[^ex]: Build software better, together&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tips: 一般待解释需要放到文档或网页的页脚进行注释&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;列表&#34;&gt;&lt;a href=&#34;#列表&#34; class=&#34;headerlink&#34; title=&#34;列表&#34;&gt;&lt;/a&gt;列表&lt;/h1&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;无序列表使用技巧: “+” 或 “-“ + 文本&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;+ 无序列表1
+ 无序列表2
- 无序列表3
- 无序列表4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序列表1&lt;/li&gt;
&lt;li&gt;无序列表2&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;无序列表3&lt;/li&gt;
&lt;li&gt;无序列表4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;有序列表使用技巧: 数字 + “.” + 文本&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;1. 有序列表1
2. 有序列表2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;**效果如下: **&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序列表1&lt;/li&gt;
&lt;li&gt;有序列表2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;表格&#34;&gt;&lt;a href=&#34;#表格&#34; class=&#34;headerlink&#34; title=&#34;表格&#34;&gt;&lt;/a&gt;表格&lt;/h1&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;| TITLE | COL  | COL  |
| ----- | ---- | ---- |
| ROW1  | ROW1 | ROW1 |
| ROW2  | ROW2 | ROW2 |&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TITLE&lt;/th&gt;
&lt;th&gt;COL&lt;/th&gt;
&lt;th&gt;COL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ROW1&lt;/td&gt;
&lt;td&gt;ROW1&lt;/td&gt;
&lt;td&gt;ROW1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ROW2&lt;/td&gt;
&lt;td&gt;ROW2&lt;/td&gt;
&lt;td&gt;ROW2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;网页&#34;&gt;&lt;a href=&#34;#网页&#34; class=&#34;headerlink&#34; title=&#34;网页&#34;&gt;&lt;/a&gt;网页&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tips: Markdown支持使用Html,只要你会使用Html,就可以做到任何事!&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;img src=&amp;quot;https://avatars0.githubusercontent.com/u/61302414?s=120&amp;amp;v=4&amp;quot; style=&amp;quot;zoom=50%&amp;quot;/&amp;gt;
&amp;lt;a href=&amp;quot;https://baidu.com/&amp;quot;&amp;gt;百度一下&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;https://avatars0.githubusercontent.com/u/61302414?s=120&amp;v=4&#34; style=&#34;zoom=50%&#34;/&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlkdS5jb20v&#34;&gt;百度一下&lt;/span&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;转义&#34;&gt;&lt;a href=&#34;#转义&#34; class=&#34;headerlink&#34; title=&#34;转义&#34;&gt;&lt;/a&gt;转义&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;当你想使用一些特殊字符时如: &lt;code&gt;&amp;gt; &amp;lt; #&lt;/code&gt;等,可能会被markdown语法解析下面有两种方法防止语法被解析:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用``反引号`来防止被解析,反引号位于esc键下方,被两个反引号包裹的内容不会被解析&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;`&amp;gt; &amp;lt; # ![图片](src) [链接](href)`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt; &amp;lt; # ![图片](src) [链接](href)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用转义字符: &lt;code&gt;\&lt;/code&gt;来防止语法被解析,如下: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;\&amp;gt; 
\&amp;lt;
\\
\#&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;效果如下:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt;&lt;br&gt;&amp;lt;&lt;br&gt;\&lt;br&gt;#&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tips: 如果想要使用反引号可以使用&lt;code&gt;&amp;amp;#96;&lt;/code&gt;来表示  `&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
        <category term="Markdown使用指南" scheme="https://honshen.xyz/categories/MarkDown/" />
        <category term="笔记" scheme="https://honshen.xyz/tags/%E7%AC%94%E8%AE%B0/" />
        <category term="Markdown" scheme="https://honshen.xyz/tags/Markdown/" />
        <updated>2020-12-24T04:10:45.000Z</updated>
    </entry>
    <entry>
        <id>https://honshen.xyz/2020/12/13/Hexo/%E7%AC%AC1%E7%AB%A0-%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8BHEXO%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
        <title>第1章-零基础使用HEXO搭建个人博客之HEXO及其初始化</title>
        <link rel="alternate" href="https://honshen.xyz/2020/12/13/Hexo/%E7%AC%AC1%E7%AB%A0-%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8BHEXO%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
        <content type="html">&lt;h1 id=&#34;零基础HEXO搭建个人博客之HEXO安装及其初始化&#34;&gt;&lt;a href=&#34;#零基础HEXO搭建个人博客之HEXO安装及其初始化&#34; class=&#34;headerlink&#34; title=&#34;零基础HEXO搭建个人博客之HEXO安装及其初始化&#34;&gt;&lt;/a&gt;零基础HEXO搭建个人博客之HEXO安装及其初始化&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;引言: 很多小伙伴都希望搭建一个属于自己的博客平台,今天这篇文章教会大家如何0基础也能搭建个人博客,我们使用Hexo来帮助我们搭建个人博客~&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;准备&#34;&gt;&lt;a href=&#34;#准备&#34; class=&#34;headerlink&#34; title=&#34;准备&#34;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iZWJiYTBkODAzOGU=&#34;&gt;安装git&lt;/span&gt;–&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXQtc2NtLmNvbS8=&#34;&gt;git官网&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xM2Y0NWUyNGIxZGU=&#34;&gt;安装nodejs&lt;/span&gt;–&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==&#34;&gt;nodejs官网&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYzBkOGQxMGExY2I=&#34;&gt;注册github&lt;/span&gt;–创建一个和Username一样名称的仓库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2020/12/08/rSNdZ8.md.png&#34; alt=&#34;创建仓库&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips: 创建仓库名如果与Username不一致,请在下文初始化博客和配置博客文件时使用和仓库名一样的名字!!! &lt;strong&gt;访问链接https://仓库名.github.io访问&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Git&#34;&gt;&lt;a href=&#34;#Git&#34; class=&#34;headerlink&#34; title=&#34;Git&#34;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在任意文件夹里,点击鼠标右键,选择Git bash here,打开git bash输入配置信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;git config --global user.name &amp;quot;用户名&amp;quot;
git config --global user.email &amp;quot;邮箱地址&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 例如:
git config --global user.name &amp;quot;hongsheng-xu&amp;quot;
git config --global user.email &amp;quot;1394948572@qq.com&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;在git bash 里输入&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;ssh-keygen -t rsa -C  &amp;quot;邮箱地址&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;#例如: 
ssh-keygen -t rsa -C  &amp;quot;1394948572@qq.com&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;控制台输出如下: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;Enter file in which to save the key (/c/Users/13949/.ssh/id_rsa):
Created directory &amp;#39;/c/Users/13949/.ssh&amp;#39;.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/13949/.ssh/id_rsa
Your public key has been saved in /c/Users/13949/.ssh/id_rsa.pub
The key fingerprint is:
#后文输出省略......&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;cmd&#34;&gt;# 打开目录--控制台第二行输出Created directory &amp;#39;/c/Users/13949/.ssh&amp;#39;.其中ssh的存放路径为:
C:\Users\13949\.ssh
# 打开github&amp;gt;点击个人头像&amp;gt;点击设置(Settings)&amp;gt;点击SSH and GPG keys&amp;gt;New SSH key&amp;gt;在路径:C:\Users\13949\.ssh记事本打开id_rsa.pub文件,复制全部到New SSH key中key内容里&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://imgchr.com/i/rSdmMn&#34;&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2020/12/08/rSdmMn.md.png&#34; alt=&#34;rSdmMn.md.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Hexo安装&#34;&gt;&lt;a href=&#34;#Hexo安装&#34; class=&#34;headerlink&#34; title=&#34;Hexo安装&#34;&gt;&lt;/a&gt;Hexo安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv&#34;&gt;hexo文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;hexo安装&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;cmd&#34;&gt;# 安装hexo, win+R,输入cmd 打开控制台输入: 
e: 
md blog
cd blog
npm install hexo-cli -g
#列如: 
C:\Users\13949&amp;gt;e:
E:\&amp;gt;md blog
E:\&amp;gt;cd blog
E:\blog&amp;gt;npm install hexo-cli -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Tips: 通过上述代码在E盘创建了一个名为blog的文件夹,接下来我们需要做的就是初始化个人博客&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Hexo初始化&#34;&gt;&lt;a href=&#34;#Hexo初始化&#34; class=&#34;headerlink&#34; title=&#34;Hexo初始化&#34;&gt;&lt;/a&gt;Hexo初始化&lt;/h1&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;cmd&#34;&gt;#在blog文件夹下初始化博客 hexo init 博客名
hexo init hongsheng-xu
#进入博客所在文件夹
cd hongsheng-xu
#安装依赖
npm i
#安装插件
npm i hexo-deployer-git --save
#运行博客
hexo sever
#上一步也可以这样写--运行博客并指定端口名
hexo s -p 8080&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;cmd&#34;&gt;#列如:
E:\blog&amp;gt;hexo init hongsheng-xu
E:\blog&amp;gt;cd hongsheng-xu
E:\blog&amp;gt;hongsheng-xu&amp;gt;npm i
E:\blog&amp;gt;hongsheng-xu&amp;gt;npm i hexo-deployer-git --save
E:\blog&amp;gt;hongsheng-xu&amp;gt;hexo sever&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输入hexo sever后你会看到控制台输出如下:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cmd&#34;&gt;#INFO  Validating config
#INFO  Start processing
#INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;完成这一步,nodejs会建立一个本地服务器通常会向Windows请求相关权限&lt;/p&gt;
&lt;p&gt;你可以复制地址 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo0MDAw5Yiw5rWP6KeI5Zmo55qE5Zyw5Z2A5qCPLOWbnui9puWwseiDveeci+WIsOS4quS6uuWNmuWuouWVpg==&#34;&gt;http://localhost:4000到浏览器的地址栏,回车就能看到个人博客啦&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;同时按住ctrl+c可以停止服务器的运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;搭建好的个人博客大概长这样&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgchr.com/i/rSBmMd&#34;&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2020/12/08/rSBmMd.md.png&#34; alt=&#34;个人博客&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Hexo发布至github&#34;&gt;&lt;a href=&#34;#Hexo发布至github&#34; class=&#34;headerlink&#34; title=&#34;Hexo发布至github&#34;&gt;&lt;/a&gt;Hexo发布至github&lt;/h1&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改博客子目录下_config.yml&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgchr.com/i/ri3Y7T&#34;&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2020/12/10/ri3Y7T.png&#34; alt=&#34;修改_config.yml.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改为https://仓库名.github.io    &lt;strong&gt;这样就可以通过仓库名.github.io去访问个人博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgchr.com/i/ri3Dj1&#34;&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2020/12/10/ri3Dj1.png&#34; alt=&#34;ri3Dj1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;找到deploy加入几行代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgchr.com/i/ri8V29&#34;&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2020/12/10/ri8V29.png&#34; alt=&#34;ri8V29.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;# Deployment
## Docs: https://hexo.io/docs/one-command-deployment
deploy:
  type: git
  branch: master
  repo: https://github.com/hongsheng-xu/hongsheng-xu.github.io.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Tips:  这里type指定为git,branch指定为master,如果你有新建分支可以提交到其他分支上,repo里写上自己仓库的地址&amp;gt;打开github&amp;gt;进入自己的博客仓库(博客名.gthub.io这个仓库)&amp;gt;点击下载code&amp;gt;复制地址&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgchr.com/i/ri8XdK&#34;&gt;&lt;img data-src=&#34;https://s3.ax1x.com/2020/12/10/ri8XdK.png&#34; alt=&#34;ri8XdK.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;在博客所在的文件夹下点击右键打开git bash安装hexo-deployer-git&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images-1300732204.cos.ap-chengdu.myqcloud.com/MarkDown/Snipaste_2021-01-30_11-35-31.png&#34; alt=&#34;博客文件夹&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 在bash里输入以下代码,下载hexo-deployer-git依赖
npm install hexo-deployer-git --save&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;接着在bash里,编译代码hexo g&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;hexo g&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;上传代码(提交到分支) hexo d&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;hexo d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;以后就可以通过https://仓库名.github.io/去访问个人博客了,例如你可以戳此访问搭建好的博客: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ob25nc2hlbmcteHUuZ2l0aHViLmlvLw==&#34;&gt;https://hongsheng-xu.github.io&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="HEXO搭建个人博客" scheme="https://honshen.xyz/categories/Hexo/" />
        <category term="Hexo" scheme="https://honshen.xyz/tags/Hexo/" />
        <category term="博客" scheme="https://honshen.xyz/tags/%E5%8D%9A%E5%AE%A2/" />
        <updated>2020-12-13T04:12:45.000Z</updated>
    </entry>
</feed>
